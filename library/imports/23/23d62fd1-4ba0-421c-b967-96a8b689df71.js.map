{"version":3,"sources":["assets\\Script\\DiceController.js"],"names":["GamePlayReferenceManager","DiceData","cc","Class","name","properties","BGSprite","type","Sprite","serializable","DiceNodes","Node","ctor","DiceController","Component","HasOneDice","Boolean","HasTwoDices","DiceOneData","DiceTwoData","CheckReferences","require","onEnable","ResetDice","DiceCounter","MaxCounter","getRandom","DiceSpeed","start","IterateDice","_dice","_index","index","length","active","AnimateDice","_dice1Value","_dice2Value","_displayIndex","_displayIndex2","setTimeout","Instance","Get_GameManager","DiceFuntionality","min","max","Math","floor","random"],"mappings":"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","sourceRoot":"/","sourcesContent":["var GamePlayReferenceManager=null;\r\nvar DiceData=cc.Class({\r\n    name:\"DiceData\",\r\n    properties: {\r\n        BGSprite: {\r\n            default: null,\r\n            type: cc.Sprite,\r\n            serializable: true,\r\n        },\r\n        DiceNodes: {\r\n            default: [],\r\n            type: [cc.Node],\r\n            serializable: true,\r\n        },\r\n    },\r\n\r\n    ctor: function () {//constructor//\r\n    },\r\n});\r\nvar DiceController=cc.Class({\r\n    name:\"DiceController\",\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        HasOneDice: {\r\n            default: false,\r\n            type: cc.Boolean,\r\n            serializable: true,\r\n        },\r\n        HasTwoDices: {\r\n            default: false,\r\n            type: cc.Boolean,\r\n            serializable: true,\r\n        },\r\n        DiceOneData: {\r\n            default: {},\r\n            type: DiceData,\r\n            serializable: true,\r\n        },\r\n        DiceTwoData: {\r\n            default: {},\r\n            type: DiceData,\r\n            serializable: true,\r\n        },\r\n    },\r\n\r\n    CheckReferences()\r\n    {\r\n        if(!GamePlayReferenceManager || GamePlayReferenceManager==null)\r\n        GamePlayReferenceManager=require('GamePlayReferenceManager');\r\n    },\r\n\r\n    onEnable()\r\n    {\r\n        this.CheckReferences();\r\n        this.ResetDice();\r\n        this.DiceCounter=0;\r\n        this.MaxCounter=this.getRandom(12,21);\r\n        this.DiceSpeed=150;\r\n        //this.AnimateDice(4,5);\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    IterateDice(_dice,_index)\r\n    {\r\n        for (let index = 0; index < _dice.length; index++) {\r\n            if(_index==index)\r\n                _dice[index].active=true;\r\n            else\r\n                _dice[index].active=false;\r\n        }\r\n    },\r\n\r\n    AnimateDice(_dice1Value=0,_dice2Value=0)\r\n    {\r\n        if(this.DiceCounter<this.MaxCounter)\r\n        {\r\n            if(this.HasOneDice)\r\n            {\r\n                var _displayIndex=this.getRandom(0,6)\r\n                this.IterateDice(this.DiceOneData.DiceNodes,_displayIndex);\r\n            }\r\n\r\n            if(this.HasTwoDices)\r\n            {\r\n                var _displayIndex2=this.getRandom(0,6)\r\n                this.IterateDice(this.DiceTwoData.DiceNodes,_displayIndex2);\r\n            }\r\n\r\n            setTimeout(() => {\r\n                this.DiceCounter++;\r\n                this.AnimateDice(_dice1Value,_dice2Value);\r\n             },this.DiceSpeed);\r\n        }\r\n        else\r\n        {\r\n            this.DiceCounter=0;\r\n            \r\n            if(this.HasOneDice)\r\n                this.IterateDice(this.DiceOneData.DiceNodes,(_dice1Value-1));\r\n\r\n            if(this.HasTwoDices)\r\n                this.IterateDice(this.DiceTwoData.DiceNodes,(_dice2Value-1));\r\n             \r\n           setTimeout(() => {\r\n                GamePlayReferenceManager.Instance.Get_GameManager().DiceFuntionality();\r\n           }, 1000); \r\n        }\r\n    },\r\n\r\n    getRandom:function(min,max)\r\n    {\r\n        return Math.floor(Math.random() * (max - min) ) + min; // min included and max excluded\r\n    },\r\n\r\n    ResetDice()\r\n    {\r\n        this.IterateDice(this.DiceOneData.DiceNodes,0);\r\n        this.IterateDice(this.DiceTwoData.DiceNodes,0);\r\n    },\r\n});\r\n"]}