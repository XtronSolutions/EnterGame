{"version":3,"sources":["assets\\Script\\PlayerDetails.js"],"names":["GamePlayReferenceManager","QuestionsData","_gameManager","PlayerDetails","cc","Class","name","Component","properties","PlayerNameLabel","type","Label","serializable","IsOneQuestion","Boolean","IsPlayerSelectProfit","IsPlayerBusinessTakeOver","IsPlayerDamaging","SelectedPlayerIndex","Integer","SelectedPlayerUserID","Text","QuestionID","QuestionNode","Node","BuyHalfBusiness","LaonPartnership","CompareDice","onEnable","CheckReferences","Instance","Get_GameManager","QuestionAsked","VocQuestion","EstQuestion","ToastMessage","QuestionRef","require","setPlayerIndex","_index","setPlayerName","_name","string","setPlayerUID","_uID","setBuyHalf","_state","RaiseEventOneQuestion","Get_QuestionsData","_Qdata","console","log","VocabularyQuestions","EstablishmentQuestions","Get_MultiplayerController","GetSelectedMode","isActive","GetActiveStatus","Question","Option1","Option2","Option3","Option4","Get_GameplayUIManager","ShowQuestionToast","_data","UserID","UserIndex","IsVoc","Get_MultiplayerSyncManager","RaiseEvent","ToggleWaitingScreen_OneQuestionSetupUI","ShowToast","RaiseEventSelectPlayerForProfit","_gameplayManager","_playerIndex","GetTurnNumber","_iD","PlayerGameInfo","PlayerUID","PlayerName","OwnPlayerID","UserName","ExitAlongTurnOver_SelectPlayerForProfit","SelectPlayerBusinessTakeOver","Exit_SelectPlayerGeneric","EnableScreen__BusinessTakeOver","_businessLength","NoOfBusiness","length","_businessCounter","index","IsPartnership","SelectPlayerBusinessDamaging","IsBankRupted","GetBankruptedStatus","_sentdata","Player","PlayerIndex","MyUserID","WaitingForReply","ToggleWaitingScreen_PartnerShipSetup","SelectPlayerLoanPartnership","StartNewBusiness_BusinessSetup","SelectPlayerCompareDice","CashLimit","_Player1dice","RollTwoDices","_Player2dice","_player1CashLimit","_player2CashLimit","Cash","Dice1","Dice2","Limit1","Limit2","setTimeout","AskVocabularyQuestion","GetVocabularyQuestionsIndex","SelectPlayerForProfit","SelectPlayerTakeOver","SelectPlayerDamaging","SelectingPlayerLaonPartnership","SelectingPlayerCompareDice","AskEstablishmentQuestion","GetEstablishmentQuestionsIndex","getRandom","min","max","Math","floor","random","update","dt","IsActive","ExitAlongTurnOver_OneQuestionSetupUI","ExitAlongTurnOver_SelectPlayerGeneric"],"mappings":"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","sourceRoot":"/","sourcesContent":["var GamePlayReferenceManager = null;\r\nvar QuestionsData = null;\r\nvar _gameManager = null;\r\nvar PlayerDetails = cc.Class({\r\n  name: \"PlayerDetails\",\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    PlayerNameLabel: {\r\n      default: null,\r\n      type: cc.Label,\r\n      serializable: true,\r\n    },\r\n    IsOneQuestion: {\r\n      default: false,\r\n      type: cc.Boolean,\r\n      serializable: true,\r\n    },\r\n    IsPlayerSelectProfit: {\r\n      default: false,\r\n      type: cc.Boolean,\r\n      serializable: true,\r\n    },\r\n    IsPlayerBusinessTakeOver: {\r\n      default: false,\r\n      type: cc.Boolean,\r\n      serializable: true,\r\n    },\r\n    IsPlayerDamaging: {\r\n      default: false,\r\n      type: cc.Boolean,\r\n      serializable: true,\r\n    },\r\n    SelectedPlayerIndex: {\r\n      default: 0,\r\n      type: cc.Integer,\r\n      serializable: true,\r\n    },\r\n    SelectedPlayerUserID: {\r\n      default: \"\",\r\n      type: cc.Text,\r\n      serializable: true,\r\n    },\r\n    QuestionID: {\r\n      default: 0,\r\n      type: cc.Integer,\r\n      serializable: true,\r\n    },\r\n    QuestionNode: {\r\n      default: null,\r\n      type: cc.Node,\r\n      serializable: true,\r\n    },\r\n\r\n    BuyHalfBusiness: {\r\n      default: false,\r\n      type: cc.Boolean,\r\n      serializable: true,\r\n    },\r\n\r\n    LaonPartnership: {\r\n      default: false,\r\n      type: cc.Boolean,\r\n      serializable: true,\r\n    },\r\n\r\n    CompareDice: {\r\n      default: false,\r\n      type: cc.Boolean,\r\n      serializable: true,\r\n    },\r\n  },\r\n\r\n  onEnable() {\r\n    this.CheckReferences();\r\n\r\n    _gameManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n\r\n    if (this.IsOneQuestion) {\r\n      this.QuestionAsked = false;\r\n      this.VocQuestion = false;\r\n      this.EstQuestion = false;\r\n      this.ToastMessage = \"\";\r\n      if (this.QuestionNode) {\r\n        this.QuestionRef = null;\r\n        // console.log(this.QuestionRef);\r\n      }\r\n    }\r\n  },\r\n\r\n  CheckReferences() {\r\n    if (!GamePlayReferenceManager || GamePlayReferenceManager == null) GamePlayReferenceManager = require(\"GamePlayReferenceManager\");\r\n    // if (!QuestionsData || QuestionsData == null) QuestionsData = require(\"QuestionsData\");\r\n  },\r\n\r\n  //#region One Question space funtionality\r\n  setPlayerIndex(_index) {\r\n    this.SelectedPlayerIndex = _index;\r\n  },\r\n\r\n  setPlayerName(_name) {\r\n    this.PlayerNameLabel.string = _name;\r\n  },\r\n\r\n  setPlayerUID(_uID) {\r\n    this.SelectedPlayerUserID = _uID;\r\n  },\r\n\r\n  setBuyHalf(_state) {\r\n    this.BuyHalfBusiness = _state;\r\n  },\r\n\r\n  RaiseEventOneQuestion() {\r\n    this.QuestionRef = GamePlayReferenceManager.Instance.Get_QuestionsData();\r\n    var _Qdata;\r\n    if (this.VocQuestion) {\r\n      console.log(\"voc\");\r\n      _Qdata = this.QuestionRef.VocabularyQuestions[this.QuestionID];\r\n    } else if (this.EstQuestion) {\r\n      console.log(\"est\");\r\n      _Qdata = this.QuestionRef.EstablishmentQuestions[this.QuestionID];\r\n    }\r\n\r\n    console.log(_Qdata);\r\n\r\n    if (GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode() == 2) {\r\n      var isActive = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetActiveStatus(this.SelectedPlayerUserID);\r\n\r\n      if (isActive) {\r\n        this.ToastMessage = \"You have asked following question:\" + \"\\n\" + _Qdata.Question + \"\\n\" + \"A. \" + _Qdata.Option1 + \"\\n\" + \"B. \" + _Qdata.Option2 + \"\\n\" + \"C. \" + _Qdata.Option3 + \"\\n\" + \"D. \" + _Qdata.Option4 + \"\\n\" + \"\\n\" + \"waiting for player to answer....\";\r\n        //GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_OneQuestionSetupUI(true);\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowQuestionToast(this.ToastMessage);\r\n\r\n        var _data = { Question: this.QuestionID, UserID: this.SelectedPlayerUserID, UserIndex: this.SelectedPlayerIndex, IsVoc: this.VocQuestion };\r\n        GamePlayReferenceManager.Instance.Get_MultiplayerSyncManager().RaiseEvent(7, _data);\r\n\r\n        //wait for other player\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_OneQuestionSetupUI(true);\r\n        _gameManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        this.QuestionAsked = true;\r\n      } else {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is not active anymore.\");\r\n      }\r\n    } else {\r\n      console.log(\"no sending question to bot\");\r\n    }\r\n  },\r\n\r\n  RaiseEventSelectPlayerForProfit() {\r\n    if (GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode() == 2) {\r\n      this.ToastMessage = \"You will receive next all payday profits of player \" + this.PlayerNameLabel.string;\r\n      GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(this.ToastMessage, 3200);\r\n\r\n      var _gameplayManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n      var _playerIndex = _gameplayManager.GetTurnNumber();\r\n      var _iD = _gameplayManager.PlayerGameInfo[_playerIndex].PlayerUID;\r\n      var _name = _gameplayManager.PlayerGameInfo[_playerIndex].PlayerName;\r\n\r\n      var _data = { OwnPlayerID: _iD, UserID: this.SelectedPlayerUserID, UserIndex: this.SelectedPlayerIndex, UserName: _name };\r\n      GamePlayReferenceManager.Instance.Get_MultiplayerSyncManager().RaiseEvent(17, _data);\r\n      GamePlayReferenceManager.Instance.Get_GameplayUIManager().ExitAlongTurnOver_SelectPlayerForProfit();\r\n    } else {\r\n      console.log(\"no selecting player for profit with bot\");\r\n    }\r\n  },\r\n\r\n  SelectPlayerBusinessTakeOver() {\r\n    if (GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode() == 2) {\r\n      var isActive = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetActiveStatus(this.SelectedPlayerUserID);\r\n\r\n      if (isActive) {\r\n        if (this.BuyHalfBusiness == false) {\r\n          var _gameplayManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n          var _data = _gameplayManager.PlayerGameInfo[this.SelectedPlayerIndex];\r\n          console.log(_data);\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().Exit_SelectPlayerGeneric();\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableScreen__BusinessTakeOver(true, _data, this.SelectedPlayerIndex);\r\n        } //condition for card : Choose a player and buy half of one of their businesses. Roll two die, multiply by $3,000 and pay the player that amount for 50% interest in their business. You can choose not to, but you must make that choice before you roll.\r\n        else {\r\n          var _gameplayManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n          var _data = _gameplayManager.PlayerGameInfo[this.SelectedPlayerIndex];\r\n\r\n          var _businessLength = _data.NoOfBusiness.length;\r\n          var _businessCounter = 0;\r\n\r\n          for (let index = 0; index < _data.NoOfBusiness.length; index++) {\r\n            if (_data.NoOfBusiness[index].IsPartnership) {\r\n              _businessCounter++;\r\n            }\r\n          }\r\n\r\n          if (_businessCounter >= _businessLength) {\r\n            GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"All existing businesses of player are with partnership with someone.\");\r\n          } else {\r\n            console.log(_data);\r\n            GamePlayReferenceManager.Instance.Get_GameplayUIManager().Exit_SelectPlayerGeneric();\r\n            GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableScreen__BusinessTakeOver(true, _data, this.SelectedPlayerIndex, true);\r\n          }\r\n        }\r\n      } else {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is not active anymore.\");\r\n      }\r\n    } else {\r\n      console.log(\"no selecting player with bot\");\r\n    }\r\n  },\r\n\r\n  SelectPlayerBusinessDamaging() {\r\n    if (GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode() == 2) {\r\n      var isActive = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetActiveStatus(this.SelectedPlayerUserID);\r\n      var IsBankRupted = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetBankruptedStatus(this.SelectedPlayerUserID);\r\n\r\n      if (isActive) {\r\n        //GamePlayReferenceManager.Instance.Get_GameplayUIManager().Exit_SelectPlayerGeneric();\r\n\r\n        if (IsBankRupted) {\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is already bankrupted this turn.\");\r\n        } else {\r\n          var _gameplayManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n          var _data = _gameplayManager.PlayerGameInfo[this.SelectedPlayerIndex];\r\n\r\n          var _sentdata = { Player: _data, PlayerIndex: this.SelectedPlayerIndex, MyUserID: _gameplayManager.PlayerGameInfo[_gameplayManager.GetTurnNumber()].PlayerUID };\r\n          GamePlayReferenceManager.Instance.Get_MultiplayerSyncManager().RaiseEvent(24, _sentdata);\r\n          _gameManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n          if (this.IsPlayerDamaging) {\r\n            this.WaitingForReply = true;\r\n          }\r\n          //wait for other player\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_PartnerShipSetup(true);\r\n\r\n          console.log(_sentdata);\r\n        }\r\n      } else {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is not active anymore.\");\r\n      }\r\n    } else {\r\n      console.log(\"no selecting player with bot\");\r\n    }\r\n  },\r\n\r\n  SelectPlayerLoanPartnership() {\r\n    if (GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode() == 2) {\r\n      var isActive = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetActiveStatus(this.SelectedPlayerUserID);\r\n      var IsBankRupted = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetBankruptedStatus(this.SelectedPlayerUserID);\r\n\r\n      if (isActive) {\r\n\r\n        if (IsBankRupted) {\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is bankrupted this turn.\");\r\n        } else {\r\n          var _gameplayManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n          var _data = _gameplayManager.PlayerGameInfo[this.SelectedPlayerIndex];\r\n\r\n          var _sentdata = { Player: _data, PlayerIndex: this.SelectedPlayerIndex, MyUserID: _gameplayManager.PlayerGameInfo[_gameplayManager.GetTurnNumber()].PlayerUID };\r\n          //GamePlayReferenceManager.Instance.Get_MultiplayerSyncManager().RaiseEvent(27, _sentdata);\r\n          _gameManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n\r\n          //_gameplayManager.PlayerGameInfo[_gameplayManager.GetTurnNumber()].Cash+=50000;\r\n          // if (this.LaonPartnership) {\r\n          //   this.WaitingForReply = true;\r\n          // }\r\n          //isFirstTime, insideGame = false, modeIndex = 0, _isBankrupted = false, _BankruptAmount = 0, _isCardFunctionality = false, _GivenCash = 0, _StartAnyBusinessWithoutCash = false,_loanPartnership=false\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().StartNewBusiness_BusinessSetup(false,true,GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode(),false,0,true,50000,false,true,_data);\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().Exit_SelectPlayerGeneric();\r\n          console.log(_sentdata);\r\n        }\r\n      } else {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is not active anymore.\");\r\n      }\r\n    } else {\r\n      console.log(\"no selecting player with bot\");\r\n    }\r\n  },\r\n\r\n  SelectPlayerCompareDice() {\r\n    if (GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode() == 2) {\r\n      var isActive = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetActiveStatus(this.SelectedPlayerUserID);\r\n      var IsBankRupted = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetBankruptedStatus(this.SelectedPlayerUserID);\r\n\r\n      if (isActive) {\r\n\r\n        if (IsBankRupted) {\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is bankrupted this turn.\");\r\n        } else {\r\n          var _gameplayManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n          var _data = _gameplayManager.PlayerGameInfo[this.SelectedPlayerIndex];\r\n          var CashLimit=20000;\r\n\r\n          var _Player1dice=_gameplayManager.RollTwoDices();\r\n          var _Player2dice=_gameplayManager.RollTwoDices();\r\n\r\n          var _player1CashLimit=false;\r\n          var _player2CashLimit=false;\r\n\r\n          if(_gameplayManager.PlayerGameInfo[_gameplayManager.GetTurnNumber()].Cash>=20000)\r\n            _player1CashLimit=true;\r\n\r\n          if(_gameplayManager.PlayerGameInfo[this.SelectedPlayerIndex].Cash>=20000)\r\n            _player2CashLimit=true;\r\n\r\n          while(_Player1dice==_Player2dice)\r\n          {\r\n            _Player2dice=_gameplayManager.RollTwoDices();\r\n          }\r\n\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"Your dice result: \"+_Player1dice,1000,false);\r\n\r\n          var _sentdata = { Player: _data, PlayerIndex: this.SelectedPlayerIndex, MyUserID: _gameplayManager.PlayerGameInfo[_gameplayManager.GetTurnNumber()].PlayerUID,Dice1:_Player1dice,Dice2:_Player2dice,Limit1:_player1CashLimit,Limit2:_player2CashLimit };\r\n          GamePlayReferenceManager.Instance.Get_MultiplayerSyncManager().RaiseEvent(27, _sentdata);\r\n          _gameManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n          this.WaitingForReply = true;\r\n\r\n          setTimeout(() => {\r\n            GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_PartnerShipSetup(true);\r\n          }, 1000);\r\n         \r\n          console.log(_sentdata);\r\n        }\r\n      } else {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is not active anymore.\");\r\n      }\r\n    } else {\r\n      console.log(\"no selecting player with bot\");\r\n    }\r\n  },\r\n\r\n  AskVocabularyQuestion() {\r\n    if (this.IsOneQuestion) {\r\n      var _index = GamePlayReferenceManager.Instance.Get_GameManager().GetVocabularyQuestionsIndex();\r\n      if (_index == -1) {\r\n        console.log(\"index -1 received\");\r\n        this.AskVocabularyQuestion();\r\n      } else {\r\n        this.QuestionID = _index;\r\n        //this.QuestionID = this.getRandom(0, 12);\r\n        this.VocQuestion = true;\r\n        this.EstQuestion = false;\r\n        this.RaiseEventOneQuestion();\r\n      }\r\n    }\r\n  },\r\n\r\n  SelectPlayerForProfit() {\r\n    if (this.IsPlayerSelectProfit) {\r\n      this.RaiseEventSelectPlayerForProfit();\r\n    }\r\n  },\r\n\r\n  SelectPlayerTakeOver() {\r\n    if (this.IsPlayerBusinessTakeOver) {\r\n      this.SelectPlayerBusinessTakeOver();\r\n    }\r\n  },\r\n\r\n  SelectPlayerDamaging() {\r\n    if (this.IsPlayerDamaging) {\r\n      this.SelectPlayerBusinessDamaging();\r\n    }\r\n  },\r\n\r\n  SelectingPlayerLaonPartnership() {\r\n    if (this.LaonPartnership) {\r\n      this.SelectPlayerLoanPartnership();\r\n    }\r\n  },\r\n\r\n  SelectingPlayerCompareDice() {\r\n    if (this.CompareDice) {\r\n      this.SelectPlayerCompareDice();\r\n    }\r\n  },\r\n  AskEstablishmentQuestion() {\r\n    if (this.IsOneQuestion) {\r\n      var _index = GamePlayReferenceManager.Instance.Get_GameManager().GetEstablishmentQuestionsIndex();\r\n      if (_index == -1) {\r\n        console.log(\"index -1 received\");\r\n        this.AskEstablishmentQuestion();\r\n      } else {\r\n        this.QuestionID = _index;\r\n        //this.QuestionID = this.getRandom(0, 12);\r\n        this.VocQuestion = false;\r\n        this.EstQuestion = true;\r\n        this.RaiseEventOneQuestion();\r\n      }\r\n    }\r\n  },\r\n\r\n  getRandom: function (min, max) {\r\n    return Math.floor(Math.random() * (max - min)) + min; // min included and max excluded\r\n  },\r\n\r\n  update(dt) {\r\n    if (this.QuestionAsked) {\r\n      if (_gameManager.PlayerGameInfo[this.SelectedPlayerIndex].PlayerUID == this.SelectedPlayerUserID && _gameManager.PlayerGameInfo[this.SelectedPlayerIndex].IsActive == false) {\r\n        this.QuestionAsked = false;\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is not active anymore, skipping turn.\");\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_OneQuestionSetupUI(false);\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ExitAlongTurnOver_OneQuestionSetupUI();\r\n      }\r\n    }\r\n\r\n    if (this.IsPlayerDamaging && this.WaitingForReply) {\r\n      if (_gameManager.PlayerGameInfo[this.SelectedPlayerIndex].PlayerUID == this.SelectedPlayerUserID && _gameManager.PlayerGameInfo[this.SelectedPlayerIndex].IsActive == false) {\r\n        this.WaitingForReply = false;\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is not active anymore, skipping turn.\");\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_PartnerShipSetup(false);\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ExitAlongTurnOver_SelectPlayerGeneric();\r\n      }\r\n    }\r\n\r\n    if (this.CompareDice && this.WaitingForReply) {\r\n      if (_gameManager.PlayerGameInfo[this.SelectedPlayerIndex].PlayerUID == this.SelectedPlayerUserID && _gameManager.PlayerGameInfo[this.SelectedPlayerIndex].IsActive == false) {\r\n        this.WaitingForReply = false;\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is not active anymore, skipping turn.\");\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_PartnerShipSetup(false);\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ExitAlongTurnOver_SelectPlayerGeneric();\r\n      }\r\n    }\r\n  },\r\n\r\n  //   SkippedLoan() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 1;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n\r\n  //   TakenLoan() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 2;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n\r\n  //   IsBankrupt() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 3;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n\r\n  //   IsTurnSkip() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 4;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n\r\n  //   IsDoublePayDay() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 5;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n  // LIFE-CYCLE CALLBACKS:\r\n\r\n  // start () {\r\n\r\n  // },\r\n\r\n  // update (dt) {},\r\n});\r\n"]}