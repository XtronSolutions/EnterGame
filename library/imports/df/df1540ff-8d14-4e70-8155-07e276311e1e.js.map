{"version":3,"sources":["assets\\Script\\PlayerDetails.js"],"names":["GamePlayReferenceManager","QuestionsData","PlayerDetails","cc","Class","name","Component","properties","PlayerNameLabel","type","Label","serializable","IsOneQuestion","Boolean","toolTip","IsPlayerSelectProfit","SelectedPlayerIndex","Integer","SelectedPlayerUserID","Text","QuestionID","QuestionNode","Node","onEnable","CheckReferences","VocQuestion","EstQuestion","ToastMessage","QuestionRef","require","setPlayerIndex","_index","setPlayerName","_name","string","setPlayerUID","_uID","RaiseEventOneQuestion","Instance","Get_QuestionsData","_Qdata","console","log","VocabularyQuestions","EstablishmentQuestions","Get_MultiplayerController","GetSelectedMode","Question","Option1","Option2","Option3","Option4","Get_GameplayUIManager","ToggleWaitingScreen_OneQuestionSetupUI","ShowQuestionToast","_data","UserID","UserIndex","IsVoc","Get_MultiplayerSyncManager","RaiseEvent","RaiseEventSelectPlayerForProfit","ShowToast","_gameplayManager","Get_GameManager","_playerIndex","GetTurnNumber","_iD","PlayerGameInfo","PlayerUID","PlayerName","OwnPlayerID","UserName","ExitAlongTurnOver_SelectPlayerForProfit","AskVocabularyQuestion","getRandom","SelectPlayerForProfit","AskEstablishmentQuestion","min","max","Math","floor","random"],"mappings":";;;;;;AAAA,IAAIA,wBAAwB,GAAG,IAA/B;AACA,IAAIC,aAAa,GAAG,IAApB;AACA,IAAIC,aAAa,GAAGC,EAAE,CAACC,KAAH,CAAS;AAC3BC,EAAAA,IAAI,EAAE,eADqB;AAE3B,aAASF,EAAE,CAACG,SAFe;AAI3BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,eAAe,EAAE;AACf,iBAAS,IADM;AAEfC,MAAAA,IAAI,EAAEN,EAAE,CAACO,KAFM;AAGfC,MAAAA,YAAY,EAAE;AAHC,KADP;AAMVC,IAAAA,aAAa,EAAE;AACb,iBAAS,KADI;AAEbH,MAAAA,IAAI,EAAEN,EAAE,CAACU,OAFI;AAGbF,MAAAA,YAAY,EAAE,IAHD;AAIbG,MAAAA,OAAO,EAAE;AAJI,KANL;AAYVC,IAAAA,oBAAoB,EAAE;AACpB,iBAAS,KADW;AAEpBN,MAAAA,IAAI,EAAEN,EAAE,CAACU,OAFW;AAGpBF,MAAAA,YAAY,EAAE;AAHM,KAZZ;AAiBVK,IAAAA,mBAAmB,EAAE;AACnB,iBAAS,CADU;AAEnBP,MAAAA,IAAI,EAAEN,EAAE,CAACc,OAFU;AAGnBN,MAAAA,YAAY,EAAE;AAHK,KAjBX;AAsBVO,IAAAA,oBAAoB,EAAE;AACpB,iBAAS,EADW;AAEpBT,MAAAA,IAAI,EAAEN,EAAE,CAACgB,IAFW;AAGpBR,MAAAA,YAAY,EAAE;AAHM,KAtBZ;AA2BVS,IAAAA,UAAU,EAAE;AACV,iBAAS,CADC;AAEVX,MAAAA,IAAI,EAAEN,EAAE,CAACc,OAFC;AAGVN,MAAAA,YAAY,EAAE;AAHJ,KA3BF;AAgCVU,IAAAA,YAAY,EAAE;AACZ,iBAAS,IADG;AAEZZ,MAAAA,IAAI,EAAEN,EAAE,CAACmB,IAFG;AAGZX,MAAAA,YAAY,EAAE;AAHF;AAhCJ,GAJe;AA2C3BY,EAAAA,QA3C2B,sBA2ChB;AACT,SAAKC,eAAL;;AAEA,QAAI,KAAKZ,aAAT,EAAwB;AACtB,WAAKa,WAAL,GAAmB,KAAnB;AACA,WAAKC,WAAL,GAAmB,KAAnB;AACA,WAAKC,YAAL,GAAoB,EAApB;;AACA,UAAI,KAAKN,YAAT,EAAuB;AACrB,aAAKO,WAAL,GAAmB,IAAnB,CADqB,CAErB;AACD;AACF;AACF,GAvD0B;AAyD3BJ,EAAAA,eAzD2B,6BAyDT;AAChB,QAAI,CAACxB,wBAAD,IAA6BA,wBAAwB,IAAI,IAA7D,EAAmEA,wBAAwB,GAAG6B,OAAO,CAAC,0BAAD,CAAlC,CADnD,CAEhB;AACD,GA5D0B;AA8D3B;AACAC,EAAAA,cA/D2B,0BA+DZC,MA/DY,EA+DJ;AACrB,SAAKf,mBAAL,GAA2Be,MAA3B;AACD,GAjE0B;AAmE3BC,EAAAA,aAnE2B,yBAmEbC,KAnEa,EAmEN;AACnB,SAAKzB,eAAL,CAAqB0B,MAArB,GAA8BD,KAA9B;AACD,GArE0B;AAuE3BE,EAAAA,YAvE2B,wBAuEdC,IAvEc,EAuER;AACjB,SAAKlB,oBAAL,GAA4BkB,IAA5B;AACD,GAzE0B;AA2E3BC,EAAAA,qBA3E2B,mCA2EH;AACtB,SAAKT,WAAL,GAAmB5B,wBAAwB,CAACsC,QAAzB,CAAkCC,iBAAlC,EAAnB;;AACA,QAAIC,MAAJ;;AACA,QAAI,KAAKf,WAAT,EAAsB;AACpBgB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAF,MAAAA,MAAM,GAAG,KAAKZ,WAAL,CAAiBe,mBAAjB,CAAqC,KAAKvB,UAA1C,CAAT;AACD,KAHD,MAGO,IAAI,KAAKM,WAAT,EAAsB;AAC3Be,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAF,MAAAA,MAAM,GAAG,KAAKZ,WAAL,CAAiBgB,sBAAjB,CAAwC,KAAKxB,UAA7C,CAAT;AACD;;AAEDqB,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AAEA,QAAIxC,wBAAwB,CAACsC,QAAzB,CAAkCO,yBAAlC,GAA8DC,eAA9D,MAAmF,CAAvF,EAA0F;AACxF,WAAKnB,YAAL,GAAoB,uCAAuC,IAAvC,GAA8Ca,MAAM,CAACO,QAArD,GAAgE,IAAhE,GAAuE,KAAvE,GAA+EP,MAAM,CAACQ,OAAtF,GAAgG,IAAhG,GAAuG,KAAvG,GAA+GR,MAAM,CAACS,OAAtH,GAAgI,IAAhI,GAAuI,KAAvI,GAA+IT,MAAM,CAACU,OAAtJ,GAAgK,IAAhK,GAAuK,KAAvK,GAA+KV,MAAM,CAACW,OAAtL,GAAgM,IAAhM,GAAuM,IAAvM,GAA8M,kCAAlO;AACAnD,MAAAA,wBAAwB,CAACsC,QAAzB,CAAkCc,qBAAlC,GAA0DC,sCAA1D,CAAiG,IAAjG;AACArD,MAAAA,wBAAwB,CAACsC,QAAzB,CAAkCc,qBAAlC,GAA0DE,iBAA1D,CAA4E,KAAK3B,YAAjF;AAEA,UAAI4B,KAAK,GAAG;AAAER,QAAAA,QAAQ,EAAE,KAAK3B,UAAjB;AAA6BoC,QAAAA,MAAM,EAAE,KAAKtC,oBAA1C;AAAgEuC,QAAAA,SAAS,EAAE,KAAKzC,mBAAhF;AAAqG0C,QAAAA,KAAK,EAAE,KAAKjC;AAAjH,OAAZ;AACAzB,MAAAA,wBAAwB,CAACsC,QAAzB,CAAkCqB,0BAAlC,GAA+DC,UAA/D,CAA0E,CAA1E,EAA6EL,KAA7E,EANwF,CAQxF;;AACAvD,MAAAA,wBAAwB,CAACsC,QAAzB,CAAkCc,qBAAlC,GAA0DC,sCAA1D,CAAiG,IAAjG;AACD,KAVD,MAUO;AACLZ,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD;AACF,GArG0B;AAuG3BmB,EAAAA,+BAvG2B,6CAuGO;AAChC,QAAI7D,wBAAwB,CAACsC,QAAzB,CAAkCO,yBAAlC,GAA8DC,eAA9D,MAAmF,CAAvF,EAA0F;AACxF,WAAKnB,YAAL,GAAoB,wDAAwD,KAAKnB,eAAL,CAAqB0B,MAAjG;AACAlC,MAAAA,wBAAwB,CAACsC,QAAzB,CAAkCc,qBAAlC,GAA0DU,SAA1D,CAAoE,KAAKnC,YAAzE,EAAuF,IAAvF;;AAEA,UAAIoC,gBAAgB,GAAG/D,wBAAwB,CAACsC,QAAzB,CAAkC0B,eAAlC,EAAvB;;AACA,UAAIC,YAAY,GAAGF,gBAAgB,CAACG,aAAjB,EAAnB;;AACA,UAAIC,GAAG,GAAGJ,gBAAgB,CAACK,cAAjB,CAAgCH,YAAhC,EAA8CI,SAAxD;AACA,UAAIpC,KAAK,GAAG8B,gBAAgB,CAACK,cAAjB,CAAgCH,YAAhC,EAA8CK,UAA1D;AAEA,UAAIf,KAAK,GAAG;AAAEgB,QAAAA,WAAW,EAAEJ,GAAf;AAAoBX,QAAAA,MAAM,EAAE,KAAKtC,oBAAjC;AAAuDuC,QAAAA,SAAS,EAAE,KAAKzC,mBAAvE;AAA4FwD,QAAAA,QAAQ,EAAEvC;AAAtG,OAAZ;AACAjC,MAAAA,wBAAwB,CAACsC,QAAzB,CAAkCqB,0BAAlC,GAA+DC,UAA/D,CAA0E,EAA1E,EAA8EL,KAA9E;AACAvD,MAAAA,wBAAwB,CAACsC,QAAzB,CAAkCc,qBAAlC,GAA0DqB,uCAA1D;AACD,KAZD,MAYO;AACLhC,MAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACD;AACF,GAvH0B;AAyH3BgC,EAAAA,qBAzH2B,mCAyHH;AACtB,QAAI,KAAK9D,aAAT,EAAwB;AACtB,WAAKQ,UAAL,GAAkB,KAAKuD,SAAL,CAAe,CAAf,EAAkB,EAAlB,CAAlB;AACA,WAAKlD,WAAL,GAAmB,IAAnB;AACA,WAAKC,WAAL,GAAmB,KAAnB;AACA,WAAKW,qBAAL;AACD;AACF,GAhI0B;AAkI3BuC,EAAAA,qBAlI2B,mCAkIH;AACtB,QAAI,KAAK7D,oBAAT,EAA+B;AAC7B,WAAK8C,+BAAL;AACD;AACF,GAtI0B;AAwI3BgB,EAAAA,wBAxI2B,sCAwIA;AACzB,QAAI,KAAKjE,aAAT,EAAwB;AACtB,WAAKQ,UAAL,GAAkB,KAAKuD,SAAL,CAAe,CAAf,EAAkB,EAAlB,CAAlB;AACA,WAAKlD,WAAL,GAAmB,KAAnB;AACA,WAAKC,WAAL,GAAmB,IAAnB;AACA,WAAKW,qBAAL;AACD;AACF,GA/I0B;AAiJ3BsC,EAAAA,SAAS,EAAE,mBAAUG,GAAV,EAAeC,GAAf,EAAoB;AAC7B,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAjD,CAD6B,CACyB;AACvD,GAnJ0B,CAqJ3B;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;AA7L2B,CAAT,CAApB","sourceRoot":"/","sourcesContent":["var GamePlayReferenceManager = null;\r\nvar QuestionsData = null;\r\nvar PlayerDetails = cc.Class({\r\n  name: \"PlayerDetails\",\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    PlayerNameLabel: {\r\n      default: null,\r\n      type: cc.Label,\r\n      serializable: true,\r\n    },\r\n    IsOneQuestion: {\r\n      default: false,\r\n      type: cc.Boolean,\r\n      serializable: true,\r\n      toolTip: \"Is current node can be selected as one question functionality\",\r\n    },\r\n    IsPlayerSelectProfit: {\r\n      default: false,\r\n      type: cc.Boolean,\r\n      serializable: true,\r\n    },\r\n    SelectedPlayerIndex: {\r\n      default: 0,\r\n      type: cc.Integer,\r\n      serializable: true,\r\n    },\r\n    SelectedPlayerUserID: {\r\n      default: \"\",\r\n      type: cc.Text,\r\n      serializable: true,\r\n    },\r\n    QuestionID: {\r\n      default: 0,\r\n      type: cc.Integer,\r\n      serializable: true,\r\n    },\r\n    QuestionNode: {\r\n      default: null,\r\n      type: cc.Node,\r\n      serializable: true,\r\n    },\r\n  },\r\n\r\n  onEnable() {\r\n    this.CheckReferences();\r\n\r\n    if (this.IsOneQuestion) {\r\n      this.VocQuestion = false;\r\n      this.EstQuestion = false;\r\n      this.ToastMessage = \"\";\r\n      if (this.QuestionNode) {\r\n        this.QuestionRef = null;\r\n        // console.log(this.QuestionRef);\r\n      }\r\n    }\r\n  },\r\n\r\n  CheckReferences() {\r\n    if (!GamePlayReferenceManager || GamePlayReferenceManager == null) GamePlayReferenceManager = require(\"GamePlayReferenceManager\");\r\n    // if (!QuestionsData || QuestionsData == null) QuestionsData = require(\"QuestionsData\");\r\n  },\r\n\r\n  //#region One Question space funtionality\r\n  setPlayerIndex(_index) {\r\n    this.SelectedPlayerIndex = _index;\r\n  },\r\n\r\n  setPlayerName(_name) {\r\n    this.PlayerNameLabel.string = _name;\r\n  },\r\n\r\n  setPlayerUID(_uID) {\r\n    this.SelectedPlayerUserID = _uID;\r\n  },\r\n\r\n  RaiseEventOneQuestion() {\r\n    this.QuestionRef = GamePlayReferenceManager.Instance.Get_QuestionsData();\r\n    var _Qdata;\r\n    if (this.VocQuestion) {\r\n      console.log(\"voc\");\r\n      _Qdata = this.QuestionRef.VocabularyQuestions[this.QuestionID];\r\n    } else if (this.EstQuestion) {\r\n      console.log(\"est\");\r\n      _Qdata = this.QuestionRef.EstablishmentQuestions[this.QuestionID];\r\n    }\r\n\r\n    console.log(_Qdata);\r\n\r\n    if (GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode() == 2) {\r\n      this.ToastMessage = \"You have asked following question:\" + \"\\n\" + _Qdata.Question + \"\\n\" + \"A. \" + _Qdata.Option1 + \"\\n\" + \"B. \" + _Qdata.Option2 + \"\\n\" + \"C. \" + _Qdata.Option3 + \"\\n\" + \"D. \" + _Qdata.Option4 + \"\\n\" + \"\\n\" + \"waiting for player to answer....\";\r\n      GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_OneQuestionSetupUI(true);\r\n      GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowQuestionToast(this.ToastMessage);\r\n\r\n      var _data = { Question: this.QuestionID, UserID: this.SelectedPlayerUserID, UserIndex: this.SelectedPlayerIndex, IsVoc: this.VocQuestion };\r\n      GamePlayReferenceManager.Instance.Get_MultiplayerSyncManager().RaiseEvent(7, _data);\r\n\r\n      //wait for other player\r\n      GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_OneQuestionSetupUI(true);\r\n    } else {\r\n      console.log(\"no sending question to bot\");\r\n    }\r\n  },\r\n\r\n  RaiseEventSelectPlayerForProfit() {\r\n    if (GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode() == 2) {\r\n      this.ToastMessage = \"You will receive next all payday profits of player \" + this.PlayerNameLabel.string;\r\n      GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(this.ToastMessage, 3200);\r\n\r\n      var _gameplayManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n      var _playerIndex = _gameplayManager.GetTurnNumber();\r\n      var _iD = _gameplayManager.PlayerGameInfo[_playerIndex].PlayerUID;\r\n      var _name = _gameplayManager.PlayerGameInfo[_playerIndex].PlayerName;\r\n\r\n      var _data = { OwnPlayerID: _iD, UserID: this.SelectedPlayerUserID, UserIndex: this.SelectedPlayerIndex, UserName: _name };\r\n      GamePlayReferenceManager.Instance.Get_MultiplayerSyncManager().RaiseEvent(17, _data);\r\n      GamePlayReferenceManager.Instance.Get_GameplayUIManager().ExitAlongTurnOver_SelectPlayerForProfit();\r\n    } else {\r\n      console.log(\"no selecting player for profit with bot\");\r\n    }\r\n  },\r\n\r\n  AskVocabularyQuestion() {\r\n    if (this.IsOneQuestion) {\r\n      this.QuestionID = this.getRandom(0, 12);\r\n      this.VocQuestion = true;\r\n      this.EstQuestion = false;\r\n      this.RaiseEventOneQuestion();\r\n    }\r\n  },\r\n\r\n  SelectPlayerForProfit() {\r\n    if (this.IsPlayerSelectProfit) {\r\n      this.RaiseEventSelectPlayerForProfit();\r\n    }\r\n  },\r\n\r\n  AskEstablishmentQuestion() {\r\n    if (this.IsOneQuestion) {\r\n      this.QuestionID = this.getRandom(0, 12);\r\n      this.VocQuestion = false;\r\n      this.EstQuestion = true;\r\n      this.RaiseEventOneQuestion();\r\n    }\r\n  },\r\n\r\n  getRandom: function (min, max) {\r\n    return Math.floor(Math.random() * (max - min)) + min; // min included and max excluded\r\n  },\r\n\r\n  //   SkippedLoan() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 1;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n\r\n  //   TakenLoan() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 2;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n\r\n  //   IsBankrupt() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 3;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n\r\n  //   IsTurnSkip() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 4;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n\r\n  //   IsDoublePayDay() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 5;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n  // LIFE-CYCLE CALLBACKS:\r\n\r\n  // start () {\r\n\r\n  // },\r\n\r\n  // update (dt) {},\r\n});\r\n"]}