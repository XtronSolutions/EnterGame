{"version":3,"sources":["assets\\Script\\DecksData.js"],"names":["GamePlayReferenceManager","LossesData","MarketingData","WildCardData","BigBusinessData","EnumSpaceType","cc","Enum","None","WildCard","BigBusiness","Marketing","Invest","Losses","PayDay","DoublePayDay","OneQuestion","Sell","BuyOrSell","GoBackSpaces","CardData","Class","name","properties","ID","displayName","type","Text","serializable","tooltip","Description","HasButton","HasTwoButtons","HasThreeButtons","ButtonName","SecondButtonName","ThirdButtonName","ctor","CardUI","ToastNode","Node","ToastLabel","Label","ButtonNode","InteractionButtonNode","InteractionTwoButtonsNode","InteractionThreeButtonsNode","DecksData","Component","MainUI","WildCards","SpacesType","onLoad","CheckReferences","SelectedCardIndex","CardSelected","IsBotTurn","isOwner","onEnable","systemEvent","on","ShowCardInfo","onDisable","off","require","getRandom","min","max","Math","floor","random","ToggleButtons","_isOwner","_hasButton","_isBot","_hasTwoButton","active","setTimeout","ExitCardInfo","GenerateRandomBigBusinessCard","_randomValue","children","getComponent","string","CardFuntionalityButton","GenerateRandomMarketingCard","GenerateRandomLossesCard","GenerateRandomWildCard","SpaceInvest","_index","CompleteTurnWithToast","SpacePayDay","PayDayFunctionality","SpaceDoublePayDay","DoublePayDayFunctionality","SpaceOneQuestion","SpaceSell","SpaceBuyOrSell","SpaceGoBackSpaces","message","_state","Instance","Get_GameManager","ResetCardDisplay","RaiseEventTurnComplete","TwoButtonsFunctionality","event","_type","BigBusinessCardFunctionality","LossesCardFunctionality","MarketingCardFunctionality","WildCardFunctionality","SellFunctionality","InvestFunctionality","BuyOrSellFunctionality","OneQuestionFunctionality","GoBackFunctionality","CheckLoan","_loanTaken","_businessIndex","_manager","_playerIndex","GetTurnNumber","index","PlayerGameInfo","NoOfBusiness","length","LoanTaken","val","Result","v2","_msg","_time","console","log","_delay","Get_GameplayUIManager","ShowToast","_id","_hasTwoScreens","Index","parseInt","_result","IsLoanTaken","x","y","LoanAmount","LawyerStatus","EnableManipilationScreen__BusinessManipulationUISetup","OnStockDiceClicked_TurnDecision","_diceResult","_multiplier","RollTwoDices","Data","result","Dice","Cash","ToggleSkipNextTurn","ToggleScreen_InsufficientBalance","CashGiven","StartNewBusiness_BusinessSetup","OnExpandButtonClicked_TurnDecision","CashCost","ToggleDoublePayNextTurn","_amount","mode","Get_MultiplayerController","GetSelectedMode","MarketingAmount","round","_actorsArray","getPhotonRef","myRoomActorsArray","_data","customProperties","PlayerSessionData","setCustomProperty","Dice1Result","Dice2Result","TotalResult","_loseAmount","LoseAllMarketingMoney","_marketingAmount","_lawyerStatus","_businessAmount","HomeBasedAmount","BrickAndMortarAmount","_hasMarketingAmount","_totalAmount","_marketAmount","_increaseAmount","MultiplyMarketingMoney","bill","isEven","RollOneDice","IsEven","_profit","GetMarketingMoney","DiceResult","CashMulitplier","_hiredLawyer","lawyer","ToggleSkipPayDay_Whole","homeBasedBusiness","brickAndMortarBusiness","homeMultiplier","brickMuliplier","totalAmount","_courtSettlementFees","Type","TotalAmount","tempType","_businessType","BusinessType","ToggleSkipPayDay_HomeBased","_fine","_fees","_loanReset","EnableInvest_InvestSetupUI","OneQuestionScreen_Space_OneQuestion","EnableSellScreen__SellBusinessUISetup","EnableBuyOrSell_BuyOrSellSetupUI","GoBackSpaces_spaceFunctionality","module","exports"],"mappings":"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","sourceRoot":"/","sourcesContent":["var GamePlayReferenceManager=null;\r\nvar LossesData = null;\r\nvar MarketingData = null;\r\nvar WildCardData = null;\r\nvar BigBusinessData = null;\r\n//-------------------------------------------Spaces Data-------------------------//\r\nvar EnumSpaceType = cc.Enum({\r\n    None:0,\r\n    WildCard: 1,\r\n    BigBusiness: 2,\r\n    Marketing: 3,\r\n    Invest: 4,\r\n    Losses:5,\r\n    PayDay: 6,\r\n    DoublePayDay: 7,\r\n    OneQuestion: 8,\r\n    Sell: 9,\r\n    BuyOrSell: 10,\r\n    GoBackSpaces:11,\r\n});\r\n//-------------------------------------------class for card data-------------------------//\r\nvar CardData=cc.Class({\r\n    name:\"CardData\",\r\n    properties: {\r\n        ID:\r\n        {\r\n           displayName:\"ID\",\r\n           type: cc.Text,\r\n           default: \"\",\r\n           serializable: true,\r\n           tooltip:\"Id of the card\"},\r\n        Description:\r\n        {\r\n           displayName:\"Description\",\r\n           type: cc.Text,\r\n           default: \"\",\r\n           serializable: true,\r\n           tooltip:\"description of the card\"},\r\n        HasButton:\r\n        {\r\n           displayName:\"HasButton\",\r\n           type: cc.boolean,\r\n           default: false,\r\n           serializable: true,\r\n            tooltip: \"if this card should have interaction button\"\r\n        },\r\n        HasTwoButtons:\r\n        {\r\n           displayName:\"HasTwoButtons\",\r\n           type: cc.boolean,\r\n           default: false,\r\n           serializable: true,\r\n            tooltip: \"if this card should have two interaction button\"\r\n        },\r\n        HasThreeButtons:\r\n        {\r\n           displayName:\"HasThreeButtons\",\r\n           type: cc.boolean,\r\n           default: false,\r\n           serializable: true,\r\n           tooltip:\"if this card should have three interaction button\"},\r\n        ButtonName:\r\n        {\r\n           displayName:\"ButtonName\",\r\n           type: cc.Text,\r\n           default: \"\",\r\n           serializable: true,\r\n            tooltip: \"button name to show on screen\"\r\n        },\r\n        SecondButtonName:\r\n        {\r\n           displayName:\"SecondButtonName\",\r\n           type: cc.Text,\r\n           default: \"\",\r\n           serializable: true,\r\n            tooltip: \"Second button name to show on screen\"\r\n        },\r\n        ThirdButtonName:\r\n        {\r\n           displayName:\"SecondButtonName\",\r\n           type: cc.Text,\r\n           default: \"\",\r\n           serializable: true,\r\n           tooltip:\"Second button name to show on screen\"},\r\n },\r\n\r\n ctor: function () { //constructor\r\n }\r\n\r\n});\r\n//-------------------------------------------class for card UI-------------------------//\r\nvar CardUI=cc.Class({\r\n   name:\"CardUI\",\r\n   properties: {\r\n       ToastNode:\r\n       {\r\n          displayName:\"ToastNode\",\r\n          type: cc.Node,\r\n          default: null,\r\n          serializable: true,\r\n          tooltip:\"node reference for toast node\"},\r\n       ToastLabel:\r\n       {\r\n          displayName:\"ToastLabel\",\r\n          type: cc.Label,\r\n          default: null,\r\n          serializable: true,\r\n          tooltip:\"label reference for toast node\"},\r\n      ButtonNode:\r\n       {\r\n          displayName:\"ExitButton\",\r\n          type: cc.Node,\r\n          default: null,\r\n          serializable: true,\r\n          tooltip:\"Button reference for node\"},\r\n        InteractionButtonNode:\r\n       {\r\n          displayName:\"InteractionButton\",\r\n          type: cc.Node,\r\n          default: null,\r\n          serializable: true,\r\n           tooltip: \"interaction Button reference for node\"\r\n       },\r\n       InteractionTwoButtonsNode:\r\n       {\r\n          displayName:\"InteractionTwoButtonsNode\",\r\n          type: cc.Node,\r\n          default: null,\r\n          serializable: true,\r\n           tooltip: \"two interaction Button reference for node\"\r\n       },\r\n       InteractionThreeButtonsNode:\r\n       {\r\n          displayName:\"InteractionThreeButtonsNode\",\r\n          type: cc.Node,\r\n          default: null,\r\n          serializable: true,\r\n          tooltip:\"three interaction Button reference for node\"},\r\n},\r\n\r\nctor: function () { //constructor\r\n}\r\n\r\n});\r\n//-------------------------------------------class for decks Data-------------------------//\r\nvar DecksData = cc.Class({\r\n    name: \"DecksData\",\r\n    extends: cc.Component,\r\n    properties: {\r\n        MainUI:\r\n        {\r\n            displayName: \"MainUI\",\r\n            default: null,\r\n            type: CardUI,\r\n            serializable: true,\r\n            tooltip: \"UI of decks\"\r\n        },\r\n        BigBusiness:\r\n        {\r\n            displayName: \"BigBusiness\",\r\n            type: [CardData],\r\n            default: [],\r\n            serializable: true,\r\n            tooltip: \"all cards data for big business\",\r\n        },\r\n        Marketing:\r\n        {\r\n            displayName: \"Marketing\",\r\n            type: [CardData],\r\n            default: [],\r\n            serializable: true,\r\n            tooltip: \"all cards data for marketing\",\r\n        },\r\n        Losses:\r\n        {\r\n            displayName: \"Losses\",\r\n            type: [CardData],\r\n            default: [],\r\n            serializable: true,\r\n            tooltip: \"all cards data for losses\",\r\n        },\r\n        WildCards:\r\n        {\r\n            displayName: \"WildCards\",\r\n            type: [CardData],\r\n            default: [],\r\n            serializable: true,\r\n            tooltip: \"all cards data for WildCards\",\r\n        },\r\n        SpacesType:\r\n        {\r\n            type: EnumSpaceType,\r\n            default: EnumSpaceType.None,\r\n            serializable: true,\r\n            tooltip: \"states machines by type of card or spaces on board\",\r\n        },\r\n    },\r\n\r\n    onLoad() {\r\n        this.CheckReferences();\r\n        this.SelectedCardIndex = -1;\r\n        this.CardSelected = -1;\r\n        this.IsBotTurn = false;\r\n        this.isOwner = false;\r\n\r\n        //this.BigBusinessCardFunctionality(\"1\");\r\n        //for testing\r\n        // this.Counter=0;\r\n        // this.GenerateRandomBigBusinessCard(this.Counter);\r\n    },\r\n\r\n    onEnable: function () {\r\n        //events subscription to be called\r\n        cc.systemEvent.on(\"ShowCard\", this.ShowCardInfo, this);\r\n      },\r\n    \r\n      onDisable: function () {\r\n        cc.systemEvent.off(\"ShowCard\", this.ShowCardInfo, this);\r\n      },\r\n    CheckReferences() {\r\n        if (!GamePlayReferenceManager || GamePlayReferenceManager == null)\r\n            GamePlayReferenceManager = require('GamePlayReferenceManager');\r\n    },\r\n\r\n    getRandom: function (min, max) {\r\n        return Math.floor(Math.random() * (max - min)) + min; // min included and max excluded\r\n    },\r\n\r\n    ToggleButtons(_isOwner, _hasButton = false, _isBot = false,_hasTwoButton=false) {\r\n        if (_isOwner && _hasButton) {\r\n            this.MainUI.ButtonNode.active = false;\r\n            this.MainUI.InteractionButtonNode.active = true;\r\n\r\n            if (_hasTwoButton)\r\n                this.MainUI.InteractionTwoButtonsNode.active = true;\r\n            else\r\n                this.MainUI.InteractionTwoButtonsNode.active = false; \r\n        }\r\n        else if (_isOwner && !_hasButton) {\r\n            this.MainUI.ButtonNode.active = true;\r\n            this.MainUI.InteractionButtonNode.active = false;\r\n            this.MainUI.InteractionTwoButtonsNode.active = false;\r\n        }\r\n        else {\r\n            this.MainUI.InteractionButtonNode.active = false;\r\n            this.MainUI.ButtonNode.active = false;\r\n            this.MainUI.InteractionTwoButtonsNode.active = false;\r\n\r\n            if (_isBot == false) {\r\n                setTimeout(() => {\r\n                    this.ExitCardInfo();\r\n                }, 3200);\r\n            }\r\n        }\r\n    },\r\n\r\n    GenerateRandomBigBusinessCard(_isOwner, _randomValue, _isBot = false) {\r\n        BigBusinessData = null;\r\n        this.IsBotTurn = _isBot;\r\n        this.SpacesType = EnumSpaceType.BigBusiness;\r\n        this.isOwner = _isOwner;\r\n        this.SelectedCardIndex = _randomValue;\r\n        this.CardSelected = this.BigBusiness[this.SelectedCardIndex].ID;\r\n\r\n        if (this.BigBusiness[this.SelectedCardIndex].HasButton)\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = this.BigBusiness[this.SelectedCardIndex].ButtonName;\r\n\r\n        if (this.BigBusiness[this.SelectedCardIndex].HasTwoButtons)\r\n            this.MainUI.InteractionTwoButtonsNode.children[0].children[0].getComponent(cc.Label).string = this.BigBusiness[this.SelectedCardIndex].SecondButtonName;\r\n        \r\n        this.ShowCardInfo(this.BigBusiness[this.SelectedCardIndex].Description, true);\r\n        this.ToggleButtons(_isOwner, this.BigBusiness[this.SelectedCardIndex].HasButton, _isBot,this.BigBusiness[this.SelectedCardIndex].HasTwoButtons);\r\n\r\n        if (_isBot) {\r\n            this.CardFuntionalityButton();\r\n        }\r\n    },\r\n\r\n    GenerateRandomMarketingCard(_isOwner, _randomValue, _isBot = false) {\r\n        MarketingData = null;\r\n        this.IsBotTurn = _isBot;\r\n        this.SpacesType = EnumSpaceType.Marketing;\r\n        this.isOwner = _isOwner;\r\n        this.SelectedCardIndex = _randomValue;\r\n        this.CardSelected = this.Marketing[this.SelectedCardIndex].ID;\r\n\r\n        if (this.Marketing[this.SelectedCardIndex].HasButton)\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = this.Marketing[this.SelectedCardIndex].ButtonName;\r\n    \r\n        if (this.Marketing[this.SelectedCardIndex].HasTwoButtons)\r\n            this.MainUI.InteractionTwoButtonsNode.children[0].children[0].getComponent(cc.Label).string = this.Marketing[this.SelectedCardIndex].SecondButtonName;\r\n        \r\n        this.ShowCardInfo(this.Marketing[this.SelectedCardIndex].Description, true);\r\n        this.ToggleButtons(_isOwner, this.Marketing[this.SelectedCardIndex].HasButton, _isBot,this.Marketing[this.SelectedCardIndex].HasTwoButtons);\r\n\r\n        if (_isBot) {\r\n            this.CardFuntionalityButton();\r\n        }\r\n    },\r\n\r\n    GenerateRandomLossesCard(_isOwner, _randomValue, _isBot = false) {\r\n        LossesData = null;\r\n        this.IsBotTurn = _isBot;\r\n        this.isOwner = _isOwner;\r\n        this.SpacesType = EnumSpaceType.Losses;\r\n        this.SelectedCardIndex = _randomValue;\r\n        this.CardSelected = this.Losses[this.SelectedCardIndex].ID;\r\n\r\n        this.ShowCardInfo(this.Losses[this.SelectedCardIndex].Description, true);\r\n\r\n        if (this.Losses[this.SelectedCardIndex].HasButton)\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = this.Losses[this.SelectedCardIndex].ButtonName;\r\n     \r\n        if (this.Losses[this.SelectedCardIndex].HasTwoButtons)\r\n            this.MainUI.InteractionTwoButtonsNode.children[0].children[0].getComponent(cc.Label).string = this.Losses[this.SelectedCardIndex].SecondButtonName;\r\n     \r\n        this.ToggleButtons(_isOwner, this.Losses[this.SelectedCardIndex].HasButton, _isBot,this.Losses[this.SelectedCardIndex].HasTwoButtons);\r\n\r\n        if (_isBot) {\r\n            this.CardFuntionalityButton();\r\n        }\r\n    },\r\n\r\n    GenerateRandomWildCard(_isOwner, _randomValue, _isBot = false) {\r\n        WildCardData = null;\r\n        this.IsBotTurn = _isBot;\r\n        this.SpacesType = EnumSpaceType.WildCard;\r\n        this.SelectedCardIndex = _randomValue;\r\n        this.isOwner = _isOwner;\r\n        this.CardSelected = this.WildCards[this.SelectedCardIndex].ID;\r\n\r\n        if (this.WildCards[this.SelectedCardIndex].HasButton)\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = this.WildCards[this.SelectedCardIndex].ButtonName;\r\n \r\n        if (this.WildCards[this.SelectedCardIndex].HasTwoButtons)\r\n            this.MainUI.InteractionTwoButtonsNode.children[0].children[0].getComponent(cc.Label).string = this.WildCards[this.SelectedCardIndex].SecondButtonName;\r\n        \r\n        this.ShowCardInfo(this.WildCards[this.SelectedCardIndex].Description, true);\r\n        this.ToggleButtons(_isOwner, this.WildCards[this.SelectedCardIndex].HasButton, _isBot,this.WildCards[this.SelectedCardIndex].HasTwoButtons);\r\n\r\n        if (_isBot) {\r\n            this.CardFuntionalityButton();\r\n        }\r\n    },\r\n\r\n    SpaceInvest(_isOwner, _index, _isBot = false) {\r\n        this.IsBotTurn = _isBot;\r\n        this.isOwner = _isOwner;\r\n        this.SpacesType = EnumSpaceType.Invest;\r\n        this.ShowCardInfo(\"You can invest one more time in Gold or stocks this turn.\", true);\r\n        this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n        this.ToggleButtons(_isOwner, true, _isBot);\r\n\r\n        if (_isBot) {\r\n            this.CompleteTurnWithToast(\"msg\", 2100);\r\n        }\r\n    },\r\n\r\n    SpacePayDay(_isOwner, _index) {\r\n        this.ShowCardInfo(\"You have landed on PayDay space.\", true);\r\n        this.PayDayFunctionality();\r\n\r\n        this.ToggleButtons(_isOwner, false);\r\n    },\r\n\r\n    SpaceDoublePayDay(_isOwner, _index) {\r\n        this.ShowCardInfo(\"You have landed on DoublePayDay space.\", true);\r\n        this.DoublePayDayFunctionality();\r\n\r\n        this.ToggleButtons(_isOwner, false);\r\n    },\r\n\r\n    SpaceOneQuestion(_isOwner, _index, _isBot = false) {\r\n        this.IsBotTurn = _isBot;\r\n        this.isOwner = _isOwner;\r\n        this.SpacesType = EnumSpaceType.OneQuestion;\r\n        this.ShowCardInfo(\"You can ask one question to any other player, if player is unable to answer they will pay you some cash amount.\", true);\r\n        this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n        this.ToggleButtons(_isOwner, true, _isBot);\r\n        if (_isBot) {\r\n            this.CompleteTurnWithToast(\"msg\", 2100);\r\n        }\r\n    },\r\n\r\n    SpaceSell(_isOwner, _index, _isBot = false) {\r\n        this.IsBotTurn = _isBot;\r\n        this.isOwner = _isOwner;\r\n        this.SpacesType = EnumSpaceType.Sell;\r\n        this.ShowCardInfo(\"You can sell any one of your business or can skip turn.\", true);\r\n        this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n        this.ToggleButtons(_isOwner, true, _isBot);\r\n        if (_isBot) {\r\n            this.CompleteTurnWithToast(\"msg\", 2100);\r\n        }\r\n    },\r\n\r\n    SpaceBuyOrSell(_isOwner, _index, _isBot = false) {\r\n        this.IsBotTurn = _isBot;\r\n        this.isOwner = _isOwner;\r\n        this.SpacesType = EnumSpaceType.BuyOrSell;\r\n        this.ShowCardInfo(\"You can Buy or sell Gold or stocks one more time in this turn.\", true);\r\n        this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n        this.ToggleButtons(_isOwner, true, _isBot);\r\n        if (_isBot) {\r\n            this.CompleteTurnWithToast(\"msg\", 2100);\r\n        }\r\n    },\r\n\r\n    SpaceGoBackSpaces(_isOwner, _index, _isBot = false) {\r\n        this.IsBotTurn = _isBot;\r\n        this.isOwner = _isOwner;\r\n        this.SpacesType = EnumSpaceType.GoBackSpaces;\r\n        this.ShowCardInfo(\"you will have to go back 3 spaces.\", true);\r\n        this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n        this.ToggleButtons(_isOwner, true, _isBot);\r\n        if (_isBot) {\r\n            setTimeout(() => {\r\n                this.CardFuntionalityButton();\r\n            }, 1000);\r\n            \r\n        }\r\n    },\r\n\r\n    ShowCardInfo: function (message, _state) {\r\n        if (_state) {\r\n            this.MainUI.ToastNode.active = true;\r\n            this.MainUI.ToastLabel.string = message;\r\n        } else {\r\n            this.MainUI.ToastLabel.string = \"\";\r\n            this.MainUI.ToastNode.active = false;\r\n        }\r\n    },\r\n\r\n    ExitCardInfo() {\r\n        this.ShowCardInfo(\"\", false);\r\n        GamePlayReferenceManager.Instance.Get_GameManager().ResetCardDisplay();\r\n        GamePlayReferenceManager.Instance.Get_GameManager().RaiseEventTurnComplete();\r\n\r\n        //for testing\r\n        // this.Counter++;\r\n        // this.GenerateRandomBigBusinessCard(this.Counter);\r\n    },\r\n\r\n    TwoButtonsFunctionality()\r\n    {\r\n        this.CardFuntionalityButton(null,1);\r\n    },\r\n\r\n    CardFuntionalityButton(event=null,_type=0) {\r\n        if (this.SpacesType == EnumSpaceType.BigBusiness) {\r\n            if (BigBusinessData == null)\r\n                this.BigBusinessCardFunctionality(this.CardSelected,true,_type);\r\n            else\r\n                this.BigBusinessCardFunctionality(this.CardSelected,false,_type);\r\n        } else if (this.SpacesType == EnumSpaceType.Losses) {\r\n            if(LossesData==null)\r\n                this.LossesCardFunctionality(this.CardSelected, true, _type);\r\n            else\r\n                this.LossesCardFunctionality(this.CardSelected,false,_type);     \r\n        } \r\n        else if (this.SpacesType == EnumSpaceType.Marketing) {\r\n            if(MarketingData==null)\r\n                this.MarketingCardFunctionality(this.CardSelected, true, _type);\r\n            else\r\n                this.MarketingCardFunctionality(this.CardSelected, false, _type); \r\n        }\r\n        else if (this.SpacesType == EnumSpaceType.WildCard) {\r\n            if(WildCardData==null)\r\n                this.WildCardFunctionality(this.CardSelected, true, _type);\r\n            else\r\n                this.WildCardFunctionality(this.CardSelected, false, _type);\r\n        }\r\n        else if (this.SpacesType == EnumSpaceType.Sell) {\r\n            this.SellFunctionality();\r\n        }\r\n        else if (this.SpacesType == EnumSpaceType.Invest) {\r\n            this.InvestFunctionality();\r\n        }\r\n        else if (this.SpacesType == EnumSpaceType.BuyOrSell) {\r\n            this.BuyOrSellFunctionality();\r\n        }\r\n        else if (this.SpacesType == EnumSpaceType.OneQuestion) {\r\n            this.OneQuestionFunctionality();\r\n        }\r\n        else if (this.SpacesType == EnumSpaceType.GoBackSpaces) {\r\n            this.GoBackFunctionality();\r\n        }\r\n    },\r\n\r\n    CheckLoan() {\r\n        var _loanTaken = false;\r\n        var _businessIndex = 0;\r\n\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        \r\n        for (let index = 0; index < _manager.PlayerGameInfo[_playerIndex].NoOfBusiness.length; index++) {\r\n\r\n            if (_manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].LoanTaken) {\r\n                _loanTaken = true;\r\n                _businessIndex = index;\r\n                break;\r\n            }\r\n        }\r\n\r\n        var val = -1;\r\n        val = _loanTaken == true ? 1 : 0;\r\n        var Result = cc.v2(val, _businessIndex)\r\n        return Result;\r\n    },\r\n\r\n    CompleteTurnWithToast(_msg, _time) {\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n\r\n        if (this.IsBotTurn) {\r\n            console.log(_msg);\r\n            var _delay = this.getRandom(2500, 3500);\r\n            setTimeout(() => {\r\n                this.ShowCardInfo(\"\", false);\r\n                _manager.ResetCardDisplay();\r\n                _manager.RaiseEventTurnComplete();\r\n            }, (_delay));\r\n        }\r\n        else {\r\n            GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(_msg, _time);\r\n            this.ShowCardInfo(\"\", false);\r\n\r\n            setTimeout(() => {\r\n                this.ShowCardInfo(\"\", false);\r\n                _manager.ResetCardDisplay();\r\n                _manager.RaiseEventTurnComplete();\r\n            }, (_time + 1000));\r\n        }\r\n    },\r\n\r\n    BigBusinessCardFunctionality(_id, _hasTwoScreens = false,_type=0) {\r\n        var Index = parseInt(_id);\r\n        Index = Index - 1;\r\n\r\n        switch (_id) {\r\n            case \"1\"://receive 20000$ gift to payoff loan\r\n                console.log(this.BigBusiness[Index].Description);\r\n                BigBusinessData = null;\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var _result = this.CheckLoan();\r\n                var IsLoanTaken = _result.x;\r\n                var _businessIndex = _result.y;\r\n\r\n                if (IsLoanTaken == 1) //means user has taken loan\r\n                {\r\n                    _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanAmount = _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanAmount - 20000;\r\n                    if (_manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanAmount <= 0) {\r\n                        _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanAmount = 0;\r\n                        _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanTaken = false;\r\n                    }\r\n\r\n                    this.CompleteTurnWithToast(\"Loan amount of $20000 has been payed off.\", 1800);\r\n                }\r\n                else {\r\n                    this.CompleteTurnWithToast(\"You have not taken any loan, turn will skip now.\", 1800);\r\n                }\r\n\r\n                break;\r\n            case \"2\"://hire lawyer\r\n                console.log(this.BigBusiness[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                BigBusinessData = null;\r\n\r\n                if (_manager.PlayerGameInfo[_playerIndex].LawyerStatus) {\r\n                    this.CompleteTurnWithToast(\"You have already hired laywer, turn will skip now.\", 1800);\r\n                }\r\n                else {\r\n                    _manager.PlayerGameInfo[_playerIndex].LawyerStatus = true;\r\n                    this.CompleteTurnWithToast(\"You have successfully hired a lawyer.\", 1800);\r\n                }\r\n\r\n                break;\r\n            case \"3\"://You do a Trade Show for one of your businesses and get some new clients. Choose one of your businesses and roll a PayDay roll right now.\r\n                console.log(this.BigBusiness[Index].Description);\r\n                BigBusinessData = null;\r\n                if (!this.IsBotTurn) {\r\n                    this.ShowCardInfo(\"\", false);\r\n                    GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableManipilationScreen__BusinessManipulationUISetup(true);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        this.ShowCardInfo(\"\", false);\r\n                    }, 2400);\r\n\r\n                    GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableManipilationScreen__BusinessManipulationUISetup(true,true);\r\n                }\r\n                break;\r\n            case \"4\"://A friend gives you a suggestion on a stock to buy. Place your investment amount on the table and roll. The result, multiplied by $1,000, is the amount of each share of stock. You can buy this stock now if you would like.\r\n                console.log(this.BigBusiness[Index].Description);\r\n                BigBusinessData = null;\r\n                if (!this.IsBotTurn) {\r\n                    this.ShowCardInfo(\"\", false);\r\n                    GamePlayReferenceManager.Instance.Get_GameplayUIManager().OnStockDiceClicked_TurnDecision(null,true);\r\n                } else {\r\n                    this.CompleteTurnWithToast(\"\", 1200);\r\n                }\r\n                break;\r\n            case \"5\"://You reserve a private Yacht for a week long vacation. Roll both die, multiply the result by $3,000. Pay the Bank your vacation cost and lose your next turn basking in your private sun.\r\n                console.log(this.BigBusiness[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var _diceResult;\r\n                var _multiplier = 3000;\r\n                var _result;\r\n\r\n                if (_hasTwoScreens)\r\n                {\r\n                    _diceResult = _manager.RollTwoDices();\r\n                    _result = _multiplier * _diceResult;\r\n                    BigBusinessData = { Data: { result: _result, Dice: _diceResult } };\r\n\r\n                   if (!this.IsBotTurn) {\r\n                       this.ShowCardInfo(\"\\n\" + \"Dice Roll Result : \" + _diceResult + \"\\n\" + \"\\n\" +\r\n                           \"Total Cost Calculated : \" + _diceResult + \" * \" + _multiplier + \" = $\" + _result, true);\r\n\r\n                       this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                       this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                   } else\r\n                   {\r\n                       this.CardFuntionalityButton();\r\n                   }\r\n                }\r\n                else\r\n                {\r\n                    _diceResult = BigBusinessData.Data.Dice;\r\n                    _result = BigBusinessData.Data.result;\r\n\r\n                    if (_manager.PlayerGameInfo[_playerIndex].Cash >= _result)\r\n                    {\r\n                        _manager.PlayerGameInfo[_playerIndex].Cash -= _result;\r\n                        _manager.ToggleSkipNextTurn(true);\r\n                        this.CompleteTurnWithToast(\"Cost $\"+_result+\" has been successfully paid, you will also lose your next turn, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                        BigBusinessData = null;\r\n                    }else {\r\n                        console.log(\"not enough cash\");\r\n                        if (!this.IsBotTurn) {\r\n                            GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                        } else\r\n                        {\r\n                            console.log(\"its bot and has no cash,skipping\");\r\n                            BigBusinessData = null;\r\n                            this.CompleteTurnWithToast(\"\", 1200);\r\n                        }\r\n                    }\r\n\r\n                }\r\n                break;\r\n            case \"6\"://Your parents give you $20,000 towards starting a new business or investing in your current business. Choose which and play according to the game rules.\r\n                console.log(this.BigBusiness[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var CashGiven = 20000;\r\n                BigBusinessData = null;\r\n\r\n                if (!this.IsBotTurn) {\r\n                    if (_type == 0)//start new business\r\n                    {\r\n                        this.ShowCardInfo(\"\", false);\r\n                        GamePlayReferenceManager.Instance.Get_GameplayUIManager().StartNewBusiness_BusinessSetup(false, true, 0, false, 0, true, CashGiven, false);\r\n                    } else if (_type == 1)//invest in existing business\r\n                    {\r\n                        this.ShowCardInfo(\"\", false);\r\n                        GamePlayReferenceManager.Instance.Get_GameplayUIManager().OnExpandButtonClicked_TurnDecision(null, true,CashGiven,false); \r\n                    }\r\n                } else\r\n                {\r\n                    console.log(\"is bot, so skipping turn\");\r\n                    this.CompleteTurnWithToast(\"\", 1200);\r\n                }\r\n                break;\r\n            case \"7\"://You inherit a business from your Father. Decide the type of business it is, what the name of the business is, whether it is a home-based or brick & mortar business and include it into your game play. Pay a $20,000 transfer fee. If you do not have $20,000 in cash, you cannot have the business.\r\n                console.log(this.BigBusiness[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var CashCost = 20000;\r\n                BigBusinessData = null;\r\n\r\n                if (!this.IsBotTurn) {\r\n                    if (_type == 0)//pay amount\r\n                    {\r\n                        if (_manager.PlayerGameInfo[_playerIndex].Cash >= CashCost) {\r\n                            _manager.PlayerGameInfo[_playerIndex].Cash -= CashCost;\r\n                            this.ShowCardInfo(\"\", false);\r\n                            GamePlayReferenceManager.Instance.Get_GameplayUIManager().StartNewBusiness_BusinessSetup(false, true, 0, false, 0, true, 0, true);\r\n                        }\r\n                        else\r\n                        {\r\n                            GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"Not enough cash.\");\r\n                        }\r\n                    } else if (_type == 1)//skip\r\n                    {\r\n                        this.CompleteTurnWithToast(\"Skipping...\", 1400);\r\n                    }\r\n                } else\r\n                {\r\n                    console.log(\"is bot, so skipping turn\");\r\n                    this.CompleteTurnWithToast(\"\", 1200);\r\n                }\r\n                break;\r\n            case \"8\"://double pay day on next pay day\r\n                BigBusinessData = null;\r\n                console.log(this.BigBusiness[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n\r\n                _manager.ToggleDoublePayNextTurn(true);\r\n                this.CompleteTurnWithToast(\"You will receive double profits on next payday.\", 1800);\r\n\r\n                break;\r\n            case \"9\"://You buy a television station and convince every player in the game to market on your station one time. You receive 50% of all the marketing dollars currently on the board. Round to the nearest $1,000 if needed.\r\n                console.log(this.BigBusiness[Index].Description);\r\n                BigBusinessData = null;\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var _amount = 0;\r\n                var mode = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode();\r\n\r\n                for (let index = 0; index < _manager.PlayerGameInfo.length; index++) {\r\n                        _amount = _amount + _manager.PlayerGameInfo[index].MarketingAmount;\r\n                }\r\n\r\n                _amount = _amount / 2;\r\n                console.log(\"value: \" + _amount);\r\n                _amount = Math.round(_amount / 1000) * 1000;\r\n\r\n                console.log(\"Rounded value: \" + _amount);\r\n\r\n                _manager.PlayerGameInfo[_playerIndex].Cash += _amount;\r\n\r\n                if (mode==2) {\r\n                    var _actorsArray = GamePlayReferenceManager.Instance.Get_MultiplayerController().getPhotonRef().myRoomActorsArray();\r\n                    var _data = null;\r\n                    for (let index = 0; index < _actorsArray.length; index++) {\r\n                        _data = _actorsArray[index].customProperties.PlayerSessionData;\r\n                        _data.MarketingAmount = Math.round(_data.MarketingAmount/ 2);\r\n                        _actorsArray[index].setCustomProperty(\"PlayerSessionData\", _data);\r\n                    }\r\n\r\n                    console.log(_actorsArray);\r\n                } else\r\n                {\r\n                    for (let index = 0; index < _manager.PlayerGameInfo.length; index++) {\r\n                        _manager.PlayerGameInfo[index].MarketingAmount =Math.round(_manager.PlayerGameInfo[index].MarketingAmount/ 2);\r\n                    }\r\n                }\r\n\r\n                this.CompleteTurnWithToast(\"Cash amount $\"+_amount+\" has successfully added, cash balance becomes $\"+_manager.PlayerGameInfo[_playerIndex].Cash,4000);\r\n\r\n                break;\r\n            case \"10\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            case \"11\"://roll dice twice, if result is >19 then take all money inside marketing.\r\n                console.log(this.BigBusiness[Index].Description);\r\n                BigBusinessData = null;\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var mode = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode();\r\n                \r\n                var Dice1Result = _manager.RollTwoDices();\r\n                var Dice2Result = _manager.RollTwoDices();\r\n\r\n                var TotalResult = Dice1Result + Dice2Result;\r\n\r\n                if (TotalResult >= 19) {\r\n                    var _amount = 0;\r\n                    for (let index = 0; index < _manager.PlayerGameInfo.length; index++) {\r\n                        _amount = _amount + _manager.PlayerGameInfo[index].MarketingAmount;\r\n                    }\r\n\r\n                    _manager.PlayerGameInfo[_playerIndex].Cash += _amount;\r\n                    this.CompleteTurnWithToast(\"Dice 1 Result: \" + Dice1Result + \"\\n\" + \"\\n\" +\r\n                        \"Dice 2 Result: \" + Dice2Result + \"\\n\" + \"\\n\" +\r\n                        \"Total: \" + TotalResult + \"\\n\" + \"\\n\" +\r\n                        \"Amount $\" + _amount + \" has successfully added in your cash from marketing amount on table.\"\r\n                        , 4000);\r\n\r\n\r\n                    if (mode==2) {\r\n                        var _actorsArray = GamePlayReferenceManager.Instance.Get_MultiplayerController().getPhotonRef().myRoomActorsArray();\r\n                        var _data = null;\r\n                        for (let index = 0; index < _actorsArray.length; index++) {    \r\n                            _data = _actorsArray[index].customProperties.PlayerSessionData;\r\n                            _data.MarketingAmount = 0;\r\n                            _actorsArray[index].setCustomProperty(\"PlayerSessionData\", _data);\r\n                        }\r\n                    } else\r\n                    {\r\n                        for (let index = 0; index < _manager.PlayerGameInfo.length; index++) {    \r\n                            _manager.PlayerGameInfo[index].MarketingAmount = 0;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.CompleteTurnWithToast(\"Dice 1 Result: \" + Dice1Result + \"\\n\" + \"\\n\" +\r\n                        \"Dice 2 Result: \" + Dice2Result + \"\\n\" + \"\\n\" +\r\n                        \"Total: \" + TotalResult + \"\\n\" + \"\\n\" +\r\n                        \"You ran out of luck, turn will skip now\"\r\n                        , 4000);\r\n                }\r\n\r\n                break;\r\n            case \"12\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            case \"13\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            case \"14\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            case \"15\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n\r\n    MarketingCardFunctionality(_id, _hasTwoScreens = false,_type=0) {\r\n        var Index = parseInt(_id);\r\n        Index = Index - 1;\r\n\r\n        switch (_id) {\r\n            case \"1\"://lose all your money in marketing account\r\n                console.log(this.Marketing[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _loseAmount = _manager.LoseAllMarketingMoney();\r\n                MarketingData = null;\r\n                if (_loseAmount > 0)\r\n                    this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2400);\r\n                else\r\n                    this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n                break;\r\n            case \"2\"://You put an ad on Facebook for your business. Roll the dice: 1 - If you roll a 6 or lower, you lose all of the money in your marketing account 2 - If you roll a 7 or higher, your ad nets you 800% of the total money currently in your marketing account\r\n                console.log(this.Marketing[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var _marketingAmount =_manager.PlayerGameInfo[_playerIndex].MarketingAmount;\r\n                var _diceResult;\r\n                var _multiplier = 800;\r\n                if (_marketingAmount <= 0) {\r\n                    this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n                    return;\r\n                }\r\n                    \r\n                if (_hasTwoScreens) {\r\n                    _diceResult = _manager.RollTwoDices();\r\n\r\n                    MarketingData = { Data: { result: _diceResult } };\r\n\r\n                    if (!this.IsBotTurn) {\r\n\r\n                        if (_diceResult <= 6)\r\n                        {\r\n                            this.ShowCardInfo(\"\\n\" + \"\\n\" + \"Dice Roll Result : \" + _diceResult + \"\\n\" + \"\\n\" +\r\n                            \"Total dice result is less than or equal to six, so you will lose all your current marketing amount.\", true);\r\n                        \r\n                            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Done\";\r\n\r\n                        }\r\n                        else if (_diceResult >= 7)\r\n                        {\r\n                            this.ShowCardInfo(\"\\n\" + \"\\n\" + \"Dice Roll Result : \" + _diceResult + \"\\n\" + \"\\n\" +\r\n                            \"Total dice result is greater than or equal to seven, so you will get 800% profit on current marketing amount.\", true);\r\n                        \r\n                            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Receive Amount\"; \r\n                        }\r\n\r\n                        this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                    } else\r\n                    {\r\n                        this.CardFuntionalityButton();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    _diceResult = MarketingData.Data.result;\r\n\r\n                    if (_diceResult <= 6) {\r\n                        var _loseAmount = _manager.LoseAllMarketingMoney();\r\n\r\n                        if (_loseAmount > 0)\r\n                            this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2400);\r\n                        else\r\n                            this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n                        \r\n                        MarketingData = null;\r\n                    }else if (_diceResult >= 7) {\r\n                        \r\n                        var _result = (_marketingAmount * _multiplier / 100) + _marketingAmount;\r\n                        _manager.PlayerGameInfo[_playerIndex].MarketingAmount = 0;\r\n                        _manager.PlayerGameInfo[_playerIndex].Cash += _result;\r\n\r\n                        this.CompleteTurnWithToast(\"Total profit of $\" + _result+\" has been added to your cash amount.\", 2400);\r\n                        MarketingData = null;\r\n                    }\r\n                   \r\n                }\r\n                break;\r\n            case \"3\"://Your ad contains false claims and result in a government investigation. You lose your entire Marketing Account, plus pay lawyer fees of $3,000 per business to the bank. If you have a lawyer, you do not have to pay the extra $3,000 in fees, per business.\r\n                console.log(this.Marketing[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var _marketingAmount = _manager.PlayerGameInfo[_playerIndex].MarketingAmount;\r\n                var _lawyerStatus = _manager.PlayerGameInfo[_playerIndex].LawyerStatus;\r\n                var _businessAmount = _manager.PlayerGameInfo[_playerIndex].HomeBasedAmount + _manager.PlayerGameInfo[_playerIndex].BrickAndMortarAmount;\r\n                var _hasMarketingAmount = false;\r\n                var _multiplier = 3000;\r\n                var _totalAmount = _multiplier * _businessAmount;\r\n                if (_hasTwoScreens)\r\n                {\r\n                    if (_marketingAmount > 0)\r\n                        _hasMarketingAmount = true;\r\n\r\n                    if (_lawyerStatus)\r\n                         _totalAmount = 0;\r\n\r\n                    MarketingData = { Data: { result: _totalAmount } };\r\n\r\n                    if (!this.IsBotTurn) {\r\n                        this.ShowCardInfo(\"Marketing Amount : $\" + _marketingAmount + \"\\n\" + \"\\n\" +\r\n                        \"Lawyer Hired : \" + _lawyerStatus + \"\\n\" + \"\\n\" +\r\n                        \"Total Number of business : \" + _businessAmount + \"\\n\" + \"\\n\" +\r\n                        \"Fees : \"+_businessAmount+\" * \"+_multiplier+\" = $\"+_totalAmount, true);\r\n                \r\n                        this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Done\";\r\n\r\n                        this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                    } else\r\n                    {\r\n                        this.CardFuntionalityButton();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    _totalAmount = MarketingData.Data.result;\r\n                    _manager.PlayerGameInfo[_playerIndex].MarketingAmount = 0;\r\n                    \r\n                    if (_manager.PlayerGameInfo[_playerIndex].Cash >= _totalAmount) {\r\n                        if (_lawyerStatus) {\r\n                            _manager.PlayerGameInfo[_playerIndex].LawyerStatus = false;\r\n                            this.CompleteTurnWithToast(\"you had hired lawyer, you only lost your marketing amount of $\"+_marketingAmount, 4200);\r\n                            MarketingData = null;\r\n                        } else {\r\n                             _manager.PlayerGameInfo[_playerIndex].Cash -= _totalAmount;\r\n                            this.CompleteTurnWithToast(\"you have not hired any lawyer, bill $\" + _totalAmount + \" was successfully paid along with marketing amount, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                             MarketingData = null;\r\n                        }\r\n                        } else {\r\n                            console.log(\"not enough cash\");\r\n                            if (!this.IsBotTurn) {\r\n                                GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                            } else\r\n                            {\r\n                                console.log(\"its bot and has no cash,skipping\");\r\n                                MarketingData = null;\r\n                                this.CompleteTurnWithToast(\"\", 1200);\r\n                            }\r\n                    }\r\n                }\r\n                break;\r\n            case \"4\"://Your Marketing Account triples, but you must leave it in the account.\r\n                console.log(this.Marketing[Index].Description);\r\n                MarketingData = null;\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var _marketAmount = _manager.PlayerGameInfo[_playerIndex].MarketingAmount;\r\n                var _multiplier = 3;\r\n                var _increaseAmount = _manager.MultiplyMarketingMoney(_multiplier);\r\n\r\n                if (_increaseAmount > 0) {\r\n                    this.CompleteTurnWithToast(\"Marketing Amount: $\" + _marketAmount + \"\\n\" + \"\\n\" +\r\n                        \"Total: \" + _marketAmount + \" * \" + _multiplier + \" = \" + _increaseAmount + \"\\n\" + \"\\n\" + \"\\n\" +\r\n                        \"your marketing amount has been sucessfully increase to $\" + _increaseAmount\r\n                        , 3600);\r\n                }\r\n                else {\r\n                    this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n                }\r\n                break;\r\n            case \"5\"://You hire a Marketing Firm to market your business but it yields no results. You lose your entire marketing account to the Bank. Plus pay $5,000 for their services.\r\n                console.log(this.Marketing[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var bill = 5000;\r\n                MarketingData = null;\r\n\r\n                if (_manager.PlayerGameInfo[_playerIndex].Cash >= bill) {\r\n                        var _loseAmount = _manager.LoseAllMarketingMoney();\r\n                        _manager.PlayerGameInfo[_playerIndex].Cash -= bill;\r\n                        this.CompleteTurnWithToast(\"Fees $\" + bill + \" was successfully paid along with marketing amount, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                        MarketingData = null;\r\n                    } else {\r\n                        console.log(\"not enough cash\");\r\n                        if (!this.IsBotTurn) {\r\n                            GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                        } else\r\n                        {\r\n                            console.log(\"its bot and has no cash,skipping\");\r\n                            MarketingData = null;\r\n                            this.CompleteTurnWithToast(\"\", 1200);\r\n                        }\r\n                }\r\n                break;\r\n            case \"6\"://You begin a new marketing campaign. Roll 1 die. If it is an even number, your campaign is successful and you receive all of the money in your marketing account back plus 500%. If it is an odd number you lose all of the money in your marketing account.\r\n                console.log(this.Marketing[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var _marketingAmount =_manager.PlayerGameInfo[_playerIndex].MarketingAmount;\r\n                var _diceResult;\r\n                var _multiplier = 500;\r\n                var isEven = false;\r\n\r\n                if (_marketingAmount <= 0) {\r\n                    this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n                    return;\r\n                }\r\n                    \r\n                if (_hasTwoScreens) {\r\n                    _diceResult = _manager.RollOneDice();\r\n\r\n                    if (_diceResult % 2 == 0)\r\n                        isEven = true;\r\n                    \r\n                    MarketingData = { Data: { result: _diceResult,IsEven:isEven } };\r\n\r\n                    if (!this.IsBotTurn) {\r\n\r\n                        if (_diceResult %2==1)\r\n                        {\r\n                            isEven = false;\r\n                            this.ShowCardInfo(\"\\n\" + \"Dice Roll Result : \" + _diceResult + \"\\n\" + \"\\n\" +\r\n                            \"Total dice result is odd, so you will lose all your current marketing amount.\", true);\r\n                        \r\n                            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Done\";\r\n\r\n                        }\r\n                        else if (_diceResult %2==0)\r\n                        {\r\n                            isEven = true;\r\n                            this.ShowCardInfo(\"\\n\" + \"\\n\" + \"Dice Roll Result : \" + _diceResult + \"\\n\" + \"\\n\" +\r\n                            \"Total dice result is even, so you will get 500% profit on current marketing amount.\", true);\r\n                        \r\n                            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Receive Amount\"; \r\n                        }\r\n\r\n                        this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                    } else\r\n                    {\r\n                        this.CardFuntionalityButton();\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    _diceResult = MarketingData.Data.result;\r\n                    isEven = MarketingData.Data.IsEven;\r\n\r\n                    if (!isEven) {\r\n                        var _loseAmount = _manager.LoseAllMarketingMoney();\r\n\r\n                        if (_loseAmount > 0)\r\n                            this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2400);\r\n                        else\r\n                            this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n                        \r\n                        MarketingData = null;\r\n                    }else if (isEven) {\r\n                        \r\n                        var _result = (_marketingAmount * _multiplier / 100) + _marketingAmount;\r\n                        \r\n                        _manager.PlayerGameInfo[_playerIndex].MarketingAmount = 0;\r\n                        _manager.PlayerGameInfo[_playerIndex].Cash += _result;\r\n\r\n                        this.CompleteTurnWithToast(\"Total profit of $\" + _result+\" has been added to your cash amount.\", 2400);\r\n                        MarketingData = null;\r\n                    }\r\n                }\r\n                break;\r\n            case \"7\":\r\n                console.log(this.Marketing[Index].Description);\r\n                break;\r\n            case \"8\"://lose all your money in marketing account\r\n                console.log(this.Marketing[Index].Description);\r\n                MarketingData = null;\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _loseAmount = _manager.LoseAllMarketingMoney();\r\n\r\n                if (_loseAmount > 0)\r\n                    this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2400);\r\n                else\r\n                    this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n                break;\r\n            case \"9\"://lose all your money in marketing account\r\n                console.log(this.Marketing[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _loseAmount = _manager.LoseAllMarketingMoney();\r\n                MarketingData = null;\r\n                if (_loseAmount > 0)\r\n                    this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2400);\r\n                else\r\n                    this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n                break;\r\n            case \"10\"://Receive all of your Marketing Budget back, plus 700% profit.\r\n                console.log(this.Marketing[Index].Description);\r\n                MarketingData = null;\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var _marketAmount = _manager.PlayerGameInfo[_playerIndex].MarketingAmount;\r\n                var _profit = 700;\r\n                var _amount = _manager.GetMarketingMoney(_profit);\r\n\r\n                if (_amount > 0) {\r\n                    this.CompleteTurnWithToast(\"Marketing Amount: $\" + _marketAmount + \"\\n\" + \"\\n\" +\r\n                        \"Total: \" + _marketAmount + \" + (\" + _marketAmount + \"*\" + _profit + \" )/100\" + \" = \" + _amount + \"\\n\" + \"\\n\" + \"\\n\" +\r\n                        \"your cash amount has been sucessfully increase by $\" + _amount + \", total cash becomes $\" + _manager.PlayerGameInfo[_playerIndex].Cash\r\n                        , 4000);\r\n                }\r\n                else {\r\n                    this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n                }\r\n                break;\r\n            case \"11\":\r\n                console.log(this.Marketing[Index].Description);\r\n                break;\r\n            case \"12\":\r\n                console.log(this.Marketing[Index].Description);\r\n                break;\r\n            case \"13\":\r\n                console.log(this.Marketing[Index].Description);\r\n                break;\r\n            case \"14\"://lose all your money in marketing account\r\n                console.log(this.Marketing[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _loseAmount = _manager.LoseAllMarketingMoney();\r\n                MarketingData = null;\r\n                if (_loseAmount > 0)\r\n                    this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2100);\r\n                else\r\n                    this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2100);\r\n                break;\r\n            case \"15\":\r\n                console.log(this.Marketing[Index].Description);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n\r\n    LossesCardFunctionality(_id, _hasTwoScreens = false,_type=0)\r\n    {\r\n      var Index=parseInt(_id);\r\n      Index=Index-1;\r\n\r\n       switch (_id) {\r\n         case \"1\"://lose next turn\r\n             console.log(this.Losses[Index].Description);\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n             var _playerIndex=GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               _manager.ToggleSkipNextTurn(true);\r\n               LossesData = null;\r\n             this.CompleteTurnWithToast(\"You will lose your next turn.\",2400);\r\n             break;\r\n         case \"2\": //Roll 2 dice, multiply by $5,000 and pay it to the Bank. If you have a lawyer you lose 50% of the total bill currently owed.\r\n               console.log(this.Losses[Index].Description);\r\n               var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               var DiceResult;\r\n               var CashMulitplier;\r\n               var TotalResult;\r\n               var _hiredLawyer;\r\n\r\n               if (_hasTwoScreens) {\r\n                   DiceResult = _manager.RollTwoDices();\r\n                   CashMulitplier = 5000;\r\n                   TotalResult = DiceResult * CashMulitplier;\r\n                   _hiredLawyer = _manager.PlayerGameInfo[_playerIndex].LawyerStatus;\r\n\r\n                   LossesData = { Data: { result: TotalResult, lawyer: _hiredLawyer } };\r\n\r\n                   if (!this.IsBotTurn) {\r\n                       this.ShowCardInfo(\"\\n\" + \"\\n\" + \"Dice Roll Result : \" + DiceResult + \"\\n\" + \"\\n\" +\r\n                           \"Total Bill Calculated : \" + DiceResult + \" * \" + CashMulitplier + \" = $\" + TotalResult, true);\r\n\r\n                       this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                       this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                   } else\r\n                   {\r\n                       this.CardFuntionalityButton();\r\n                   }\r\n               }\r\n               else {\r\n                   console.log(LossesData);\r\n                   TotalResult = LossesData.Data.result;\r\n                   _hiredLawyer = LossesData.Data.lawyer;\r\n\r\n                   if (_hiredLawyer)\r\n                        TotalResult = TotalResult / 2;\r\n\r\n                   if (_manager.PlayerGameInfo[_playerIndex].Cash >= TotalResult) {\r\n                       if (_hiredLawyer) {\r\n                           _manager.PlayerGameInfo[_playerIndex].Cash -= TotalResult;\r\n                           _manager.PlayerGameInfo[_playerIndex].LawyerStatus = false;\r\n                           this.CompleteTurnWithToast(\"you had hired lawyer, half bill $\" + TotalResult + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                           LossesData = null;\r\n                       } else {\r\n                            _manager.PlayerGameInfo[_playerIndex].Cash -= TotalResult;\r\n                           this.CompleteTurnWithToast(\"you have not hired any lawyer, bill $\" + TotalResult + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                           LossesData = null;\r\n                       }\r\n                   } else {\r\n                       console.log(\"not enough cash\");\r\n                       if (!this.IsBotTurn) {\r\n                           GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                       } else\r\n                       {\r\n                           console.log(\"its bot and has no cash,skipping\");\r\n                           LossesData = null;\r\n                           this.CompleteTurnWithToast(\"\", 1200);\r\n                       }\r\n                   }\r\n               }\r\n             break;\r\n         case \"3\"://lose all your business profits on next Pay Day.\r\n             console.log(this.Losses[Index].Description);\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n             var _playerIndex=GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n              LossesData = null;\r\n             _manager.ToggleSkipPayDay_Whole(true);\r\n             this.CompleteTurnWithToast(\"you will lose all your business profits on next Pay Day.\",2400);\r\n             break;\r\n         case \"4\"://Yearly business insurance premium is due. Pay $2,000 to the Bank for each Home-Based business, $5,000 for each Brick & Mortar business.\r\n               console.log(this.Losses[Index].Description);\r\n               var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               var homeBasedBusiness = _manager.PlayerGameInfo[_playerIndex].HomeBasedAmount;\r\n               var brickAndMortarBusiness = _manager.PlayerGameInfo[_playerIndex].BrickAndMortarAmount;\r\n               var homeMultiplier = 2000;\r\n               var brickMuliplier = 5000;\r\n               var totalAmount = (homeBasedBusiness * homeMultiplier) + (brickAndMortarBusiness * brickMuliplier);\r\n               if (_hasTwoScreens) {\r\n                LossesData = { Data: { result: totalAmount } };\r\n                if (!this.IsBotTurn) {\r\n                    this.ShowCardInfo(\"\\n\" + \"Home Based Amount : \" + homeBasedBusiness+\" * $\"+homeMultiplier+\" = $\"+ (homeBasedBusiness*homeMultiplier)+ \"\\n\" + \"\\n\" +\r\n                        \"Brick & Mortar Amount : \" + brickAndMortarBusiness + \" * $\" + brickMuliplier + \" = $\" + (brickAndMortarBusiness * brickMuliplier) + \"\\n\" + \"\\n\" +\r\n                        \"Total Amount : \"+(homeBasedBusiness*homeMultiplier)+\" + \"+(brickAndMortarBusiness * brickMuliplier)+\" = $\"+totalAmount, true);\r\n\r\n                    this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                    this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                } else\r\n                {\r\n                    this.CardFuntionalityButton();\r\n                }\r\n               }\r\n               else\r\n               {\r\n                   totalAmount = LossesData.Data.result;\r\n                   if (_manager.PlayerGameInfo[_playerIndex].Cash >= totalAmount) {\r\n                    _manager.PlayerGameInfo[_playerIndex].Cash -= totalAmount;\r\n                    this.CompleteTurnWithToast(\"Total amount $\" + totalAmount + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                    LossesData = null;\r\n                } else {\r\n                    console.log(\"not enough cash\");\r\n                    if (!this.IsBotTurn) {\r\n                        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                    } else\r\n                    {\r\n                        LossesData = null;\r\n                        console.log(\"its bot and has no money, skipping\");\r\n                        this.CompleteTurnWithToast(\"\", 1200);\r\n                    }\r\n                }\r\n               }\r\n             break;\r\n         case \"5\"://Your employee claims you sexually harassed them, but you did not. You can either;  1 - Settle out of court and pay them $50,000. 2 - Take your chances in court. Roll 2 dice and pay $10,000 times the number rolled.\r\n               console.log(this.Losses[Index].Description);\r\n               var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               var _courtSettlementFees = 50000;\r\n               var DiceResult;\r\n               var CashMulitplier = 10000;\r\n               var totalAmount;\r\n\r\n               if (_hasTwoScreens) {\r\n                   if (_type == 0) { //first button\r\n                     \r\n                       LossesData = { Data: { result: _courtSettlementFees, Type: _type } };\r\n                       if (!this.IsBotTurn) {\r\n                           this.ShowCardInfo(\"\\n\" + \"Payable amount : $\" + _courtSettlementFees, true);\r\n\r\n                           this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                           this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                       } else {\r\n                           this.CardFuntionalityButton();\r\n                       }\r\n                   } else if (_type == 1) { //2nd button\r\n                     \r\n                       DiceResult = _manager.RollTwoDices();\r\n                       totalAmount = DiceResult * CashMulitplier;\r\n                       LossesData = { Data: { result: DiceResult, TotalAmount: totalAmount, Type: _type } };\r\n                       if (!this.IsBotTurn) {\r\n                           this.ShowCardInfo(\"\\n\" + \"Dice Result : \" + DiceResult + \"\\n\" + \"\\n\" +\r\n                               \"Total Amount : \" + DiceResult + \" * \" + CashMulitplier + \" = $\" + totalAmount, true);\r\n\r\n                           this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                           this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                       } else {\r\n                           this.CardFuntionalityButton();\r\n                       }\r\n                   }\r\n               } else { \r\n                   var tempType = LossesData.Data.Type;\r\n                   if (tempType == 0)\r\n                   {\r\n                       _courtSettlementFees = LossesData.Data.result;\r\n                            if (_manager.PlayerGameInfo[_playerIndex].Cash >= _courtSettlementFees) {\r\n                                _manager.PlayerGameInfo[_playerIndex].Cash -= _courtSettlementFees;\r\n                                this.CompleteTurnWithToast(\"Total amount $\" + _courtSettlementFees + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                                LossesData = null;\r\n                            } else {\r\n                                console.log(\"not enough cash\");\r\n                                if (!this.IsBotTurn) {\r\n                                    GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                                } else\r\n                                {\r\n                                    LossesData = null;\r\n                                    console.log(\"it was bot and had not enough money\");\r\n                                    this.CompleteTurnWithToast(\"\", 1200);\r\n                                }\r\n                            }\r\n                   } else if (tempType == 1)\r\n                   {\r\n                       DiceResult = LossesData.Data.result;\r\n                       totalAmount = LossesData.Data.TotalAmount;\r\n                       if (_manager.PlayerGameInfo[_playerIndex].Cash >= totalAmount) {\r\n                        _manager.PlayerGameInfo[_playerIndex].Cash -= totalAmount;\r\n                        this.CompleteTurnWithToast(\"Total amount $\" + totalAmount + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                        LossesData = null;\r\n                    } else {\r\n                        console.log(\"not enough cash\");\r\n                        if (!this.IsBotTurn) {\r\n                            GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                        } else\r\n                        {\r\n                            console.log(\"it was bot and had not enough money\");\r\n                            LossesData = null;\r\n                            this.CompleteTurnWithToast(\"\", 1200);\r\n                        }\r\n                    }\r\n                   }\r\n               }\r\n             break;\r\n         case \"6\":// If Business #1 is Home Based, pay a $5,000 Insurance Deductible; if Brick & Mortar $10,000 deductible.\r\n             console.log(this.Losses[Index].Description);\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n             var _playerIndex=GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n\r\n             var _businessType=parseInt(_manager.PlayerGameInfo[_playerIndex].NoOfBusiness[0].BusinessType);\r\n             if(_businessType==1) // first business was home based\r\n             {\r\n                 if (_manager.PlayerGameInfo[_playerIndex].Cash >= 5000) {\r\n                     _manager.PlayerGameInfo[_playerIndex].Cash -= 5000;\r\n                     this.CompleteTurnWithToast(\"You payed $5000 insurance on your first home based business, remaining cash is $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                 }\r\n                 else {\r\n                     if (!this.IsBotTurn) {\r\n                         GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                     } else {\r\n                         LossesData = null;\r\n                         console.log(\"it was bot and had not enough money\");\r\n                         this.CompleteTurnWithToast(\"\", 1200);\r\n                     }\r\n                 }\r\n             }\r\n             else if (_businessType==2) //first busioness was brick & mortar\r\n             {\r\n                if(_manager.PlayerGameInfo[_playerIndex].Cash>=10000)\r\n                {\r\n                   _manager.PlayerGameInfo[_playerIndex].Cash-=10000;\r\n                   this.CompleteTurnWithToast(\"You payed $10000 insurance on your first brick & mortar business, remaining cash is $\"+_manager.PlayerGameInfo[_playerIndex].Cash,4200);\r\n                }\r\n                else\r\n                {\r\n                    if (!this.IsBotTurn) {\r\n                        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                    } else\r\n                    {\r\n                        LossesData = null;\r\n                        console.log(\"it was bot and had not enough money\");\r\n                        this.CompleteTurnWithToast(\"\", 1200);\r\n                    }\r\n                }\r\n             }\r\n             break;\r\n         case \"7\"://lose your next Pay Day for all of your home-based businesses.\r\n             console.log(this.Losses[Index].Description);\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n             var _playerIndex=GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               LossesData = null;\r\n             _manager.ToggleSkipPayDay_HomeBased(true);\r\n             this.CompleteTurnWithToast(\"you will lose your next Pay Day for all of your home-based businesses.\",2400);\r\n             \r\n             break;\r\n         case \"8\"://You are fined 50% of your current liquid cash. If you have a lawyer, your fine is reduced to 20% of your current liquid cash.\r\n               console.log(this.Losses[Index].Description);\r\n               var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               var TotalResult;\r\n               var _hiredLawyer;\r\n\r\n               if (_hasTwoScreens) {\r\n                    TotalResult = _manager.PlayerGameInfo[_playerIndex].Cash;\r\n                   _hiredLawyer = _manager.PlayerGameInfo[_playerIndex].LawyerStatus;\r\n\r\n                   LossesData = { Data: { result: TotalResult, lawyer: _hiredLawyer } };\r\n\r\n                   if (!this.IsBotTurn) {\r\n                       this.ShowCardInfo(\"\\n\" + \"\\n\" + \"Total Cash : $\" + TotalResult + \"\\n\" + \"\\n\" +\r\n                           \"50% of Total Cash : $\" + (TotalResult / 2), true);\r\n\r\n                       this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                       this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                   } else\r\n                   {\r\n                       this.CardFuntionalityButton();\r\n                   }\r\n               }\r\n\r\n               else {\r\n                   console.log(LossesData);\r\n                   TotalResult = LossesData.Data.result;\r\n                   _hiredLawyer = LossesData.Data.lawyer;\r\n\r\n                   if (_hiredLawyer) \r\n                       TotalResult = (TotalResult * 20) / 100;\r\n                    else\r\n                       TotalResult = (TotalResult * 50) / 100;\r\n                       \r\n                   if (_manager.PlayerGameInfo[_playerIndex].Cash >= TotalResult) {\r\n                       if (_hiredLawyer) {\r\n                           _manager.PlayerGameInfo[_playerIndex].Cash -= TotalResult;\r\n                           _manager.PlayerGameInfo[_playerIndex].LawyerStatus = false;\r\n                           this.CompleteTurnWithToast(\"you had hired lawyer, reduced fine $\" + TotalResult + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                           LossesData = null;\r\n                       } else {\r\n                            _manager.PlayerGameInfo[_playerIndex].Cash -= TotalResult;\r\n                           this.CompleteTurnWithToast(\"you have not hired any lawyer, fine $\" + TotalResult + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                           LossesData = null;\r\n                       }\r\n                   } else {\r\n                       console.log(\"not enough cash\");\r\n                       if (!this.IsBotTurn) {\r\n                           GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                       } else\r\n                       {\r\n                           console.log(\"it was bot and had no money, skipping\");\r\n                            this.CompleteTurnWithToast(\"\", 800);\r\n                            LossesData = null;\r\n                       }\r\n                   }\r\n               }\r\n             break;\r\n         case \"9\"://A customer is injured at one of your business locations. You can either; 1 - Settle out of court and pay them $25,000 , 2 - Take your chances in court. Roll 2 dice and pay $5,000 times the number rolled.\r\n             console.log(this.Losses[Index].Description);\r\n               var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               var _courtSettlementFees = 25000;\r\n               var DiceResult;\r\n               var CashMulitplier = 5000;\r\n               var totalAmount;\r\n\r\n               if (_hasTwoScreens) {\r\n                   if (_type == 0) { //first button\r\n                     \r\n                       LossesData = { Data: { result: _courtSettlementFees, Type: _type } };\r\n                       if (!this.IsBotTurn) {\r\n                           this.ShowCardInfo(\"\\n\" + \"Payable amount : $\" + _courtSettlementFees, true);\r\n\r\n                           this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                           this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                       } else {\r\n                           this.CardFuntionalityButton();\r\n                       }\r\n                   } else if (_type == 1) { //2nd button\r\n                     \r\n                       DiceResult = _manager.RollTwoDices();\r\n                       totalAmount = DiceResult * CashMulitplier;\r\n                       LossesData = { Data: { result: DiceResult, TotalAmount: totalAmount, Type: _type } };\r\n                       if (!this.IsBotTurn) {\r\n                           this.ShowCardInfo(\"\\n\" + \"Dice Result : \" + DiceResult + \"\\n\" + \"\\n\" +\r\n                               \"Total Amount : \" + DiceResult + \" * \" + CashMulitplier + \" = $\" + totalAmount, true);\r\n\r\n                           this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                           this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                       } else {\r\n                           this.CardFuntionalityButton();\r\n                       }\r\n                   }\r\n               } else { \r\n                   var tempType = LossesData.Data.Type;\r\n                   if (tempType == 0)\r\n                   {\r\n                       _courtSettlementFees = LossesData.Data.result;\r\n                            if (_manager.PlayerGameInfo[_playerIndex].Cash >= _courtSettlementFees) {\r\n                                _manager.PlayerGameInfo[_playerIndex].Cash -= _courtSettlementFees;\r\n                                this.CompleteTurnWithToast(\"Total amount $\" + _courtSettlementFees + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                                LossesData = null;\r\n                            } else {\r\n                                console.log(\"not enough cash\");\r\n                                if (!this.IsBotTurn) {\r\n                                    GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                                } else\r\n                                {\r\n                                    LossesData = null;\r\n                                    console.log(\"it was bot and had not enough money\");\r\n                                    this.CompleteTurnWithToast(\"\", 1200);\r\n                                }\r\n                            }\r\n                   } else if (tempType == 1)\r\n                   {\r\n                       DiceResult = LossesData.Data.result;\r\n                       totalAmount = LossesData.Data.TotalAmount;\r\n                       if (_manager.PlayerGameInfo[_playerIndex].Cash >= totalAmount) {\r\n                        _manager.PlayerGameInfo[_playerIndex].Cash -= totalAmount;\r\n                        this.CompleteTurnWithToast(\"Total amount $\" + totalAmount + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                        LossesData = null;\r\n                    } else {\r\n                        console.log(\"not enough cash\");\r\n                        if (!this.IsBotTurn) {\r\n                            GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                        } else\r\n                        {\r\n                            console.log(\"it was bot and had not enough money\");\r\n                            LossesData = null;\r\n                            this.CompleteTurnWithToast(\"\", 1200);\r\n                        }\r\n                    }\r\n                   }\r\n               }\r\n               break;\r\n         case \"10\"://Your computer has been hacked! You catch it in time, but you must buy more security for your business records. Pay $20,000 to the Bank.\r\n               console.log(this.Losses[Index].Description);\r\n               var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               var bill = 20000;\r\n               if (_manager.PlayerGameInfo[_playerIndex].Cash >= bill) {\r\n                _manager.PlayerGameInfo[_playerIndex].Cash -= bill;\r\n                this.CompleteTurnWithToast(\"Total amount $\" + bill + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                LossesData = null;\r\n            } else {\r\n                console.log(\"not enough cash\");\r\n                if (!this.IsBotTurn) {\r\n                    GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                } else\r\n                {\r\n                    console.log(\"it was bot and had not enough money\");\r\n                    LossesData = null;\r\n                    this.CompleteTurnWithToast(\"\", 1200);\r\n                }\r\n            }\r\n             break;\r\n         case \"11\":\r\n             console.log(this.Losses[Index].Description);\r\n             break;\r\n         case \"12\":\r\n             console.log(this.Losses[Index].Description);\r\n             break;\r\n         case \"13\":\r\n             console.log(this.Losses[Index].Description);\r\n             break;\r\n         case \"14\":\r\n             console.log(this.Losses[Index].Description);\r\n             break;\r\n         case \"15\":\r\n             console.log(this.Losses[Index].Description);\r\n             break;\r\n          default:\r\n             break;\r\n       }\r\n    },\r\n\r\n    WildCardFunctionality(_id, _hasTwoScreens = false,_type=0)\r\n    {\r\n      var Index=parseInt(_id);\r\n      Index=Index-1;\r\n\r\n       switch (_id) {\r\n         case \"1\"://doubles your income on the next Pay Day.\r\n             console.log(this.WildCards[Index].Description);\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n              WildCardData = null;\r\n             _manager.ToggleDoublePayNextTurn(true);\r\n             this.CompleteTurnWithToast(\"You will receive double profits on next payday.\",2400);\r\n             break;\r\n         case \"2\"://Roll 1 die, multiply result by $5,000 and receive your advance from the Bank.\r\n             console.log(this.WildCards[Index].Description);\r\n             WildCardData = null;\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n             var _playerIndex=GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n             \r\n             var DiceResult=_manager.RollOneDice();\r\n             var CashMulitplier=5000;\r\n             var TotalResult=DiceResult*CashMulitplier;\r\n\r\n             _manager.PlayerGameInfo[_playerIndex].Cash+=TotalResult;\r\n             this.CompleteTurnWithToast(\"Dice Result: \"+DiceResult+\"\\n\"+\"\\n\"+\r\n                \"Total: \"+DiceResult+\" * \"+CashMulitplier+\" = \"+TotalResult+\"\\n\"+\"\\n\"+\"\\n\"+\r\n                \"Amount $\"+TotalResult+\" has been added into your cash.\"\r\n                ,4000);\r\n\r\n             break;\r\n         case \"3\"://You go to an Estate Auction and buy a painting that turns out to be valuable. You can sell it now, roll both dice, multiply result by $10,000 and receive profits from the Bank.\r\n               console.log(this.WildCards[Index].Description);\r\n               WildCardData = null;\r\n               var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex=GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               \r\n               var DiceResult=_manager.RollTwoDices();\r\n               var CashMulitplier=10000;\r\n               var TotalResult=DiceResult*CashMulitplier;\r\n  \r\n               _manager.PlayerGameInfo[_playerIndex].Cash+=TotalResult;\r\n               this.CompleteTurnWithToast(\"Dice Result: \"+DiceResult+\"\\n\"+\"\\n\"+\r\n                  \"Total: \"+DiceResult+\" * \"+CashMulitplier+\" = \"+TotalResult+\"\\n\"+\"\\n\"+\r\n                  \"Amount $\"+TotalResult+\" has been added into your cash.\"\r\n                  ,5200);\r\n             break;\r\n         case \"4\"://Your business is audited by the IRS and you have not been keeping very good records of the income and expenses for your business. They fine you $30,000. If you have a lawyer, your fine is $15,000.\r\n               console.log(this.WildCards[Index].Description);\r\n               var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               var _fine = 30000;\r\n               var _lawyerStatus = _manager.PlayerGameInfo[_playerIndex].LawyerStatus;\r\n               if (_hasTwoScreens)\r\n               {\r\n\r\n                   if (_lawyerStatus)\r\n                       _fine = _fine / 2;\r\n                       \r\n                   WildCardData = { Data: { result: _fine } };\r\n                   \r\n                   if (!this.IsBotTurn) {\r\n\r\n                    this.ShowCardInfo(\"\\n\" + \"Lawyer Hired : \" + _lawyerStatus + \"\\n\" + \"\\n\" +\r\n                    \"Total fine $\"+_fine, true);\r\n                    \r\n                    this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                    this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                    } else\r\n                    {\r\n                        this.CardFuntionalityButton();\r\n                    }\r\n               }\r\n               else\r\n               {\r\n                   _fine = WildCardData.Data.result;\r\n                   if (_manager.PlayerGameInfo[_playerIndex].Cash >= _fine) {\r\n                    _manager.PlayerGameInfo[_playerIndex].Cash -= _fine;\r\n                    _manager.PlayerGameInfo[_playerIndex].LawyerStatus = false;\r\n                    this.CompleteTurnWithToast(\"Fees $\" + _fine + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 2800);\r\n                    WildCardData = null;\r\n                    } else {\r\n                    console.log(\"not enough cash\");\r\n                    if (!this.IsBotTurn) {\r\n                        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                    } else\r\n                    {\r\n                        console.log(\"its bot and has no cash,skipping\");\r\n                        WildCardData = null;\r\n                        this.CompleteTurnWithToast(\"\", 1200);\r\n                    }\r\n                    }\r\n                }\r\n             break;\r\n         case \"5\"://You can become a vendor at a local Jazz Festival for a vending fee of $20,000. If you accept, pay the Bank $20,000 and roll two die; multiply the result by $5,000 and receive your vending income from the Bank.\r\n               console.log(this.WildCards[Index].Description);\r\n               var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               var _fees = 20000;\r\n               var _multiplier = 5000;\r\n               var _diceResult;\r\n               var _result;\r\n\r\n               if (_hasTwoScreens)\r\n               {\r\n                   if (_type == 0)\r\n                   {\r\n                        _diceResult = _manager.RollTwoDices();\r\n                       _result = _diceResult * _multiplier;\r\n                       \r\n                       WildCardData = { Data: { result: _result, Dice: _diceResult } };\r\n                       \r\n                       if (_manager.PlayerGameInfo[_playerIndex].Cash >= _fees)\r\n                       {\r\n                           _manager.PlayerGameInfo[_playerIndex].Cash -= _fees;\r\n\r\n                           if (!this.IsBotTurn) {\r\n\r\n                            this.ShowCardInfo(\"\\n\" + \"Dice Result: \" + _diceResult + \"\\n\" + \"\\n\" +\r\n                            \"Total Amount : \"+_diceResult+\" * \"+_multiplier+\" = $\"+_result, true);\r\n                            \r\n                            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Receive Amount\";\r\n                            this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                            } else\r\n                            {\r\n                                this.CardFuntionalityButton();\r\n                            }\r\n                       } else\r\n                       {\r\n                            WildCardData = null;\r\n                            this.CompleteTurnWithToast(\"you don't have enough cash.\",2400);\r\n                       }\r\n                   } else if (_type == 1)\r\n                   {\r\n                        WildCardData = null;\r\n                        this.CompleteTurnWithToast(\"skipping turn now.\",1800);\r\n                   }\r\n               } else\r\n               {\r\n                   _diceResult = WildCardData.Data.Dice;\r\n                   _result = WildCardData.Data.result;\r\n                   _manager.PlayerGameInfo[_playerIndex].Cash += _result;\r\n                    WildCardData = null;\r\n                    this.CompleteTurnWithToast(\"Cash amount $\"+_result+\" has been successfully added.\",3000);\r\n                   }\r\n             break;\r\n         case \"6\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"7\"://pay off your loan for your Brick & Mortar Business. If you have no loan outstanding, receive $50,000.\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n             var _playerIndex=GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n             WildCardData = null;\r\n             var _loanReset=false;\r\n             for (let index = 0; index < _manager.PlayerGameInfo[_playerIndex].NoOfBusiness.length; index++) {\r\n                var _type=parseInt(_manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].BusinessType);\r\n                if(_type==2 && _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].LoanTaken)\r\n                {\r\n                    _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].LoanTaken=false;\r\n                    _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].LoanAmount=0;\r\n                    _loanReset=true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if(_loanReset)\r\n            {\r\n                this.CompleteTurnWithToast(\"your outstanding loan has been payed off.\",3200);\r\n            }else\r\n            {\r\n                _manager.PlayerGameInfo[_playerIndex].Cash+=50000;\r\n                this.CompleteTurnWithToast(\"you had no loan, amount $50000 has been added to your cash\",3200);\r\n            }\r\n\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"8\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"9\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"10\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"11\":// receive double your business profits on all of your businesses.\r\n             console.log(this.WildCards[Index].Description);\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n             WildCardData = null;\r\n             _manager.ToggleDoublePayNextTurn(true);\r\n             this.CompleteTurnWithToast(\"You will receive double profits on next payday.\",2400);\r\n             break;\r\n         case \"12\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"13\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"14\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"15\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n          default:\r\n             break;\r\n       }\r\n    },\r\n\r\n    InvestFunctionality()\r\n    {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableInvest_InvestSetupUI(true);\r\n        this.ShowCardInfo(\"\",false);\r\n    },\r\n\r\n    PayDayFunctionality()\r\n    {\r\n\r\n    },\r\n\r\n    DoublePayDayFunctionality()\r\n    {\r\n\r\n    },\r\n\r\n    OneQuestionFunctionality()\r\n    {\r\n        GamePlayReferenceManager.Instance.Get_GameManager().OneQuestionScreen_Space_OneQuestion(true);\r\n        this.ShowCardInfo(\"\",false);\r\n    },\r\n\r\n    SellFunctionality()\r\n    {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableSellScreen__SellBusinessUISetup(true);\r\n        this.ShowCardInfo(\"\",false);\r\n    },\r\n\r\n    BuyOrSellFunctionality()\r\n    {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableBuyOrSell_BuyOrSellSetupUI(true);\r\n        this.ShowCardInfo(\"\",false);\r\n    },\r\n\r\n    GoBackFunctionality()\r\n    {\r\n        GamePlayReferenceManager.Instance.Get_GameManager().GoBackSpaces_spaceFunctionality();\r\n        this.ShowCardInfo(\"\",false);\r\n    },\r\n});\r\nmodule.exports= DecksData;\r\n"]}