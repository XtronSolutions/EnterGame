{"version":3,"sources":["assets\\Script\\DecksData.js"],"names":["GamePlayReferenceManager","LossesData","MarketingData","WildCardData","BigBusinessData","TimeoutRef","CompletionWindowTime","LongMessageTime","EnumSpaceType","cc","Enum","None","WildCard","BigBusiness","Marketing","Invest","Losses","PayDay","DoublePayDay","OneQuestion","Sell","BuyOrSell","GoBackSpaces","CardData","Class","name","properties","ID","displayName","type","Text","serializable","tooltip","Description","HasButton","HasTwoButtons","HasThreeButtons","ButtonName","SecondButtonName","ThirdButtonName","ctor","CardUI","ToastNode","Node","ToastLabel","Label","ButtonNode","InteractionButtonNode","InteractionTwoButtonsNode","InteractionThreeButtonsNode","CompletionToastNode","CompletionToastLabel","DecksData","Component","MainUI","WildCards","SpacesType","ResetAllData","onLoad","CheckReferences","SelectedCardIndex","CardSelected","IsBotTurn","isOwner","onEnable","systemEvent","on","ShowCardInfo","onDisable","off","require","getRandom","min","max","Math","floor","random","ToggleButtons","_isOwner","_hasButton","_isBot","_hasTwoButton","active","setTimeout","ExitCardInfo","GenerateRandomBigBusinessCard","_randomValue","children","getComponent","string","CardFuntionalityButton","GenerateRandomMarketingCard","GenerateRandomLossesCard","GenerateRandomWildCard","SpaceInvest","_index","CompleteTurnWithToast","SpacePayDay","PayDayFunctionality","SpaceDoublePayDay","DoublePayDayFunctionality","SpaceOneQuestion","SpaceSell","SpaceBuyOrSell","SpaceGoBackSpaces","message","_state","Instance","Get_GameManager","ResetCardDisplay","RaiseEventTurnComplete","TwoButtonsFunctionality","event","_type","BigBusinessCardFunctionality","LossesCardFunctionality","MarketingCardFunctionality","WildCardFunctionality","SellFunctionality","InvestFunctionality","BuyOrSellFunctionality","OneQuestionFunctionality","GoBackFunctionality","CheckLoan","_loanTaken","_businessIndex","_manager","_playerIndex","GetTurnNumber","index","PlayerGameInfo","NoOfBusiness","length","LoanTaken","val","Result","v2","DoneButtonClicked","clearTimeout","CompletionWindow","console","error","_msg","_time","_changeTurn","log","_delay","Get_GameplayUIManager","ShowToast","AssignSecondScreenData","_LabelRef","_buttonName","_id","_hasTwoScreens","Index","parseInt","_result","IsLoanTaken","x","y","LoanAmount","_cardInfo","LawyerStatus","EnableManipilationScreen__BusinessManipulationUISetup","OnStockDiceClicked_TurnDecision","_diceResult","_multiplier","RollTwoDices","Data","result","Dice","Cash","ToggleSkipNextTurn","ToggleScreen_InsufficientBalance","CashGiven","StartNewBusiness_BusinessSetup","OnExpandButtonClicked_TurnDecision","CashCost","ToggleDoublePayNextTurn","_amount","mode","Get_MultiplayerController","GetSelectedMode","MarketingAmount","round","_actorsArray","getPhotonRef","myRoomActorsArray","_data","customProperties","PlayerSessionData","setCustomProperty","IsActive","Deduct","Get_MultiplayerSyncManager","RaiseEvent","Dice1Result","Dice2Result","TotalResult","CardFunctionality","HasMarketingCompany","_loseAmount","LoseAllMarketingMoney","_marketingAmount","_lawyerStatus","_businessAmount","HomeBasedAmount","BrickAndMortarAmount","_hasMarketingAmount","_totalAmount","_marketAmount","_increaseAmount","MultiplyMarketingMoney","bill","isEven","RollOneDice","IsEven","_HBAmount","_BMAmount","_locations","TotalLocationsAmount","_TotalBusinesses","_profit","_TotalProfit","GetMarketingMoney","DiceResult","CashMulitplier","_hiredLawyer","lawyer","ToggleSkipPayDay_Whole","homeBasedBusiness","brickAndMortarBusiness","homeMultiplier","brickMuliplier","totalAmount","_courtSettlementFees","Type","TotalAmount","tempType","_businessType","BusinessType","ToggleSkipPayDay_HomeBased","_TotalBM","_TotalBMLocations","Total","_TotalHB","CashMulitplier1","CashMulitplier2","_fine","Fine","ToggleHalfPayNextTurn","NextTurnHalfPayDayCounter","_fees","_loanReset","BMBusiness","EnableSeletiveDoublePayDay_BusinessPayDayUISetup","SelectPlayerProfit_Space_CardFunctionality","EnableInvest_InvestSetupUI","OneQuestionScreen_Space_OneQuestion","EnableSellScreen__SellBusinessUISetup","EnableBuyOrSell_BuyOrSellSetupUI","GoBackSpaces_spaceFunctionality","module","exports"],"mappings":"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","sourceRoot":"/","sourcesContent":["var GamePlayReferenceManager = null;\r\nvar LossesData = null;\r\nvar MarketingData = null;\r\nvar WildCardData = null;\r\nvar BigBusinessData = null;\r\nvar TimeoutRef;\r\nvar CompletionWindowTime = 8000;\r\nvar LongMessageTime = 5000;\r\n\r\n// var CompletionWindowTime = 500;//8000\r\n// var LongMessageTime = 250;//5000\r\n\r\n//-------------------------------------------Spaces Data-------------------------//\r\nvar EnumSpaceType = cc.Enum({\r\n  None: 0,\r\n  WildCard: 1,\r\n  BigBusiness: 2,\r\n  Marketing: 3,\r\n  Invest: 4,\r\n  Losses: 5,\r\n  PayDay: 6,\r\n  DoublePayDay: 7,\r\n  OneQuestion: 8,\r\n  Sell: 9,\r\n  BuyOrSell: 10,\r\n  GoBackSpaces: 11,\r\n});\r\n//-------------------------------------------class for card data-------------------------//\r\nvar CardData = cc.Class({\r\n  name: \"CardData\",\r\n  properties: {\r\n    ID: {\r\n      displayName: \"ID\",\r\n      type: cc.Text,\r\n      default: \"\",\r\n      serializable: true,\r\n      tooltip: \"Id of the card\",\r\n    },\r\n    Description: {\r\n      displayName: \"Description\",\r\n      type: cc.Text,\r\n      default: \"\",\r\n      serializable: true,\r\n      tooltip: \"description of the card\",\r\n    },\r\n    HasButton: {\r\n      displayName: \"HasButton\",\r\n      type: cc.boolean,\r\n      default: false,\r\n      serializable: true,\r\n      tooltip: \"if this card should have interaction button\",\r\n    },\r\n    HasTwoButtons: {\r\n      displayName: \"HasTwoButtons\",\r\n      type: cc.boolean,\r\n      default: false,\r\n      serializable: true,\r\n      tooltip: \"if this card should have two interaction button\",\r\n    },\r\n    HasThreeButtons: {\r\n      displayName: \"HasThreeButtons\",\r\n      type: cc.boolean,\r\n      default: false,\r\n      serializable: true,\r\n      tooltip: \"if this card should have three interaction button\",\r\n    },\r\n    ButtonName: {\r\n      displayName: \"ButtonName\",\r\n      type: cc.Text,\r\n      default: \"\",\r\n      serializable: true,\r\n      tooltip: \"button name to show on screen\",\r\n    },\r\n    SecondButtonName: {\r\n      displayName: \"SecondButtonName\",\r\n      type: cc.Text,\r\n      default: \"\",\r\n      serializable: true,\r\n      tooltip: \"Second button name to show on screen\",\r\n    },\r\n    ThirdButtonName: {\r\n      displayName: \"SecondButtonName\",\r\n      type: cc.Text,\r\n      default: \"\",\r\n      serializable: true,\r\n      tooltip: \"Second button name to show on screen\",\r\n    },\r\n  },\r\n\r\n  ctor: function () {\r\n    //constructor\r\n  },\r\n});\r\n//-------------------------------------------class for card UI-------------------------//\r\nvar CardUI = cc.Class({\r\n  name: \"CardUI\",\r\n  properties: {\r\n    ToastNode: {\r\n      displayName: \"ToastNode\",\r\n      type: cc.Node,\r\n      default: null,\r\n      serializable: true,\r\n      tooltip: \"node reference for toast node\",\r\n    },\r\n    ToastLabel: {\r\n      displayName: \"ToastLabel\",\r\n      type: cc.Label,\r\n      default: null,\r\n      serializable: true,\r\n      tooltip: \"label reference for toast node\",\r\n    },\r\n    ButtonNode: {\r\n      displayName: \"ExitButton\",\r\n      type: cc.Node,\r\n      default: null,\r\n      serializable: true,\r\n      tooltip: \"Button reference for node\",\r\n    },\r\n    InteractionButtonNode: {\r\n      displayName: \"InteractionButton\",\r\n      type: cc.Node,\r\n      default: null,\r\n      serializable: true,\r\n      tooltip: \"interaction Button reference for node\",\r\n    },\r\n    InteractionTwoButtonsNode: {\r\n      displayName: \"InteractionTwoButtonsNode\",\r\n      type: cc.Node,\r\n      default: null,\r\n      serializable: true,\r\n      tooltip: \"two interaction Button reference for node\",\r\n    },\r\n    InteractionThreeButtonsNode: {\r\n      displayName: \"InteractionThreeButtonsNode\",\r\n      type: cc.Node,\r\n      default: null,\r\n      serializable: true,\r\n      tooltip: \"three interaction Button reference for node\",\r\n    },\r\n    CompletionToastNode: {\r\n      displayName: \"CompletionToastNode\",\r\n      type: cc.Node,\r\n      default: null,\r\n      serializable: true,\r\n      tooltip: \"node reference for compleion toast node\",\r\n    },\r\n    CompletionToastLabel: {\r\n      displayName: \"CompletionToastLabel\",\r\n      type: cc.Label,\r\n      default: null,\r\n      serializable: true,\r\n      tooltip: \"label reference for compleion toast node\",\r\n    },\r\n  },\r\n\r\n  ctor: function () {\r\n    //constructor\r\n  },\r\n});\r\n//-------------------------------------------class for decks Data-------------------------//\r\nvar DecksData = cc.Class({\r\n  name: \"DecksData\",\r\n  extends: cc.Component,\r\n  properties: {\r\n    MainUI: {\r\n      displayName: \"MainUI\",\r\n      default: null,\r\n      type: CardUI,\r\n      serializable: true,\r\n      tooltip: \"UI of decks\",\r\n    },\r\n    BigBusiness: {\r\n      displayName: \"BigBusiness\",\r\n      type: [CardData],\r\n      default: [],\r\n      serializable: true,\r\n      tooltip: \"all cards data for big business\",\r\n    },\r\n    Marketing: {\r\n      displayName: \"Marketing\",\r\n      type: [CardData],\r\n      default: [],\r\n      serializable: true,\r\n      tooltip: \"all cards data for marketing\",\r\n    },\r\n    Losses: {\r\n      displayName: \"Losses\",\r\n      type: [CardData],\r\n      default: [],\r\n      serializable: true,\r\n      tooltip: \"all cards data for losses\",\r\n    },\r\n    WildCards: {\r\n      displayName: \"WildCards\",\r\n      type: [CardData],\r\n      default: [],\r\n      serializable: true,\r\n      tooltip: \"all cards data for WildCards\",\r\n    },\r\n    SpacesType: {\r\n      type: EnumSpaceType,\r\n      default: EnumSpaceType.None,\r\n      serializable: true,\r\n      tooltip: \"states machines by type of card or spaces on board\",\r\n    },\r\n  },\r\n\r\n  ResetAllData() {\r\n    GamePlayReferenceManager = null;\r\n    LossesData = null;\r\n    MarketingData = null;\r\n    WildCardData = null;\r\n    BigBusinessData = null;\r\n    TimeoutRef = null;\r\n  },\r\n  onLoad() {\r\n    this.ResetAllData();\r\n    this.CheckReferences();\r\n    this.SelectedCardIndex = -1;\r\n    this.CardSelected = -1;\r\n    this.IsBotTurn = false;\r\n    this.isOwner = false;\r\n\r\n    //this.BigBusinessCardFunctionality(\"1\");\r\n    //for testing\r\n    // this.Counter=0;\r\n    // this.GenerateRandomBigBusinessCard(this.Counter);\r\n  },\r\n\r\n  onEnable: function () {\r\n    //events subscription to be called\r\n    cc.systemEvent.on(\"ShowCard\", this.ShowCardInfo, this);\r\n  },\r\n\r\n  onDisable: function () {\r\n    cc.systemEvent.off(\"ShowCard\", this.ShowCardInfo, this);\r\n  },\r\n  CheckReferences() {\r\n    if (!GamePlayReferenceManager || GamePlayReferenceManager == null) GamePlayReferenceManager = require(\"GamePlayReferenceManager\");\r\n  },\r\n\r\n  getRandom: function (min, max) {\r\n    return Math.floor(Math.random() * (max - min)) + min; // min included and max excluded\r\n  },\r\n\r\n  ToggleButtons(_isOwner, _hasButton = false, _isBot = false, _hasTwoButton = false) {\r\n    if (_isOwner && _hasButton) {\r\n      this.MainUI.ButtonNode.active = false;\r\n      this.MainUI.InteractionButtonNode.active = true;\r\n\r\n      if (_hasTwoButton) this.MainUI.InteractionTwoButtonsNode.active = true;\r\n      else this.MainUI.InteractionTwoButtonsNode.active = false;\r\n    } else if (_isOwner && !_hasButton) {\r\n      this.MainUI.ButtonNode.active = true;\r\n      this.MainUI.InteractionButtonNode.active = false;\r\n      this.MainUI.InteractionTwoButtonsNode.active = false;\r\n    } else {\r\n      this.MainUI.InteractionButtonNode.active = false;\r\n      this.MainUI.ButtonNode.active = false;\r\n      this.MainUI.InteractionTwoButtonsNode.active = false;\r\n\r\n      if (_isBot == false) {\r\n        setTimeout(() => {\r\n          this.ExitCardInfo();\r\n        }, 3200);\r\n      }\r\n    }\r\n  },\r\n\r\n  GenerateRandomBigBusinessCard(_isOwner, _randomValue, _isBot = false) {\r\n    BigBusinessData = null;\r\n    this.IsBotTurn = _isBot;\r\n    this.SpacesType = EnumSpaceType.BigBusiness;\r\n    this.isOwner = _isOwner;\r\n    this.SelectedCardIndex = _randomValue;\r\n    this.CardSelected = this.BigBusiness[this.SelectedCardIndex].ID;\r\n\r\n    if (this.BigBusiness[this.SelectedCardIndex].HasButton) this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = this.BigBusiness[this.SelectedCardIndex].ButtonName;\r\n\r\n    if (this.BigBusiness[this.SelectedCardIndex].HasTwoButtons) this.MainUI.InteractionTwoButtonsNode.children[0].children[0].getComponent(cc.Label).string = this.BigBusiness[this.SelectedCardIndex].SecondButtonName;\r\n\r\n    this.ShowCardInfo(this.BigBusiness[this.SelectedCardIndex].Description, true);\r\n    this.ToggleButtons(_isOwner, this.BigBusiness[this.SelectedCardIndex].HasButton, _isBot, this.BigBusiness[this.SelectedCardIndex].HasTwoButtons);\r\n\r\n    if (_isBot) {\r\n      this.CardFuntionalityButton();\r\n    }\r\n  },\r\n\r\n  GenerateRandomMarketingCard(_isOwner, _randomValue, _isBot = false) {\r\n    MarketingData = null;\r\n    this.IsBotTurn = _isBot;\r\n    this.SpacesType = EnumSpaceType.Marketing;\r\n    this.isOwner = _isOwner;\r\n    this.SelectedCardIndex = _randomValue;\r\n    this.CardSelected = this.Marketing[this.SelectedCardIndex].ID;\r\n\r\n    if (this.Marketing[this.SelectedCardIndex].HasButton) this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = this.Marketing[this.SelectedCardIndex].ButtonName;\r\n\r\n    if (this.Marketing[this.SelectedCardIndex].HasTwoButtons) this.MainUI.InteractionTwoButtonsNode.children[0].children[0].getComponent(cc.Label).string = this.Marketing[this.SelectedCardIndex].SecondButtonName;\r\n\r\n    this.ShowCardInfo(this.Marketing[this.SelectedCardIndex].Description, true);\r\n    this.ToggleButtons(_isOwner, this.Marketing[this.SelectedCardIndex].HasButton, _isBot, this.Marketing[this.SelectedCardIndex].HasTwoButtons);\r\n\r\n    if (_isBot) {\r\n      this.CardFuntionalityButton();\r\n    }\r\n  },\r\n\r\n  GenerateRandomLossesCard(_isOwner, _randomValue, _isBot = false) {\r\n    LossesData = null;\r\n    this.IsBotTurn = _isBot;\r\n    this.isOwner = _isOwner;\r\n    this.SpacesType = EnumSpaceType.Losses;\r\n    this.SelectedCardIndex = _randomValue;\r\n    this.CardSelected = this.Losses[this.SelectedCardIndex].ID;\r\n\r\n    this.ShowCardInfo(this.Losses[this.SelectedCardIndex].Description, true);\r\n\r\n    if (this.Losses[this.SelectedCardIndex].HasButton) this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = this.Losses[this.SelectedCardIndex].ButtonName;\r\n\r\n    if (this.Losses[this.SelectedCardIndex].HasTwoButtons) this.MainUI.InteractionTwoButtonsNode.children[0].children[0].getComponent(cc.Label).string = this.Losses[this.SelectedCardIndex].SecondButtonName;\r\n\r\n    this.ToggleButtons(_isOwner, this.Losses[this.SelectedCardIndex].HasButton, _isBot, this.Losses[this.SelectedCardIndex].HasTwoButtons);\r\n\r\n    if (_isBot) {\r\n      this.CardFuntionalityButton();\r\n    }\r\n  },\r\n\r\n  GenerateRandomWildCard(_isOwner, _randomValue, _isBot = false) {\r\n    WildCardData = null;\r\n    this.IsBotTurn = _isBot;\r\n    this.SpacesType = EnumSpaceType.WildCard;\r\n    this.SelectedCardIndex = _randomValue;\r\n    this.isOwner = _isOwner;\r\n    this.CardSelected = this.WildCards[this.SelectedCardIndex].ID;\r\n\r\n    if (this.WildCards[this.SelectedCardIndex].HasButton) this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = this.WildCards[this.SelectedCardIndex].ButtonName;\r\n\r\n    if (this.WildCards[this.SelectedCardIndex].HasTwoButtons) this.MainUI.InteractionTwoButtonsNode.children[0].children[0].getComponent(cc.Label).string = this.WildCards[this.SelectedCardIndex].SecondButtonName;\r\n\r\n    this.ShowCardInfo(this.WildCards[this.SelectedCardIndex].Description, true);\r\n    this.ToggleButtons(_isOwner, this.WildCards[this.SelectedCardIndex].HasButton, _isBot, this.WildCards[this.SelectedCardIndex].HasTwoButtons);\r\n\r\n    if (_isBot) {\r\n      this.CardFuntionalityButton();\r\n    }\r\n  },\r\n\r\n  SpaceInvest(_isOwner, _index, _isBot = false) {\r\n    this.IsBotTurn = _isBot;\r\n    this.isOwner = _isOwner;\r\n    this.SpacesType = EnumSpaceType.Invest;\r\n    this.ShowCardInfo(\"You can invest one more time in Gold or stocks this turn.\", true);\r\n    this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n    this.ToggleButtons(_isOwner, true, _isBot);\r\n\r\n    if (_isBot) {\r\n      this.CompleteTurnWithToast(\"msg\", 2100);\r\n    }\r\n  },\r\n\r\n  SpacePayDay(_isOwner, _index) {\r\n    this.ShowCardInfo(\"You have landed on PayDay space.\", true);\r\n    this.PayDayFunctionality();\r\n\r\n    this.ToggleButtons(_isOwner, false);\r\n  },\r\n\r\n  SpaceDoublePayDay(_isOwner, _index) {\r\n    this.ShowCardInfo(\"You have landed on DoublePayDay space.\", true);\r\n    this.DoublePayDayFunctionality();\r\n\r\n    this.ToggleButtons(_isOwner, false);\r\n  },\r\n\r\n  SpaceOneQuestion(_isOwner, _index, _isBot = false) {\r\n    this.IsBotTurn = _isBot;\r\n    this.isOwner = _isOwner;\r\n    this.SpacesType = EnumSpaceType.OneQuestion;\r\n    this.ShowCardInfo(\"You can ask one question to any other player, if player is unable to answer they will pay you some cash amount.\", true);\r\n    this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n    this.ToggleButtons(_isOwner, true, _isBot);\r\n    if (_isBot) {\r\n      this.CompleteTurnWithToast(\"msg\", 2100);\r\n    }\r\n  },\r\n\r\n  SpaceSell(_isOwner, _index, _isBot = false) {\r\n    this.IsBotTurn = _isBot;\r\n    this.isOwner = _isOwner;\r\n    this.SpacesType = EnumSpaceType.Sell;\r\n    this.ShowCardInfo(\"You can sell any one of your business or can skip turn.\", true);\r\n    this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n    this.ToggleButtons(_isOwner, true, _isBot);\r\n    if (_isBot) {\r\n      this.CompleteTurnWithToast(\"msg\", 2100);\r\n    }\r\n  },\r\n\r\n  SpaceBuyOrSell(_isOwner, _index, _isBot = false) {\r\n    this.IsBotTurn = _isBot;\r\n    this.isOwner = _isOwner;\r\n    this.SpacesType = EnumSpaceType.BuyOrSell;\r\n    this.ShowCardInfo(\"You can Buy or sell Gold or stocks one more time in this turn.\", true);\r\n    this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n    this.ToggleButtons(_isOwner, true, _isBot);\r\n    if (_isBot) {\r\n      this.CompleteTurnWithToast(\"msg\", 2100);\r\n    }\r\n  },\r\n\r\n  SpaceGoBackSpaces(_isOwner, _index, _isBot = false) {\r\n    this.IsBotTurn = _isBot;\r\n    this.isOwner = _isOwner;\r\n    this.SpacesType = EnumSpaceType.GoBackSpaces;\r\n    this.ShowCardInfo(\"you will have to go back 3 spaces.\", true);\r\n    this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n    this.ToggleButtons(_isOwner, true, _isBot);\r\n    if (_isBot) {\r\n      setTimeout(() => {\r\n        this.CardFuntionalityButton();\r\n      }, 1000);\r\n    }\r\n  },\r\n\r\n  ShowCardInfo: function (message, _state) {\r\n    if (_state) {\r\n      this.MainUI.ToastNode.active = true;\r\n      this.MainUI.ToastLabel.string = message;\r\n    } else {\r\n      this.MainUI.ToastLabel.string = \"\";\r\n      this.MainUI.ToastNode.active = false;\r\n    }\r\n  },\r\n\r\n  ExitCardInfo() {\r\n    this.ShowCardInfo(\"\", false);\r\n    GamePlayReferenceManager.Instance.Get_GameManager().ResetCardDisplay();\r\n    GamePlayReferenceManager.Instance.Get_GameManager().RaiseEventTurnComplete();\r\n\r\n    //for testing\r\n    // this.Counter++;\r\n    // this.GenerateRandomBigBusinessCard(this.Counter);\r\n  },\r\n\r\n  TwoButtonsFunctionality() {\r\n    this.CardFuntionalityButton(null, 1);\r\n  },\r\n\r\n  CardFuntionalityButton(event = null, _type = 0) {\r\n    if (this.SpacesType == EnumSpaceType.BigBusiness) {\r\n      if (BigBusinessData == null) this.BigBusinessCardFunctionality(this.CardSelected, true, _type);\r\n      else this.BigBusinessCardFunctionality(this.CardSelected, false, _type);\r\n    } else if (this.SpacesType == EnumSpaceType.Losses) {\r\n      if (LossesData == null) this.LossesCardFunctionality(this.CardSelected, true, _type);\r\n      else this.LossesCardFunctionality(this.CardSelected, false, _type);\r\n    } else if (this.SpacesType == EnumSpaceType.Marketing) {\r\n      if (MarketingData == null) this.MarketingCardFunctionality(this.CardSelected, true, _type);\r\n      else this.MarketingCardFunctionality(this.CardSelected, false, _type);\r\n    } else if (this.SpacesType == EnumSpaceType.WildCard) {\r\n      if (WildCardData == null) this.WildCardFunctionality(this.CardSelected, true, _type);\r\n      else this.WildCardFunctionality(this.CardSelected, false, _type);\r\n    } else if (this.SpacesType == EnumSpaceType.Sell) {\r\n      this.SellFunctionality();\r\n    } else if (this.SpacesType == EnumSpaceType.Invest) {\r\n      this.InvestFunctionality();\r\n    } else if (this.SpacesType == EnumSpaceType.BuyOrSell) {\r\n      this.BuyOrSellFunctionality();\r\n    } else if (this.SpacesType == EnumSpaceType.OneQuestion) {\r\n      this.OneQuestionFunctionality();\r\n    } else if (this.SpacesType == EnumSpaceType.GoBackSpaces) {\r\n      this.GoBackFunctionality();\r\n    }\r\n  },\r\n\r\n  CheckLoan() {\r\n    var _loanTaken = false;\r\n    var _businessIndex = 0;\r\n\r\n    var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n    var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n\r\n    for (let index = 0; index < _manager.PlayerGameInfo[_playerIndex].NoOfBusiness.length; index++) {\r\n      if (_manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].LoanTaken) {\r\n        _loanTaken = true;\r\n        _businessIndex = index;\r\n        break;\r\n      }\r\n    }\r\n\r\n    var val = -1;\r\n    val = _loanTaken == true ? 1 : 0;\r\n    var Result = cc.v2(val, _businessIndex);\r\n    return Result;\r\n  },\r\n\r\n  DoneButtonClicked() {\r\n    var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n\r\n    this.ShowCardInfo(\"\", false);\r\n    _manager.ResetCardDisplay();\r\n    _manager.RaiseEventTurnComplete();\r\n    clearTimeout(TimeoutRef);\r\n    this.CompletionWindow(\"\", false, this.isOwner, false);\r\n    console.error(\"done clicked\");\r\n  },\r\n\r\n  CompletionWindow(message, _state, _isOwner, _isBot) {\r\n    if (!_isBot) {\r\n      if (_state) {\r\n        this.MainUI.CompletionToastNode.active = true;\r\n        this.MainUI.CompletionToastLabel.string = message;\r\n\r\n        if (_isOwner) {\r\n          clearTimeout(TimeoutRef);\r\n          TimeoutRef = setTimeout(() => {\r\n            this.DoneButtonClicked();\r\n          }, CompletionWindowTime);\r\n        }\r\n      } else {\r\n        this.MainUI.CompletionToastLabel.string = \"\";\r\n        this.MainUI.CompletionToastNode.active = false;\r\n      }\r\n    } else {\r\n      this.MainUI.CompletionToastLabel.string = \"\";\r\n      this.MainUI.CompletionToastNode.active = false;\r\n    }\r\n  },\r\n\r\n  CompleteTurnWithToast(_msg, _time, _changeTurn = true) {\r\n    var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n\r\n    if (this.IsBotTurn) {\r\n      this.CompletionWindow(\"\", false, false, true);\r\n      console.log(_msg);\r\n      var _delay = this.getRandom(LongMessageTime, LongMessageTime + 2000);\r\n      setTimeout(() => {\r\n        this.ShowCardInfo(\"\", false);\r\n        _manager.ResetCardDisplay();\r\n        _manager.RaiseEventTurnComplete();\r\n      }, _delay);\r\n    } else {\r\n      if (_msg != \"\" && !_changeTurn) {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(_msg, LongMessageTime, this.isOwner);\r\n      }\r\n\r\n      this.ShowCardInfo(\"\", false);\r\n\r\n      if (_changeTurn) {\r\n        if (this.isOwner) {\r\n          this.CompletionWindow(_msg, true, true, this.IsBotTurn);\r\n        } else {\r\n          setTimeout(() => {\r\n            this.ShowCardInfo(\"\", false);\r\n            _manager.ResetCardDisplay();\r\n            _manager.RaiseEventTurnComplete();\r\n          }, LongMessageTime);\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  AssignSecondScreenData(_isBot, _isOwner, _hasButton, _msg, _LabelRef, _buttonName) {\r\n    if (!_isBot) {\r\n      this.ShowCardInfo(_msg, true);\r\n\r\n      _LabelRef.getComponent(cc.Label).string = _buttonName;\r\n      this.ToggleButtons(_isOwner, _hasButton, _isBot);\r\n\r\n      if (_isOwner) {\r\n        setTimeout(() => {\r\n          this.DoneButtonClicked();\r\n        }, 15000);\r\n      }\r\n    } else {\r\n      this.CardFuntionalityButton();\r\n    }\r\n  },\r\n\r\n  BigBusinessCardFunctionality(_id, _hasTwoScreens = false, _type = 0) {\r\n    var Index = parseInt(_id);\r\n    Index = Index - 1;\r\n\r\n    switch (_id) {\r\n      case \"1\": //receive 20000$ gift to payoff loan\r\n        console.log(this.BigBusiness[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _result = this.CheckLoan();\r\n        var IsLoanTaken = _result.x;\r\n        var _businessIndex = _result.y;\r\n        BigBusinessData = null;\r\n\r\n        if (IsLoanTaken == 1) {\r\n          //means user has taken loan\r\n          _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanAmount = _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanAmount - 20000;\r\n          if (_manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanAmount <= 0) {\r\n            _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanAmount = 0;\r\n            _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanTaken = false;\r\n          }\r\n          _cardInfo = \"Loan amount of $20000 has been payed off.\";\r\n        } else {\r\n          _cardInfo = \"You have not taken any loan, turn will skip now.\";\r\n        }\r\n\r\n        this.CompleteTurnWithToast(_cardInfo, 5000, true);\r\n\r\n        break;\r\n      case \"2\": //hire lawyer\r\n        console.log(this.BigBusiness[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _cardInfo = \"\";\r\n        BigBusinessData = null;\r\n\r\n        if (_manager.PlayerGameInfo[_playerIndex].LawyerStatus) {\r\n          _cardInfo = \"You have already hired laywer, turn will skip now.\";\r\n        } else {\r\n          _manager.PlayerGameInfo[_playerIndex].LawyerStatus = true;\r\n          _cardInfo = \"You have successfully hired a lawyer.\";\r\n        }\r\n\r\n        this.CompleteTurnWithToast(_cardInfo, 5000, true);\r\n\r\n        break;\r\n      case \"3\": //You do a Trade Show for one of your businesses and get some new clients. Choose one of your businesses and roll a PayDay roll right now.\r\n        console.log(this.BigBusiness[Index].Description);\r\n        BigBusinessData = null;\r\n        if (!this.IsBotTurn) {\r\n          this.ShowCardInfo(\"\", false);\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableManipilationScreen__BusinessManipulationUISetup(true);\r\n        } else {\r\n          setTimeout(() => {\r\n            this.ShowCardInfo(\"\", false);\r\n          }, 2400);\r\n\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableManipilationScreen__BusinessManipulationUISetup(true, true);\r\n        }\r\n        break;\r\n      case \"4\": //A friend gives you a suggestion on a stock to buy. Place your investment amount on the table and roll. The result, multiplied by $1,000, is the amount of each share of stock. You can buy this stock now if you would like.\r\n        console.log(this.BigBusiness[Index].Description);\r\n        BigBusinessData = null;\r\n        if (!this.IsBotTurn) {\r\n          this.ShowCardInfo(\"\", false);\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().OnStockDiceClicked_TurnDecision(null, true);\r\n        } else {\r\n          this.CompleteTurnWithToast(\"\", 1200);\r\n        }\r\n        break;\r\n      case \"5\": //You reserve a private Yacht for a week long vacation. Roll both die, multiply the result by $3,000. Pay the Bank your vacation cost and lose your next turn basking in your private sun.\r\n        console.log(this.BigBusiness[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _diceResult;\r\n        var _multiplier = 3000;\r\n        var _result;\r\n\r\n        if (_hasTwoScreens) {\r\n          _diceResult = _manager.RollTwoDices();\r\n          _result = _multiplier * _diceResult;\r\n          BigBusinessData = { Data: { result: _result, Dice: _diceResult } };\r\n\r\n          if (!this.IsBotTurn) {\r\n            this.ShowCardInfo(\"\\n\" + \"Dice Roll Result : \" + _diceResult + \"\\n\" + \"\\n\" + \"Total Cost Calculated : \" + _diceResult + \" * \" + _multiplier + \" = $\" + _result, true);\r\n\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n            this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n          } else {\r\n            this.CardFuntionalityButton();\r\n          }\r\n        } else {\r\n          _diceResult = BigBusinessData.Data.Dice;\r\n          _result = BigBusinessData.Data.result;\r\n\r\n          if (_manager.PlayerGameInfo[_playerIndex].Cash >= _result) {\r\n            _manager.PlayerGameInfo[_playerIndex].Cash -= _result;\r\n            _manager.ToggleSkipNextTurn(true);\r\n            this.CompleteTurnWithToast(\"Cost $\" + _result + \" has been successfully paid, you will also lose your next turn, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n            BigBusinessData = null;\r\n          } else {\r\n            console.log(\"not enough cash\");\r\n            if (!this.IsBotTurn) {\r\n              GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n            } else {\r\n              console.log(\"its bot and has no cash,skipping\");\r\n              BigBusinessData = null;\r\n              this.CompleteTurnWithToast(\"\", 1200);\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"6\": //Your parents give you $20,000 towards starting a new business or investing in your current business. Choose which and play according to the game rules.\r\n        console.log(this.BigBusiness[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var CashGiven = 20000;\r\n        BigBusinessData = null;\r\n\r\n        if (!this.IsBotTurn) {\r\n          if (_type == 0) {\r\n            //start new business\r\n            this.ShowCardInfo(\"\", false);\r\n            GamePlayReferenceManager.Instance.Get_GameplayUIManager().StartNewBusiness_BusinessSetup(false, true, 0, false, 0, true, CashGiven, false);\r\n          } else if (_type == 1) {\r\n            //invest in existing business\r\n            this.ShowCardInfo(\"\", false);\r\n            GamePlayReferenceManager.Instance.Get_GameplayUIManager().OnExpandButtonClicked_TurnDecision(null, true, CashGiven, false);\r\n          }\r\n        } else {\r\n          console.log(\"is bot, so skipping turn\");\r\n          this.CompleteTurnWithToast(\"\", 1200);\r\n        }\r\n        break;\r\n      case \"7\": //You inherit a business from your Father. Decide the type of business it is, what the name of the business is, whether it is a home-based or brick & mortar business and include it into your game play. Pay a $20,000 transfer fee. If you do not have $20,000 in cash, you cannot have the business.\r\n        console.log(this.BigBusiness[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var CashCost = 20000;\r\n        BigBusinessData = null;\r\n\r\n        if (!this.IsBotTurn) {\r\n          if (_type == 0) {\r\n            //pay amount\r\n            if (_manager.PlayerGameInfo[_playerIndex].Cash >= CashCost) {\r\n              _manager.PlayerGameInfo[_playerIndex].Cash -= CashCost;\r\n              this.ShowCardInfo(\"\", false);\r\n              GamePlayReferenceManager.Instance.Get_GameplayUIManager().StartNewBusiness_BusinessSetup(false, true, 0, false, 0, true, 0, true);\r\n            } else {\r\n              GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"Not enough cash.\", 300, this.isOwner);\r\n            }\r\n          } else if (_type == 1) {\r\n            //skip\r\n            this.CompleteTurnWithToast(\"Skipping...\", 1400);\r\n          }\r\n        } else {\r\n          console.log(\"is bot, so skipping turn\");\r\n          this.CompleteTurnWithToast(\"\", 1200);\r\n        }\r\n        break;\r\n      case \"8\": //double pay day on next pay day\r\n        BigBusinessData = null;\r\n        console.log(this.BigBusiness[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n\r\n        _manager.ToggleDoublePayNextTurn(true);\r\n        this.CompleteTurnWithToast(\"You will receive double profits on next payday.\", 1800);\r\n\r\n        break;\r\n      case \"9\": //You buy a television station and convince every player in the game to market on your station one time. You receive 50% of all the marketing dollars currently on the board. Round to the nearest $1,000 if needed.\r\n        console.log(this.BigBusiness[Index].Description);\r\n        BigBusinessData = null;\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _amount = 0;\r\n        var mode = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode();\r\n\r\n        for (let index = 0; index < _manager.PlayerGameInfo.length; index++) {\r\n          _amount = _amount + _manager.PlayerGameInfo[index].MarketingAmount;\r\n        }\r\n\r\n        _amount = _amount / 2;\r\n        console.log(\"value: \" + _amount);\r\n        _amount = Math.round(_amount / 1000) * 1000;\r\n\r\n        console.log(\"Rounded value: \" + _amount);\r\n\r\n        _manager.PlayerGameInfo[_playerIndex].Cash += _amount;\r\n\r\n        if (mode == 2) {\r\n          var _actorsArray = GamePlayReferenceManager.Instance.Get_MultiplayerController().getPhotonRef().myRoomActorsArray();\r\n          var _data = null;\r\n          for (let index = 0; index < _actorsArray.length; index++) {\r\n            _data = _actorsArray[index].customProperties.PlayerSessionData;\r\n            _data.MarketingAmount = Math.round(_data.MarketingAmount / 2);\r\n            _actorsArray[index].setCustomProperty(\"PlayerSessionData\", _data);\r\n          }\r\n\r\n          console.log(_actorsArray);\r\n        } else {\r\n          for (let index = 0; index < _manager.PlayerGameInfo.length; index++) {\r\n            _manager.PlayerGameInfo[index].MarketingAmount = Math.round(_manager.PlayerGameInfo[index].MarketingAmount / 2);\r\n          }\r\n        }\r\n\r\n        this.CompleteTurnWithToast(\"Cash amount $\" + _amount + \" has successfully added, cash balance becomes $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4000);\r\n\r\n        break;\r\n      case \"10\": //You start an Online University for Entrepreneurs and charge $5,000 per student. Every player in the game must take your class and learn from you. Receive tuition from each player right now.\r\n        console.log(this.BigBusiness[Index].Description);\r\n        BigBusinessData = null;\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _amount = 0;\r\n        var mode = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode();\r\n\r\n        if (mode == 2) {\r\n          //real players\r\n\r\n          var _actorsArray = _manager.PlayerGameInfo;\r\n          for (let index = 0; index < _actorsArray.length; index++) {\r\n            if (_actorsArray[index].IsActive && index != _playerIndex) {\r\n              _amount += 5000;\r\n            }\r\n          }\r\n\r\n          var _data = { Deduct: 5000 };\r\n          GamePlayReferenceManager.Instance.Get_MultiplayerSyncManager().RaiseEvent(21, _data);\r\n          _manager.PlayerGameInfo[_playerIndex].Cash += _amount;\r\n          this.CompleteTurnWithToast(\"Cash amount $\" + _amount + \" has successfully added, cash balance becomes $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4000);\r\n        } else if (mode == 1) {\r\n          var _actorsArray = _manager.PlayerGameInfo;\r\n          for (let index = 0; index < _actorsArray.length; index++) {\r\n            if (index != _playerIndex) {\r\n              if (_actorsArray[index].Cash >= 5000) {\r\n                _actorsArray[index].Cash -= 5000;\r\n              } else if (_actorsArray[index].Cash < 5000) {\r\n                _actorsArray[index].Cash = 0;\r\n              }\r\n              _amount += 5000;\r\n            }\r\n          }\r\n\r\n          _manager.PlayerGameInfo[_playerIndex].Cash += _amount;\r\n          this.CompleteTurnWithToast(\"Cash amount $\" + _amount + \" has successfully added, cash balance becomes $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4000);\r\n        }\r\n        break;\r\n      case \"11\": //roll dice twice, if result is >19 then take all money inside marketing.\r\n        console.log(this.BigBusiness[Index].Description);\r\n        BigBusinessData = null;\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var mode = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode();\r\n\r\n        var Dice1Result = _manager.RollTwoDices();\r\n        var Dice2Result = _manager.RollTwoDices();\r\n\r\n        var TotalResult = Dice1Result + Dice2Result;\r\n\r\n        if (TotalResult >= 19) {\r\n          var _amount = 0;\r\n          for (let index = 0; index < _manager.PlayerGameInfo.length; index++) {\r\n            _amount = _amount + _manager.PlayerGameInfo[index].MarketingAmount;\r\n          }\r\n\r\n          _manager.PlayerGameInfo[_playerIndex].Cash += _amount;\r\n          this.CompleteTurnWithToast(\"Dice 1 Result: \" + Dice1Result + \"\\n\" + \"\\n\" + \"Dice 2 Result: \" + Dice2Result + \"\\n\" + \"\\n\" + \"Total: \" + TotalResult + \"\\n\" + \"\\n\" + \"Amount $\" + _amount + \" has successfully added in your cash from marketing amount on table.\", 4000);\r\n\r\n          if (mode == 2) {\r\n            var _actorsArray = GamePlayReferenceManager.Instance.Get_MultiplayerController().getPhotonRef().myRoomActorsArray();\r\n            var _data = null;\r\n            for (let index = 0; index < _actorsArray.length; index++) {\r\n              _data = _actorsArray[index].customProperties.PlayerSessionData;\r\n              _data.MarketingAmount = 0;\r\n              _actorsArray[index].setCustomProperty(\"PlayerSessionData\", _data);\r\n            }\r\n          } else {\r\n            for (let index = 0; index < _manager.PlayerGameInfo.length; index++) {\r\n              _manager.PlayerGameInfo[index].MarketingAmount = 0;\r\n            }\r\n          }\r\n        } else {\r\n          this.CompleteTurnWithToast(\"Dice 1 Result: \" + Dice1Result + \"\\n\" + \"\\n\" + \"Dice 2 Result: \" + Dice2Result + \"\\n\" + \"\\n\" + \"Total: \" + TotalResult + \"\\n\" + \"\\n\" + \"You ran out of luck, turn will skip now\", 4000);\r\n        }\r\n\r\n        break;\r\n      case \"12\": //You open a Marketing Company. You now collect one dollar for every marketing dollar that is spent or collected in the game (collect from the Bank).\r\n        console.log(this.BigBusiness[Index].Description);\r\n        BigBusinessData = null;\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var mode = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode();\r\n        if (mode == 2) {\r\n          _manager.PlayerGameInfo[_playerIndex].CardFunctionality.HasMarketingCompany = true;\r\n          this.CompleteTurnWithToast(\"From now on, every time a player puts money into a marketing account, you will receive the same amount of money in your account\", 4000);\r\n        } else {\r\n          _manager.PlayerGameInfo[_playerIndex].CardFunctionality.HasMarketingCompany = true;\r\n          this.CompleteTurnWithToast(\"From now on, every time a player puts money into a marketing account, you will receive the same amount of money in your account\", 4000);\r\n        }\r\n        break;\r\n      case \"13\":\r\n        console.log(this.BigBusiness[Index].Description);\r\n        break;\r\n      case \"14\":\r\n        console.log(this.BigBusiness[Index].Description);\r\n        break;\r\n      case \"15\":\r\n        console.log(this.BigBusiness[Index].Description);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n\r\n  MarketingCardFunctionality(_id, _hasTwoScreens = false, _type = 0) {\r\n    var Index = parseInt(_id);\r\n    Index = Index - 1;\r\n\r\n    switch (_id) {\r\n      case \"1\": //lose all your money in marketing account\r\n        console.log(this.Marketing[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _loseAmount = _manager.LoseAllMarketingMoney();\r\n        MarketingData = null;\r\n        if (_loseAmount > 0) this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2400);\r\n        else this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n        break;\r\n      case \"2\": //You put an ad on Facebook for your business. Roll the dice: 1 - If you roll a 6 or lower, you lose all of the money in your marketing account 2 - If you roll a 7 or higher, your ad nets you 800% of the total money currently in your marketing account\r\n        console.log(this.Marketing[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _marketingAmount = _manager.PlayerGameInfo[_playerIndex].MarketingAmount;\r\n        var _diceResult;\r\n        var _multiplier = 800;\r\n        if (_marketingAmount <= 0) {\r\n          this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n          return;\r\n        }\r\n\r\n        if (_hasTwoScreens) {\r\n          _diceResult = _manager.RollTwoDices();\r\n\r\n          MarketingData = { Data: { result: _diceResult } };\r\n\r\n          if (!this.IsBotTurn) {\r\n            if (_diceResult <= 6) {\r\n              this.ShowCardInfo(\"\\n\" + \"\\n\" + \"Dice Roll Result : \" + _diceResult + \"\\n\" + \"\\n\" + \"Total dice result is less than or equal to six, so you will lose all your current marketing amount.\", true);\r\n\r\n              this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Done\";\r\n            } else if (_diceResult >= 7) {\r\n              this.ShowCardInfo(\"\\n\" + \"\\n\" + \"Dice Roll Result : \" + _diceResult + \"\\n\" + \"\\n\" + \"Total dice result is greater than or equal to seven, so you will get 800% profit on current marketing amount.\", true);\r\n\r\n              this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Receive Amount\";\r\n            }\r\n\r\n            this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n          } else {\r\n            this.CardFuntionalityButton();\r\n          }\r\n        } else {\r\n          _diceResult = MarketingData.Data.result;\r\n\r\n          if (_diceResult <= 6) {\r\n            var _loseAmount = _manager.LoseAllMarketingMoney();\r\n\r\n            if (_loseAmount > 0) this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2400);\r\n            else this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n\r\n            MarketingData = null;\r\n          } else if (_diceResult >= 7) {\r\n            var _result = (_marketingAmount * _multiplier) / 100 + _marketingAmount;\r\n            _manager.PlayerGameInfo[_playerIndex].MarketingAmount = 0;\r\n            _manager.PlayerGameInfo[_playerIndex].Cash += _result;\r\n\r\n            this.CompleteTurnWithToast(\"Total profit of $\" + _result + \" has been added to your cash amount.\", 2400);\r\n            MarketingData = null;\r\n          }\r\n        }\r\n        break;\r\n      case \"3\": //Your ad contains false claims and result in a government investigation. You lose your entire Marketing Account, plus pay lawyer fees of $3,000 per business to the bank. If you have a lawyer, you do not have to pay the extra $3,000 in fees, per business.\r\n        console.log(this.Marketing[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _marketingAmount = _manager.PlayerGameInfo[_playerIndex].MarketingAmount;\r\n        var _lawyerStatus = _manager.PlayerGameInfo[_playerIndex].LawyerStatus;\r\n        var _businessAmount = _manager.PlayerGameInfo[_playerIndex].HomeBasedAmount + _manager.PlayerGameInfo[_playerIndex].BrickAndMortarAmount;\r\n        var _hasMarketingAmount = false;\r\n        var _multiplier = 3000;\r\n        var _totalAmount = _multiplier * _businessAmount;\r\n        if (_hasTwoScreens) {\r\n          if (_marketingAmount > 0) _hasMarketingAmount = true;\r\n\r\n          if (_lawyerStatus) _totalAmount = 0;\r\n\r\n          MarketingData = { Data: { result: _totalAmount } };\r\n\r\n          if (!this.IsBotTurn) {\r\n            this.ShowCardInfo(\"Marketing Amount : $\" + _marketingAmount + \"\\n\" + \"\\n\" + \"Lawyer Hired : \" + _lawyerStatus + \"\\n\" + \"\\n\" + \"Total Number of business : \" + _businessAmount + \"\\n\" + \"\\n\" + \"Fees : \" + _businessAmount + \" * \" + _multiplier + \" = $\" + _totalAmount, true);\r\n\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Done\";\r\n\r\n            this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n          } else {\r\n            this.CardFuntionalityButton();\r\n          }\r\n        } else {\r\n          _totalAmount = MarketingData.Data.result;\r\n          _manager.PlayerGameInfo[_playerIndex].MarketingAmount = 0;\r\n\r\n          if (_manager.PlayerGameInfo[_playerIndex].Cash >= _totalAmount) {\r\n            if (_lawyerStatus) {\r\n              _manager.PlayerGameInfo[_playerIndex].LawyerStatus = false;\r\n              this.CompleteTurnWithToast(\"you had hired lawyer, you only lost your marketing amount of $\" + _marketingAmount, 4200);\r\n              MarketingData = null;\r\n            } else {\r\n              _manager.PlayerGameInfo[_playerIndex].Cash -= _totalAmount;\r\n              this.CompleteTurnWithToast(\"you have not hired any lawyer, bill $\" + _totalAmount + \" was successfully paid along with marketing amount, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n              MarketingData = null;\r\n            }\r\n          } else {\r\n            console.log(\"not enough cash\");\r\n            if (!this.IsBotTurn) {\r\n              GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n            } else {\r\n              console.log(\"its bot and has no cash,skipping\");\r\n              MarketingData = null;\r\n              this.CompleteTurnWithToast(\"\", 1200);\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"4\": //Your Marketing Account triples, but you must leave it in the account.\r\n        console.log(this.Marketing[Index].Description);\r\n        MarketingData = null;\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _marketAmount = _manager.PlayerGameInfo[_playerIndex].MarketingAmount;\r\n        var _multiplier = 3;\r\n        var _increaseAmount = _manager.MultiplyMarketingMoney(_multiplier);\r\n\r\n        if (_increaseAmount > 0) {\r\n          this.CompleteTurnWithToast(\"Marketing Amount: $\" + _marketAmount + \"\\n\" + \"\\n\" + \"Total: \" + _marketAmount + \" * \" + _multiplier + \" = \" + _increaseAmount + \"\\n\" + \"\\n\" + \"\\n\" + \"your marketing amount has been sucessfully increase to $\" + _increaseAmount, 3600);\r\n        } else {\r\n          this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n        }\r\n        break;\r\n      case \"5\": //You hire a Marketing Firm to market your business but it yields no results. You lose your entire marketing account to the Bank. Plus pay $5,000 for their services.\r\n        console.log(this.Marketing[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var bill = 5000;\r\n        MarketingData = null;\r\n\r\n        if (_manager.PlayerGameInfo[_playerIndex].Cash >= bill) {\r\n          var _loseAmount = _manager.LoseAllMarketingMoney();\r\n          _manager.PlayerGameInfo[_playerIndex].Cash -= bill;\r\n          this.CompleteTurnWithToast(\"Fees $\" + bill + \" was successfully paid along with marketing amount, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n          MarketingData = null;\r\n        } else {\r\n          console.log(\"not enough cash\");\r\n          if (!this.IsBotTurn) {\r\n            GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n          } else {\r\n            console.log(\"its bot and has no cash,skipping\");\r\n            MarketingData = null;\r\n            this.CompleteTurnWithToast(\"\", 1200);\r\n          }\r\n        }\r\n        break;\r\n      case \"6\": //You begin a new marketing campaign. Roll 1 die. If it is an even number, your campaign is successful and you receive all of the money in your marketing account back plus 500%. If it is an odd number you lose all of the money in your marketing account.\r\n        console.log(this.Marketing[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _marketingAmount = _manager.PlayerGameInfo[_playerIndex].MarketingAmount;\r\n        var _diceResult;\r\n        var _multiplier = 500;\r\n        var isEven = false;\r\n\r\n        if (_marketingAmount <= 0) {\r\n          this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n          return;\r\n        }\r\n\r\n        if (_hasTwoScreens) {\r\n          _diceResult = _manager.RollOneDice();\r\n\r\n          if (_diceResult % 2 == 0) isEven = true;\r\n\r\n          MarketingData = { Data: { result: _diceResult, IsEven: isEven } };\r\n\r\n          if (!this.IsBotTurn) {\r\n            if (_diceResult % 2 == 1) {\r\n              isEven = false;\r\n              this.ShowCardInfo(\"\\n\" + \"Dice Roll Result : \" + _diceResult + \"\\n\" + \"\\n\" + \"Total dice result is odd, so you will lose all your current marketing amount.\", true);\r\n\r\n              this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Done\";\r\n            } else if (_diceResult % 2 == 0) {\r\n              isEven = true;\r\n              this.ShowCardInfo(\"\\n\" + \"\\n\" + \"Dice Roll Result : \" + _diceResult + \"\\n\" + \"\\n\" + \"Total dice result is even, so you will get 500% profit on current marketing amount.\", true);\r\n\r\n              this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Receive Amount\";\r\n            }\r\n\r\n            this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n          } else {\r\n            this.CardFuntionalityButton();\r\n          }\r\n        } else {\r\n          _diceResult = MarketingData.Data.result;\r\n          isEven = MarketingData.Data.IsEven;\r\n\r\n          if (!isEven) {\r\n            var _loseAmount = _manager.LoseAllMarketingMoney();\r\n\r\n            if (_loseAmount > 0) this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2400);\r\n            else this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n\r\n            MarketingData = null;\r\n          } else if (isEven) {\r\n            var _result = (_marketingAmount * _multiplier) / 100 + _marketingAmount;\r\n\r\n            _manager.PlayerGameInfo[_playerIndex].MarketingAmount = 0;\r\n            _manager.PlayerGameInfo[_playerIndex].Cash += _result;\r\n\r\n            this.CompleteTurnWithToast(\"Total profit of $\" + _result + \" has been added to your cash amount.\", 2400);\r\n            MarketingData = null;\r\n          }\r\n        }\r\n        break;\r\n      case \"7\": //Your Social Media ad goes viral! You receive all of your Marketing Budget back, plus $5,000 profit for each business you have.\r\n        console.log(this.Marketing[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _marketAmount = _manager.PlayerGameInfo[_playerIndex].MarketingAmount;\r\n        var _HBAmount = _manager.PlayerGameInfo[_playerIndex].HomeBasedAmount;\r\n        var _BMAmount = _manager.PlayerGameInfo[_playerIndex].BrickAndMortarAmount;\r\n        var _locations = _manager.PlayerGameInfo[_playerIndex].TotalLocationsAmount;\r\n        var _TotalBusinesses = _HBAmount + _BMAmount + _locations;\r\n        var _profit = 5000;\r\n        var _TotalProfit = _TotalBusinesses * _profit + _marketAmount;\r\n\r\n        if (_hasTwoScreens) {\r\n          MarketingData = { Data: { result: _TotalProfit } };\r\n\r\n          if (!this.IsBotTurn) {\r\n            isEven = false;\r\n            this.ShowCardInfo(\"\\n\" + \"Total Businesses (with locations) : \" + _TotalBusinesses + \"\\n\" + \"\\n\" + \"Marketing Amount : \" + _marketAmount + \"\\n\" + \"\\n\" + \"Profit on each Business : \" + _TotalBusinesses + \" * 5000 + \" + _marketAmount + \" = \" + _TotalProfit, true);\r\n\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Receive\";\r\n\r\n            this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n          } else {\r\n            this.CardFuntionalityButton();\r\n          }\r\n        } else {\r\n          //_TotalProfit = MarketingData.Data.result;\r\n\r\n          _manager.PlayerGameInfo[_playerIndex].Cash += _TotalProfit;\r\n          _manager.PlayerGameInfo[_playerIndex].MarketingAmount = 0;\r\n\r\n          this.CompleteTurnWithToast(\"Total profit of $\" + _TotalProfit + \" has been added to your cash amount.\", 2400);\r\n          MarketingData = null;\r\n        }\r\n        break;\r\n      case \"8\": //lose all your money in marketing account\r\n        console.log(this.Marketing[Index].Description);\r\n        MarketingData = null;\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _loseAmount = _manager.LoseAllMarketingMoney();\r\n\r\n        if (_loseAmount > 0) this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2400);\r\n        else this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n        break;\r\n      case \"9\": //lose all your money in marketing account\r\n        console.log(this.Marketing[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _loseAmount = _manager.LoseAllMarketingMoney();\r\n        MarketingData = null;\r\n        if (_loseAmount > 0) this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2400);\r\n        else this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n        break;\r\n      case \"10\": //Receive all of your Marketing Budget back, plus 700% profit.\r\n        console.log(this.Marketing[Index].Description);\r\n        MarketingData = null;\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _marketAmount = _manager.PlayerGameInfo[_playerIndex].MarketingAmount;\r\n        var _profit = 700;\r\n        var _amount = _manager.GetMarketingMoney(_profit);\r\n\r\n        if (_amount > 0) {\r\n          this.CompleteTurnWithToast(\r\n            \"Marketing Amount: $\" +\r\n              _marketAmount +\r\n              \"\\n\" +\r\n              \"\\n\" +\r\n              \"Total: \" +\r\n              _marketAmount +\r\n              \" + (\" +\r\n              _marketAmount +\r\n              \"*\" +\r\n              _profit +\r\n              \" )/100\" +\r\n              \" = \" +\r\n              _amount +\r\n              \"\\n\" +\r\n              \"\\n\" +\r\n              \"\\n\" +\r\n              \"your cash amount has been sucessfully increase by $\" +\r\n              _amount +\r\n              \", total cash becomes $\" +\r\n              _manager.PlayerGameInfo[_playerIndex].Cash,\r\n            4000\r\n          );\r\n        } else {\r\n          this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2400);\r\n        }\r\n        break;\r\n      case \"11\": //You can hired a media specialist to do your social media marketing for you. They increase your business' reach. You receive double your income on your next Pay Day.\r\n        console.log(this.Marketing[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        MarketingData = null;\r\n        _manager.ToggleDoublePayNextTurn(true);\r\n        this.CompleteTurnWithToast(\"You will receive double profits on next payday.\", 2400);\r\n        break;\r\n      case \"12\":\r\n        console.log(this.Marketing[Index].Description);\r\n        break;\r\n      case \"13\":\r\n        console.log(this.Marketing[Index].Description);\r\n        break;\r\n      case \"14\": //lose all your money in marketing account\r\n        console.log(this.Marketing[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _loseAmount = _manager.LoseAllMarketingMoney();\r\n        MarketingData = null;\r\n        if (_loseAmount > 0) this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2100);\r\n        else this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2100);\r\n        break;\r\n      case \"15\":\r\n        console.log(this.Marketing[Index].Description);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n\r\n  LossesCardFunctionality(_id, _hasTwoScreens = false, _type = 0) {\r\n    var Index = parseInt(_id);\r\n    Index = Index - 1;\r\n\r\n    switch (_id) {\r\n      case \"1\": //lose next turn\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        _manager.ToggleSkipNextTurn(true);\r\n        LossesData = null;\r\n        this.CompleteTurnWithToast(\"You will lose your next turn.\", 2400);\r\n        break;\r\n      case \"2\": //Roll 2 dice, multiply by $5,000 and pay it to the Bank. If you have a lawyer you lose 50% of the total bill currently owed.\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var DiceResult;\r\n        var CashMulitplier;\r\n        var TotalResult;\r\n        var _hiredLawyer;\r\n\r\n        if (_hasTwoScreens) {\r\n          DiceResult = _manager.RollTwoDices();\r\n          CashMulitplier = 5000;\r\n          TotalResult = DiceResult * CashMulitplier;\r\n          _hiredLawyer = _manager.PlayerGameInfo[_playerIndex].LawyerStatus;\r\n\r\n          LossesData = { Data: { result: TotalResult, lawyer: _hiredLawyer } };\r\n\r\n          if (!this.IsBotTurn) {\r\n            this.ShowCardInfo(\"\\n\" + \"\\n\" + \"Dice Roll Result : \" + DiceResult + \"\\n\" + \"\\n\" + \"Total Bill Calculated : \" + DiceResult + \" * \" + CashMulitplier + \" = $\" + TotalResult, true);\r\n\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n            this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n          } else {\r\n            this.CardFuntionalityButton();\r\n          }\r\n        } else {\r\n          console.log(LossesData);\r\n          TotalResult = LossesData.Data.result;\r\n          _hiredLawyer = LossesData.Data.lawyer;\r\n\r\n          if (_hiredLawyer) TotalResult = TotalResult / 2;\r\n\r\n          if (_manager.PlayerGameInfo[_playerIndex].Cash >= TotalResult) {\r\n            if (_hiredLawyer) {\r\n              _manager.PlayerGameInfo[_playerIndex].Cash -= TotalResult;\r\n              _manager.PlayerGameInfo[_playerIndex].LawyerStatus = false;\r\n              this.CompleteTurnWithToast(\"you had hired lawyer, half bill $\" + TotalResult + \" was successfully paid, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n              LossesData = null;\r\n            } else {\r\n              _manager.PlayerGameInfo[_playerIndex].Cash -= TotalResult;\r\n              this.CompleteTurnWithToast(\"you have not hired any lawyer, bill $\" + TotalResult + \" was successfully paid, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n              LossesData = null;\r\n            }\r\n          } else {\r\n            console.log(\"not enough cash\");\r\n            if (!this.IsBotTurn) {\r\n              GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n            } else {\r\n              console.log(\"its bot and has no cash,skipping\");\r\n              LossesData = null;\r\n              this.CompleteTurnWithToast(\"\", 1200);\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"3\": //lose all your business profits on next Pay Day.\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        LossesData = null;\r\n        _manager.ToggleSkipPayDay_Whole(true);\r\n        this.CompleteTurnWithToast(\"you will lose all your business profits on next Pay Day.\", 2400);\r\n        break;\r\n      case \"4\": //Yearly business insurance premium is due. Pay $2,000 to the Bank for each Home-Based business, $5,000 for each Brick & Mortar business.\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var homeBasedBusiness = _manager.PlayerGameInfo[_playerIndex].HomeBasedAmount;\r\n        var brickAndMortarBusiness = _manager.PlayerGameInfo[_playerIndex].BrickAndMortarAmount;\r\n        var homeMultiplier = 2000;\r\n        var brickMuliplier = 5000;\r\n        var totalAmount = homeBasedBusiness * homeMultiplier + brickAndMortarBusiness * brickMuliplier;\r\n        if (_hasTwoScreens) {\r\n          LossesData = { Data: { result: totalAmount } };\r\n          if (!this.IsBotTurn) {\r\n            this.ShowCardInfo(\r\n              \"\\n\" +\r\n                \"Home Based Amount : \" +\r\n                homeBasedBusiness +\r\n                \" * $\" +\r\n                homeMultiplier +\r\n                \" = $\" +\r\n                homeBasedBusiness * homeMultiplier +\r\n                \"\\n\" +\r\n                \"\\n\" +\r\n                \"Brick & Mortar Amount : \" +\r\n                brickAndMortarBusiness +\r\n                \" * $\" +\r\n                brickMuliplier +\r\n                \" = $\" +\r\n                brickAndMortarBusiness * brickMuliplier +\r\n                \"\\n\" +\r\n                \"\\n\" +\r\n                \"Total Amount : \" +\r\n                homeBasedBusiness * homeMultiplier +\r\n                \" + \" +\r\n                brickAndMortarBusiness * brickMuliplier +\r\n                \" = $\" +\r\n                totalAmount,\r\n              true\r\n            );\r\n\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n            this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n          } else {\r\n            this.CardFuntionalityButton();\r\n          }\r\n        } else {\r\n          totalAmount = LossesData.Data.result;\r\n          if (_manager.PlayerGameInfo[_playerIndex].Cash >= totalAmount) {\r\n            _manager.PlayerGameInfo[_playerIndex].Cash -= totalAmount;\r\n            this.CompleteTurnWithToast(\"Total amount $\" + totalAmount + \" was successfully paid, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n            LossesData = null;\r\n          } else {\r\n            console.log(\"not enough cash\");\r\n            if (!this.IsBotTurn) {\r\n              GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n            } else {\r\n              LossesData = null;\r\n              console.log(\"its bot and has no money, skipping\");\r\n              this.CompleteTurnWithToast(\"\", 1200);\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"5\": //Your employee claims you sexually harassed them, but you did not. You can either;  1 - Settle out of court and pay them $50,000. 2 - Take your chances in court. Roll 2 dice and pay $10,000 times the number rolled.\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _courtSettlementFees = 50000;\r\n        var DiceResult;\r\n        var CashMulitplier = 10000;\r\n        var totalAmount;\r\n\r\n        if (_hasTwoScreens) {\r\n          if (_type == 0) {\r\n            //first button\r\n\r\n            LossesData = { Data: { result: _courtSettlementFees, Type: _type } };\r\n            if (!this.IsBotTurn) {\r\n              this.ShowCardInfo(\"\\n\" + \"Payable amount : $\" + _courtSettlementFees, true);\r\n\r\n              this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n              this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n            } else {\r\n              this.CardFuntionalityButton();\r\n            }\r\n          } else if (_type == 1) {\r\n            //2nd button\r\n\r\n            DiceResult = _manager.RollTwoDices();\r\n            totalAmount = DiceResult * CashMulitplier;\r\n            LossesData = { Data: { result: DiceResult, TotalAmount: totalAmount, Type: _type } };\r\n            if (!this.IsBotTurn) {\r\n              this.ShowCardInfo(\"\\n\" + \"Dice Result : \" + DiceResult + \"\\n\" + \"\\n\" + \"Total Amount : \" + DiceResult + \" * \" + CashMulitplier + \" = $\" + totalAmount, true);\r\n\r\n              this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n              this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n            } else {\r\n              this.CardFuntionalityButton();\r\n            }\r\n          }\r\n        } else {\r\n          var tempType = LossesData.Data.Type;\r\n          if (tempType == 0) {\r\n            _courtSettlementFees = LossesData.Data.result;\r\n            if (_manager.PlayerGameInfo[_playerIndex].Cash >= _courtSettlementFees) {\r\n              _manager.PlayerGameInfo[_playerIndex].Cash -= _courtSettlementFees;\r\n              this.CompleteTurnWithToast(\"Total amount $\" + _courtSettlementFees + \" was successfully paid, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n              LossesData = null;\r\n            } else {\r\n              console.log(\"not enough cash\");\r\n              if (!this.IsBotTurn) {\r\n                GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n              } else {\r\n                LossesData = null;\r\n                console.log(\"it was bot and had not enough money\");\r\n                this.CompleteTurnWithToast(\"\", 1200);\r\n              }\r\n            }\r\n          } else if (tempType == 1) {\r\n            DiceResult = LossesData.Data.result;\r\n            totalAmount = LossesData.Data.TotalAmount;\r\n            if (_manager.PlayerGameInfo[_playerIndex].Cash >= totalAmount) {\r\n              _manager.PlayerGameInfo[_playerIndex].Cash -= totalAmount;\r\n              this.CompleteTurnWithToast(\"Total amount $\" + totalAmount + \" was successfully paid, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n              LossesData = null;\r\n            } else {\r\n              console.log(\"not enough cash\");\r\n              if (!this.IsBotTurn) {\r\n                GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n              } else {\r\n                console.log(\"it was bot and had not enough money\");\r\n                LossesData = null;\r\n                this.CompleteTurnWithToast(\"\", 1200);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"6\": // If Business #1 is Home Based, pay a $5,000 Insurance Deductible; if Brick & Mortar $10,000 deductible.\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n\r\n        var _businessType = parseInt(_manager.PlayerGameInfo[_playerIndex].NoOfBusiness[0].BusinessType);\r\n        if (_businessType == 1) {\r\n          // first business was home based\r\n          if (_manager.PlayerGameInfo[_playerIndex].Cash >= 5000) {\r\n            _manager.PlayerGameInfo[_playerIndex].Cash -= 5000;\r\n            this.CompleteTurnWithToast(\"You payed $5000 insurance on your first home based business, remaining cash is $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n          } else {\r\n            if (!this.IsBotTurn) {\r\n              GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n            } else {\r\n              LossesData = null;\r\n              console.log(\"it was bot and had not enough money\");\r\n              this.CompleteTurnWithToast(\"\", 1200);\r\n            }\r\n          }\r\n        } else if (_businessType == 2) {\r\n          //first busioness was brick & mortar\r\n          if (_manager.PlayerGameInfo[_playerIndex].Cash >= 10000) {\r\n            _manager.PlayerGameInfo[_playerIndex].Cash -= 10000;\r\n            this.CompleteTurnWithToast(\"You payed $10000 insurance on your first brick & mortar business, remaining cash is $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n          } else {\r\n            if (!this.IsBotTurn) {\r\n              GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n            } else {\r\n              LossesData = null;\r\n              console.log(\"it was bot and had not enough money\");\r\n              this.CompleteTurnWithToast(\"\", 1200);\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"7\": //lose your next Pay Day for all of your home-based businesses.\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        LossesData = null;\r\n        _manager.ToggleSkipPayDay_HomeBased(true);\r\n        this.CompleteTurnWithToast(\"you will lose your next Pay Day for all of your home-based businesses.\", 2400);\r\n\r\n        break;\r\n      case \"8\": //You are fined 50% of your current liquid cash. If you have a lawyer, your fine is reduced to 20% of your current liquid cash.\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var TotalResult;\r\n        var _hiredLawyer;\r\n\r\n        if (_hasTwoScreens) {\r\n          TotalResult = _manager.PlayerGameInfo[_playerIndex].Cash;\r\n          _hiredLawyer = _manager.PlayerGameInfo[_playerIndex].LawyerStatus;\r\n\r\n          LossesData = { Data: { result: TotalResult, lawyer: _hiredLawyer } };\r\n\r\n          if (!this.IsBotTurn) {\r\n            this.ShowCardInfo(\"\\n\" + \"\\n\" + \"Total Cash : $\" + TotalResult + \"\\n\" + \"\\n\" + \"50% of Total Cash : $\" + TotalResult / 2, true);\r\n\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n            this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n          } else {\r\n            this.CardFuntionalityButton();\r\n          }\r\n        } else {\r\n          console.log(LossesData);\r\n          TotalResult = LossesData.Data.result;\r\n          _hiredLawyer = LossesData.Data.lawyer;\r\n\r\n          if (_hiredLawyer) TotalResult = (TotalResult * 20) / 100;\r\n          else TotalResult = (TotalResult * 50) / 100;\r\n\r\n          if (_manager.PlayerGameInfo[_playerIndex].Cash >= TotalResult) {\r\n            if (_hiredLawyer) {\r\n              _manager.PlayerGameInfo[_playerIndex].Cash -= TotalResult;\r\n              _manager.PlayerGameInfo[_playerIndex].LawyerStatus = false;\r\n              this.CompleteTurnWithToast(\"you had hired lawyer, reduced fine $\" + TotalResult + \" was successfully paid, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n              LossesData = null;\r\n            } else {\r\n              _manager.PlayerGameInfo[_playerIndex].Cash -= TotalResult;\r\n              this.CompleteTurnWithToast(\"you have not hired any lawyer, fine $\" + TotalResult + \" was successfully paid, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n              LossesData = null;\r\n            }\r\n          } else {\r\n            console.log(\"not enough cash\");\r\n            if (!this.IsBotTurn) {\r\n              GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n            } else {\r\n              console.log(\"it was bot and had no money, skipping\");\r\n              this.CompleteTurnWithToast(\"\", 800);\r\n              LossesData = null;\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"9\": //A customer is injured at one of your business locations. You can either; 1 - Settle out of court and pay them $25,000 , 2 - Take your chances in court. Roll 2 dice and pay $5,000 times the number rolled.\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _courtSettlementFees = 25000;\r\n        var DiceResult;\r\n        var CashMulitplier = 5000;\r\n        var totalAmount;\r\n\r\n        if (_hasTwoScreens) {\r\n          if (_type == 0) {\r\n            //first button\r\n\r\n            LossesData = { Data: { result: _courtSettlementFees, Type: _type } };\r\n            if (!this.IsBotTurn) {\r\n              this.ShowCardInfo(\"\\n\" + \"Payable amount : $\" + _courtSettlementFees, true);\r\n\r\n              this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n              this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n            } else {\r\n              this.CardFuntionalityButton();\r\n            }\r\n          } else if (_type == 1) {\r\n            //2nd button\r\n\r\n            DiceResult = _manager.RollTwoDices();\r\n            totalAmount = DiceResult * CashMulitplier;\r\n            LossesData = { Data: { result: DiceResult, TotalAmount: totalAmount, Type: _type } };\r\n            if (!this.IsBotTurn) {\r\n              this.ShowCardInfo(\"\\n\" + \"Dice Result : \" + DiceResult + \"\\n\" + \"\\n\" + \"Total Amount : \" + DiceResult + \" * \" + CashMulitplier + \" = $\" + totalAmount, true);\r\n\r\n              this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n              this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n            } else {\r\n              this.CardFuntionalityButton();\r\n            }\r\n          }\r\n        } else {\r\n          var tempType = LossesData.Data.Type;\r\n          if (tempType == 0) {\r\n            _courtSettlementFees = LossesData.Data.result;\r\n            if (_manager.PlayerGameInfo[_playerIndex].Cash >= _courtSettlementFees) {\r\n              _manager.PlayerGameInfo[_playerIndex].Cash -= _courtSettlementFees;\r\n              this.CompleteTurnWithToast(\"Total amount $\" + _courtSettlementFees + \" was successfully paid, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n              LossesData = null;\r\n            } else {\r\n              console.log(\"not enough cash\");\r\n              if (!this.IsBotTurn) {\r\n                GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n              } else {\r\n                LossesData = null;\r\n                console.log(\"it was bot and had not enough money\");\r\n                this.CompleteTurnWithToast(\"\", 1200);\r\n              }\r\n            }\r\n          } else if (tempType == 1) {\r\n            DiceResult = LossesData.Data.result;\r\n            totalAmount = LossesData.Data.TotalAmount;\r\n            if (_manager.PlayerGameInfo[_playerIndex].Cash >= totalAmount) {\r\n              _manager.PlayerGameInfo[_playerIndex].Cash -= totalAmount;\r\n              this.CompleteTurnWithToast(\"Total amount $\" + totalAmount + \" was successfully paid, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n              LossesData = null;\r\n            } else {\r\n              console.log(\"not enough cash\");\r\n              if (!this.IsBotTurn) {\r\n                GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n              } else {\r\n                console.log(\"it was bot and had not enough money\");\r\n                LossesData = null;\r\n                this.CompleteTurnWithToast(\"\", 1200);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"10\": //Your computer has been hacked! You catch it in time, but you must buy more security for your business records. Pay $20,000 to the Bank.\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var bill = 20000;\r\n        if (_manager.PlayerGameInfo[_playerIndex].Cash >= bill) {\r\n          _manager.PlayerGameInfo[_playerIndex].Cash -= bill;\r\n          this.CompleteTurnWithToast(\"Total amount $\" + bill + \" was successfully paid, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n          LossesData = null;\r\n        } else {\r\n          console.log(\"not enough cash\");\r\n          if (!this.IsBotTurn) {\r\n            GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n          } else {\r\n            console.log(\"it was bot and had not enough money\");\r\n            LossesData = null;\r\n            this.CompleteTurnWithToast(\"\", 1200);\r\n          }\r\n        }\r\n        break;\r\n      case \"11\": //Mold is discovered in all the buildings of your Brick & Mortar businesses. Roll 2 die and multiply by $2,000. Pay that amount to clean the building of EACH of your Brick & Mortar businesses.\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _TotalBM = _manager.PlayerGameInfo[_playerIndex].BrickAndMortarAmount;\r\n        var _TotalBMLocations = _manager.PlayerGameInfo[_playerIndex].TotalLocationsAmount;\r\n        var DiceResult;\r\n        var CashMulitplier = 2000;\r\n        var totalAmount;\r\n        if (_TotalBM <= 0) {\r\n          this.CompleteTurnWithToast(\"You do not own any Brick & Mortar business, Skipping turn.\", 2800);\r\n          return;\r\n        }\r\n\r\n        if (_hasTwoScreens) {\r\n          DiceResult = _manager.RollTwoDices();\r\n          totalAmount = DiceResult * CashMulitplier;\r\n          LossesData = { Data: { Dice: DiceResult, Total: totalAmount } };\r\n          if (!this.IsBotTurn) {\r\n            this.ShowCardInfo(\"\\n\" + \"Dice Result : \" + DiceResult + \"\\n\" + \"\\n\" + \"Total Brick & Mortar Business (with Locations) : \" + (_TotalBM + _TotalBMLocations) + \"\\n\" + \"\\n\" + \"Payable amount : \" + DiceResult + \"*\" + CashMulitplier + \"=$\" + totalAmount, true);\r\n\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n            this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n          } else {\r\n            this.CardFuntionalityButton();\r\n          }\r\n        } else {\r\n          DiceResult = LossesData.Data.Dice;\r\n          totalAmount = LossesData.Data.Total;\r\n\r\n          if (_manager.PlayerGameInfo[_playerIndex].Cash >= totalAmount) {\r\n            _manager.PlayerGameInfo[_playerIndex].Cash -= totalAmount;\r\n            this.CompleteTurnWithToast(\"You payed $\" + totalAmount + \" to clean mold on the building of EACH of your Brick & Mortar businesses, remaining cash is $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n          } else {\r\n            if (!this.IsBotTurn) {\r\n              GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n            } else {\r\n              LossesData = null;\r\n              console.log(\"it was bot and had not enough money\");\r\n              this.CompleteTurnWithToast(\"\", 1200);\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"12\": //It is March 15th and business Tax Returns are due. Roll the dice for each of your businesses; 1 - For each home-based business, pay $1,000 times the amounts rolled 2 - For each brick & mortar business, pay $3,000 times the amounts rolled\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _TotalBM = _manager.PlayerGameInfo[_playerIndex].BrickAndMortarAmount;\r\n        var _TotalBMLocations = _manager.PlayerGameInfo[_playerIndex].TotalLocationsAmount;\r\n        var _TotalHB = _manager.PlayerGameInfo[_playerIndex].HomeBasedAmount;\r\n        var DiceResult;\r\n        var CashMulitplier1 = 1000;\r\n        var CashMulitplier2 = 3000;\r\n        var totalAmount;\r\n\r\n        if (_hasTwoScreens) {\r\n          DiceResult = _manager.RollOneDice();\r\n          totalAmount = DiceResult * CashMulitplier1 * _TotalHB + DiceResult * CashMulitplier2 * (_TotalBM + _TotalBMLocations);\r\n          LossesData = { Data: { Dice: DiceResult, Total: totalAmount } };\r\n          if (!this.IsBotTurn) {\r\n            this.ShowCardInfo(\r\n              \"Dice Result : \" +\r\n                DiceResult +\r\n                \"\\n\" +\r\n                \"\\n\" +\r\n                \"Total Brick & Mortar Business (with Locations) : \" +\r\n                (_TotalBM + _TotalBMLocations) +\r\n                \"\\n\" +\r\n                \"\\n\" +\r\n                \"Total Home Based Business : \" +\r\n                _TotalHB +\r\n                \"\\n\" +\r\n                \"\\n\" +\r\n                \"Payable amount : \" +\r\n                DiceResult +\r\n                \"*\" +\r\n                CashMulitplier1 +\r\n                \"*\" +\r\n                _TotalHB +\r\n                \"+\" +\r\n                DiceResult +\r\n                \"*\" +\r\n                CashMulitplier2 +\r\n                \"*\" +\r\n                (_TotalBM + _TotalBMLocations) +\r\n                \"=$\" +\r\n                totalAmount,\r\n              true\r\n            );\r\n\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n            this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n          } else {\r\n            this.CardFuntionalityButton();\r\n          }\r\n        } else {\r\n          DiceResult = LossesData.Data.Dice;\r\n          totalAmount = LossesData.Data.Total;\r\n\r\n          if (_manager.PlayerGameInfo[_playerIndex].Cash >= totalAmount) {\r\n            _manager.PlayerGameInfo[_playerIndex].Cash -= totalAmount;\r\n            this.CompleteTurnWithToast(\"You payed $\" + totalAmount + \" tax on your businesses, remaining cash is $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n          } else {\r\n            if (!this.IsBotTurn) {\r\n              GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n            } else {\r\n              LossesData = null;\r\n              console.log(\"it was bot and had not enough money\");\r\n              this.CompleteTurnWithToast(\"\", 1200);\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"13\": //You make a business deal with a friend and soon after, they are arrested for fraud. You are investigated as well and your brand takes a hit. If you have a lawyer, pay $15,000 in legal fees. If you do not have a lawyer, pay $40,000 in court fees plus loose half your income on the next payday\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _lawyerStatus = _manager.PlayerGameInfo[_playerIndex].LawyerStatus;\r\n        var _fine = 40000;\r\n        if (_hasTwoScreens) {\r\n          if (_lawyerStatus) {\r\n            _fine = 15000;\r\n          }\r\n          LossesData = { Data: { Fine: _fine } };\r\n          if (!this.IsBotTurn) {\r\n            this.ShowCardInfo(\"\\n\" + \"Lawyer Status : \" + _lawyerStatus + \"\\n\" + \"\\n\" + \"Payable amount : $\" + _fine, true);\r\n\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n            this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n          } else {\r\n            this.CardFuntionalityButton();\r\n          }\r\n        } else {\r\n          _fine = LossesData.Data.Fine;\r\n          if (_manager.PlayerGameInfo[_playerIndex].Cash >= _fine) {\r\n            _manager.PlayerGameInfo[_playerIndex].Cash -= _fine;\r\n\r\n            if (_lawyerStatus) {\r\n              _manager.PlayerGameInfo[_playerIndex].LawyerStatus = false;\r\n              this.CompleteTurnWithToast(\"You payed $\" + _fine + \" fine, remaining cash is $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n            } else {\r\n              _manager.ToggleHalfPayNextTurn(true);\r\n              this.CompleteTurnWithToast(\"You payed $\" + _fine + \" fine, you will also lose half profit on next payday, remaining cash is $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n            }\r\n          } else {\r\n            if (!this.IsBotTurn) {\r\n              GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n            } else {\r\n              LossesData = null;\r\n              console.log(\"it was bot and had not enough money\");\r\n              this.CompleteTurnWithToast(\"\", 1200);\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"14\": //You have not been taking care of your health and you become too ill to work. You lose half of your income on your next Payday.\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        LossesData = null;\r\n        _manager.ToggleHalfPayNextTurn(true);\r\n        this.CompleteTurnWithToast(\"You will receive half profits on next payday.\", 2400);\r\n        break;\r\n      case \"15\": //You make a comment on Social Media that is going viral in a bad way. All of your businesses suffer because of it. You lose half your income on the next two Paydays. If you have a lawyer, lose half your income on only one Payday\r\n        console.log(this.Losses[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _lawyerStatus = _manager.PlayerGameInfo[_playerIndex].LawyerStatus;\r\n        if (_lawyerStatus) {\r\n          _manager.PlayerGameInfo[_playerIndex].LawyerStatus = false;\r\n          LossesData = null;\r\n          _manager.ToggleHalfPayNextTurn(true);\r\n          this.CompleteTurnWithToast(\"You will receive half profits on next payday.\", 2400);\r\n        } else {\r\n          LossesData = null;\r\n          _manager.PlayerGameInfo[_playerIndex].CardFunctionality.NextTurnHalfPayDayCounter = 1;\r\n          _manager.ToggleHalfPayNextTurn(true);\r\n          this.CompleteTurnWithToast(\"You will receive half profits on next two paydays.\", 2400);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n\r\n  WildCardFunctionality(_id, _hasTwoScreens = false, _type = 0) {\r\n    var Index = parseInt(_id);\r\n    Index = Index - 1;\r\n\r\n    switch (_id) {\r\n      case \"1\": //doubles your income on the next Pay Day.\r\n        console.log(this.WildCards[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        WildCardData = null;\r\n        _manager.ToggleDoublePayNextTurn(true);\r\n        this.CompleteTurnWithToast(\"You will receive double profits on next payday.\", 2400);\r\n        break;\r\n      case \"2\": //Roll 2 die, multiply result by $5,000 and receive your advance from the Bank.\r\n        console.log(this.WildCards[Index].Description);\r\n        WildCardData = null;\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n\r\n        var DiceResult = _manager.RollTwoDices();\r\n        var CashMulitplier = 5000;\r\n        var TotalResult = DiceResult * CashMulitplier;\r\n\r\n        _manager.PlayerGameInfo[_playerIndex].Cash += TotalResult;\r\n        this.CompleteTurnWithToast(\"Dice Result: \" + DiceResult + \"\\n\" + \"\\n\" + \"Total: \" + DiceResult + \" * \" + CashMulitplier + \" = \" + TotalResult + \"\\n\" + \"\\n\" + \"\\n\" + \"Amount $\" + TotalResult + \" has been added into your cash.\", 4000);\r\n\r\n        break;\r\n      case \"3\": //You go to an Estate Auction and buy a painting that turns out to be valuable. You can sell it now, roll both dice, multiply result by $10,000 and receive profits from the Bank.\r\n        console.log(this.WildCards[Index].Description);\r\n        WildCardData = null;\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n\r\n        var DiceResult = _manager.RollTwoDices();\r\n        var CashMulitplier = 10000;\r\n        var TotalResult = DiceResult * CashMulitplier;\r\n\r\n        _manager.PlayerGameInfo[_playerIndex].Cash += TotalResult;\r\n        this.CompleteTurnWithToast(\"Dice Result: \" + DiceResult + \"\\n\" + \"\\n\" + \"Total: \" + DiceResult + \" * \" + CashMulitplier + \" = \" + TotalResult + \"\\n\" + \"\\n\" + \"Amount $\" + TotalResult + \" has been added into your cash.\", 5200);\r\n        break;\r\n      case \"4\": //Your business is audited by the IRS and you have not been keeping very good records of the income and expenses for your business. They fine you $30,000. If you have a lawyer, your fine is $15,000.\r\n        console.log(this.WildCards[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _fine = 30000;\r\n        var _lawyerStatus = _manager.PlayerGameInfo[_playerIndex].LawyerStatus;\r\n        if (_hasTwoScreens) {\r\n          if (_lawyerStatus) _fine = _fine / 2;\r\n\r\n          WildCardData = { Data: { result: _fine } };\r\n\r\n          if (!this.IsBotTurn) {\r\n            this.ShowCardInfo(\"\\n\" + \"Lawyer Hired : \" + _lawyerStatus + \"\\n\" + \"\\n\" + \"Total fine $\" + _fine, true);\r\n\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n            this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n          } else {\r\n            this.CardFuntionalityButton();\r\n          }\r\n        } else {\r\n          _fine = WildCardData.Data.result;\r\n          if (_manager.PlayerGameInfo[_playerIndex].Cash >= _fine) {\r\n            _manager.PlayerGameInfo[_playerIndex].Cash -= _fine;\r\n            _manager.PlayerGameInfo[_playerIndex].LawyerStatus = false;\r\n            this.CompleteTurnWithToast(\"Fees $\" + _fine + \" was successfully paid, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 2800);\r\n            WildCardData = null;\r\n          } else {\r\n            console.log(\"not enough cash\");\r\n            if (!this.IsBotTurn) {\r\n              GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n            } else {\r\n              console.log(\"its bot and has no cash,skipping\");\r\n              WildCardData = null;\r\n              this.CompleteTurnWithToast(\"\", 1200);\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"5\": //You can become a vendor at a local Jazz Festival for a vending fee of $20,000. If you accept, pay the Bank $20,000 and roll two die; multiply the result by $5,000 and receive your vending income from the Bank.\r\n        console.log(this.WildCards[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var _fees = 20000;\r\n        var _multiplier = 5000;\r\n        var _diceResult;\r\n        var _result;\r\n\r\n        if (_hasTwoScreens) {\r\n          if (_type == 0) {\r\n            _diceResult = _manager.RollTwoDices();\r\n            _result = _diceResult * _multiplier;\r\n\r\n            WildCardData = { Data: { result: _result, Dice: _diceResult } };\r\n\r\n            if (_manager.PlayerGameInfo[_playerIndex].Cash >= _fees) {\r\n              _manager.PlayerGameInfo[_playerIndex].Cash -= _fees;\r\n\r\n              if (!this.IsBotTurn) {\r\n                this.ShowCardInfo(\"\\n\" + \"Dice Result: \" + _diceResult + \"\\n\" + \"\\n\" + \"Total Amount : \" + _diceResult + \" * \" + _multiplier + \" = $\" + _result, true);\r\n\r\n                this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Receive Amount\";\r\n                this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n              } else {\r\n                this.CardFuntionalityButton();\r\n              }\r\n            } else {\r\n              WildCardData = null;\r\n              this.CompleteTurnWithToast(\"you don't have enough cash.\", 2400);\r\n            }\r\n          } else if (_type == 1) {\r\n            WildCardData = null;\r\n            this.CompleteTurnWithToast(\"skipping turn now.\", 1800);\r\n          }\r\n        } else {\r\n          _diceResult = WildCardData.Data.Dice;\r\n          _result = WildCardData.Data.result;\r\n          _manager.PlayerGameInfo[_playerIndex].Cash += _result;\r\n          WildCardData = null;\r\n          this.CompleteTurnWithToast(\"Cash amount $\" + _result + \" has been successfully added.\", 3000);\r\n        }\r\n        break;\r\n      case \"6\": //An unsatisfied customer takes to social media and smear’s your name. It affects your Brand and your business before you can get a handle on it. You lose half your income on your next PayDay.\r\n        console.log(this.WildCards[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        WildCardData = null;\r\n        _manager.ToggleHalfPayNextTurn(true);\r\n        this.CompleteTurnWithToast(\"You will receive half profits on next payday.\", 2400);\r\n        break;\r\n      case \"7\": //pay off your loan for your Brick & Mortar Business. If you have no loan outstanding, receive $50,000.\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        WildCardData = null;\r\n        var _loanReset = false;\r\n        for (let index = 0; index < _manager.PlayerGameInfo[_playerIndex].NoOfBusiness.length; index++) {\r\n          var _type = parseInt(_manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].BusinessType);\r\n          if (_type == 2 && _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].LoanTaken) {\r\n            _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].LoanTaken = false;\r\n            _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].LoanAmount = 0;\r\n            _loanReset = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (_loanReset) {\r\n          this.CompleteTurnWithToast(\"your outstanding loan has been payed off.\", 3200);\r\n        } else {\r\n          _manager.PlayerGameInfo[_playerIndex].Cash += 50000;\r\n          this.CompleteTurnWithToast(\"you had no loan, amount $50000 has been added to your cash\", 3200);\r\n        }\r\n\r\n        console.log(this.WildCards[Index].Description);\r\n        break;\r\n      case \"8\": //You are sued for Trademark Infringement (copying someone else’s product), and you lose. If you have a lawyer roll 2 die, multiply by $1,000 and pay to the Bank. If you do not have a Lawyer, roll two die and multiply by $3,000 and pay to the Bank.\r\n        console.log(this.WildCards[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n\r\n        var _lawyerStatus = _manager.PlayerGameInfo[_playerIndex].LawyerStatus;\r\n        var DiceResult = _manager.RollTwoDices();\r\n        var _fine = 3000;\r\n        var TotalResult = 0;\r\n\r\n        if (_hasTwoScreens) {\r\n          if (_lawyerStatus) _fine = 1000;\r\n\r\n          TotalResult = _fine * DiceResult;\r\n          WildCardData = { Data: { result: TotalResult } };\r\n\r\n          if (!this.IsBotTurn) {\r\n            this.ShowCardInfo(\"\\n\" + \"Lawyer Hired : \" + _lawyerStatus + \"\\n\" + \"\\n\" + \"Dice Result : \" + DiceResult + \"\\n\" + \"\\n\" + \"Total fine $\" + TotalResult, true);\r\n\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n            this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n          } else {\r\n            this.CardFuntionalityButton();\r\n          }\r\n        } else {\r\n          TotalResult = WildCardData.Data.result;\r\n          if (_manager.PlayerGameInfo[_playerIndex].Cash >= TotalResult) {\r\n            _manager.PlayerGameInfo[_playerIndex].Cash -= TotalResult;\r\n            _manager.PlayerGameInfo[_playerIndex].LawyerStatus = false;\r\n            this.CompleteTurnWithToast(\"Fees $\" + TotalResult + \" was successfully paid, remaining cash $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 2800);\r\n            WildCardData = null;\r\n          } else {\r\n            console.log(\"not enough cash\");\r\n            if (!this.IsBotTurn) {\r\n              GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n            } else {\r\n              console.log(\"its bot and has no cash,skipping\");\r\n              WildCardData = null;\r\n              this.CompleteTurnWithToast(\"\", 1200);\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      case \"9\": //The City is adding a bus line that runs in front of your business. If you own a Brick & Mortar business, for the rest of the game, you receive double your income for one Brick & Mortar business.\r\n        console.log(this.WildCards[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        var BMBusiness = _manager.PlayerGameInfo[_playerIndex].BrickAndMortarAmount;\r\n        if (BMBusiness <= 0) {\r\n          this.CompleteTurnWithToast(\"You do not have any brick and mortar business, skipping turn.\", 3200);\r\n        } else {\r\n          if (!this.IsBotTurn) {\r\n            this.ShowCardInfo(\"\", false);\r\n            GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableSeletiveDoublePayDay_BusinessPayDayUISetup(false, true);\r\n          } else {\r\n            console.log(\"its bot and skipping\");\r\n            WildCardData = null;\r\n            this.CompleteTurnWithToast(\"\", 1200);\r\n          }\r\n        }\r\n        break;\r\n      case \"10\": //You sue a company for Defamation (lying on you) and win. Choose a player and receive all of their profits on their next Pay Day.\r\n        console.log(this.WildCards[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        if (!this.IsBotTurn) {\r\n          this.ShowCardInfo(\"\", false);\r\n          _manager.SelectPlayerProfit_Space_CardFunctionality(true);\r\n        } else {\r\n          console.log(\"its bot and skipping\");\r\n          WildCardData = null;\r\n          this.CompleteTurnWithToast(\"\", 1200);\r\n        }\r\n        break;\r\n      case \"11\": // receive double your business profits on all of your businesses.\r\n        console.log(this.WildCards[Index].Description);\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        WildCardData = null;\r\n        _manager.ToggleDoublePayNextTurn(true);\r\n        this.CompleteTurnWithToast(\"You will receive double profits on next payday.\", 2400);\r\n        break;\r\n      case \"12\":\r\n        console.log(this.WildCards[Index].Description);\r\n        break;\r\n      case \"13\":\r\n        console.log(this.WildCards[Index].Description);\r\n        break;\r\n      case \"14\":\r\n        console.log(this.WildCards[Index].Description);\r\n        break;\r\n      case \"15\":\r\n        console.log(this.WildCards[Index].Description);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  },\r\n\r\n  InvestFunctionality() {\r\n    GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableInvest_InvestSetupUI(true);\r\n    this.ShowCardInfo(\"\", false);\r\n  },\r\n\r\n  PayDayFunctionality() {},\r\n\r\n  DoublePayDayFunctionality() {},\r\n\r\n  OneQuestionFunctionality() {\r\n    GamePlayReferenceManager.Instance.Get_GameManager().OneQuestionScreen_Space_OneQuestion(true);\r\n    this.ShowCardInfo(\"\", false);\r\n  },\r\n\r\n  SellFunctionality() {\r\n    GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableSellScreen__SellBusinessUISetup(true);\r\n    this.ShowCardInfo(\"\", false);\r\n  },\r\n\r\n  BuyOrSellFunctionality() {\r\n    GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableBuyOrSell_BuyOrSellSetupUI(true);\r\n    this.ShowCardInfo(\"\", false);\r\n  },\r\n\r\n  GoBackFunctionality() {\r\n    GamePlayReferenceManager.Instance.Get_GameManager().GoBackSpaces_spaceFunctionality();\r\n    this.ShowCardInfo(\"\", false);\r\n  },\r\n});\r\nmodule.exports = DecksData;\r\n"]}