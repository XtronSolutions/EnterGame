{"version":3,"sources":["assets\\Script\\DecksData.js"],"names":["GamePlayReferenceManager","LossesData","EnumSpaceType","cc","Enum","None","WildCard","BigBusiness","Marketing","Invest","Losses","PayDay","DoublePayDay","OneQuestion","Sell","BuyOrSell","GoBackSpaces","CardData","Class","name","properties","ID","displayName","type","Text","serializable","tooltip","Description","HasButton","HasTwoButtons","HasThreeButtons","ButtonName","SecondButtonName","ThirdButtonName","ctor","CardUI","ToastNode","Node","ToastLabel","Label","ButtonNode","InteractionButtonNode","InteractionTwoButtonsNode","InteractionThreeButtonsNode","DecksData","Component","MainUI","WildCards","SpacesType","onLoad","CheckReferences","SelectedCardIndex","CardSelected","IsBotTurn","isOwner","onEnable","systemEvent","on","ShowCardInfo","onDisable","off","require","getRandom","min","max","Math","floor","random","ToggleButtons","_isOwner","_hasButton","_isBot","_hasTwoButton","active","setTimeout","ExitCardInfo","GenerateRandomBigBusinessCard","_randomValue","children","getComponent","string","CardFuntionalityButton","GenerateRandomMarketingCard","GenerateRandomLossesCard","GenerateRandomWildCard","SpaceInvest","_index","CompleteTurnWithToast","SpacePayDay","PayDayFunctionality","SpaceDoublePayDay","DoublePayDayFunctionality","SpaceOneQuestion","SpaceSell","SpaceBuyOrSell","SpaceGoBackSpaces","message","_state","Instance","Get_GameManager","ResetCardDisplay","RaiseEventTurnComplete","TwoButtonsFunctionality","event","_type","BigBusinessCardFunctionality","LossesCardFunctionality","MarketingCardFunctionality","WildCardFunctionality","SellFunctionality","InvestFunctionality","BuyOrSellFunctionality","OneQuestionFunctionality","GoBackFunctionality","CheckLoan","_loanTaken","_businessIndex","_manager","_playerIndex","GetTurnNumber","index","PlayerGameInfo","NoOfBusiness","length","LoanTaken","val","Result","v2","_msg","_time","console","log","_delay","Get_GameplayUIManager","ShowToast","_id","Index","parseInt","_result","IsLoanTaken","x","y","LoanAmount","LawyerStatus","ToggleDoublePayNextTurn","Dice1Result","RollTwoDices","Dice2Result","TotalResult","_mode","Get_MultiplayerController","GetSelectedMode","_amount","MarketingAmount","Cash","_actorsArray","getPhotonRef","myRoomActorsArray","customProperties","PlayerSessionData","_loseAmount","LoseAllMarketingMoney","_marketAmount","_multiplier","_increaseAmount","MultiplyMarketingMoney","_profit","GetMarketingMoney","_hasTwoScreens","ToggleSkipNextTurn","DiceResult","CashMulitplier","_hiredLawyer","Data","result","lawyer","ToggleScreen_InsufficientBalance","ToggleSkipPayDay_Whole","homeBasedBusiness","HomeBasedAmount","brickAndMortarBusiness","BrickAndMortarAmount","homeMultiplier","brickMuliplier","totalAmount","_courtSettlementFees","Type","TotalAmount","tempType","_businessType","BusinessType","ToggleSkipPayDay_HomeBased","bill","RollOneDice","_loanReset","EnableInvest_InvestSetupUI","OneQuestionScreen_Space_OneQuestion","EnableSellScreen__SellBusinessUISetup","EnableBuyOrSell_BuyOrSellSetupUI","GoBackSpaces_spaceFunctionality","module","exports"],"mappings":"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","sourceRoot":"/","sourcesContent":["var GamePlayReferenceManager=null;\r\nvar LossesData = null;\r\n//-------------------------------------------Spaces Data-------------------------//\r\nvar EnumSpaceType = cc.Enum({\r\n    None:0,\r\n    WildCard: 1,\r\n    BigBusiness: 2,\r\n    Marketing: 3,\r\n    Invest: 4,\r\n    Losses:5,\r\n    PayDay: 6,\r\n    DoublePayDay: 7,\r\n    OneQuestion: 8,\r\n    Sell: 9,\r\n    BuyOrSell: 10,\r\n    GoBackSpaces:11,\r\n});\r\n//-------------------------------------------class for card data-------------------------//\r\nvar CardData=cc.Class({\r\n    name:\"CardData\",\r\n    properties: {\r\n        ID:\r\n        {\r\n           displayName:\"ID\",\r\n           type: cc.Text,\r\n           default: \"\",\r\n           serializable: true,\r\n           tooltip:\"Id of the card\"},\r\n        Description:\r\n        {\r\n           displayName:\"Description\",\r\n           type: cc.Text,\r\n           default: \"\",\r\n           serializable: true,\r\n           tooltip:\"description of the card\"},\r\n        HasButton:\r\n        {\r\n           displayName:\"HasButton\",\r\n           type: cc.boolean,\r\n           default: false,\r\n           serializable: true,\r\n            tooltip: \"if this card should have interaction button\"\r\n        },\r\n        HasTwoButtons:\r\n        {\r\n           displayName:\"HasTwoButtons\",\r\n           type: cc.boolean,\r\n           default: false,\r\n           serializable: true,\r\n            tooltip: \"if this card should have two interaction button\"\r\n        },\r\n        HasThreeButtons:\r\n        {\r\n           displayName:\"HasThreeButtons\",\r\n           type: cc.boolean,\r\n           default: false,\r\n           serializable: true,\r\n           tooltip:\"if this card should have three interaction button\"},\r\n        ButtonName:\r\n        {\r\n           displayName:\"ButtonName\",\r\n           type: cc.Text,\r\n           default: \"\",\r\n           serializable: true,\r\n            tooltip: \"button name to show on screen\"\r\n        },\r\n        SecondButtonName:\r\n        {\r\n           displayName:\"SecondButtonName\",\r\n           type: cc.Text,\r\n           default: \"\",\r\n           serializable: true,\r\n            tooltip: \"Second button name to show on screen\"\r\n        },\r\n        ThirdButtonName:\r\n        {\r\n           displayName:\"SecondButtonName\",\r\n           type: cc.Text,\r\n           default: \"\",\r\n           serializable: true,\r\n           tooltip:\"Second button name to show on screen\"},\r\n },\r\n\r\n ctor: function () { //constructor\r\n }\r\n\r\n});\r\n\r\n//-------------------------------------------class for card UI-------------------------//\r\nvar CardUI=cc.Class({\r\n   name:\"CardUI\",\r\n   properties: {\r\n       ToastNode:\r\n       {\r\n          displayName:\"ToastNode\",\r\n          type: cc.Node,\r\n          default: null,\r\n          serializable: true,\r\n          tooltip:\"node reference for toast node\"},\r\n       ToastLabel:\r\n       {\r\n          displayName:\"ToastLabel\",\r\n          type: cc.Label,\r\n          default: null,\r\n          serializable: true,\r\n          tooltip:\"label reference for toast node\"},\r\n      ButtonNode:\r\n       {\r\n          displayName:\"ExitButton\",\r\n          type: cc.Node,\r\n          default: null,\r\n          serializable: true,\r\n          tooltip:\"Button reference for node\"},\r\n        InteractionButtonNode:\r\n       {\r\n          displayName:\"InteractionButton\",\r\n          type: cc.Node,\r\n          default: null,\r\n          serializable: true,\r\n           tooltip: \"interaction Button reference for node\"\r\n       },\r\n       InteractionTwoButtonsNode:\r\n       {\r\n          displayName:\"InteractionTwoButtonsNode\",\r\n          type: cc.Node,\r\n          default: null,\r\n          serializable: true,\r\n           tooltip: \"two interaction Button reference for node\"\r\n       },\r\n       InteractionThreeButtonsNode:\r\n       {\r\n          displayName:\"InteractionThreeButtonsNode\",\r\n          type: cc.Node,\r\n          default: null,\r\n          serializable: true,\r\n          tooltip:\"three interaction Button reference for node\"},\r\n},\r\n\r\nctor: function () { //constructor\r\n}\r\n\r\n});\r\n//-------------------------------------------class for decks Data-------------------------//\r\nvar DecksData = cc.Class({\r\n    name: \"DecksData\",\r\n    extends: cc.Component,\r\n    properties: {\r\n        MainUI:\r\n        {\r\n            displayName: \"MainUI\",\r\n            default: null,\r\n            type: CardUI,\r\n            serializable: true,\r\n            tooltip: \"UI of decks\"\r\n        },\r\n        BigBusiness:\r\n        {\r\n            displayName: \"BigBusiness\",\r\n            type: [CardData],\r\n            default: [],\r\n            serializable: true,\r\n            tooltip: \"all cards data for big business\",\r\n        },\r\n        Marketing:\r\n        {\r\n            displayName: \"Marketing\",\r\n            type: [CardData],\r\n            default: [],\r\n            serializable: true,\r\n            tooltip: \"all cards data for marketing\",\r\n        },\r\n        Losses:\r\n        {\r\n            displayName: \"Losses\",\r\n            type: [CardData],\r\n            default: [],\r\n            serializable: true,\r\n            tooltip: \"all cards data for losses\",\r\n        },\r\n        WildCards:\r\n        {\r\n            displayName: \"WildCards\",\r\n            type: [CardData],\r\n            default: [],\r\n            serializable: true,\r\n            tooltip: \"all cards data for WildCards\",\r\n        },\r\n        SpacesType:\r\n        {\r\n            type: EnumSpaceType,\r\n            default: EnumSpaceType.None,\r\n            serializable: true,\r\n            tooltip: \"states machines by type of card or spaces on board\",\r\n        },\r\n    },\r\n\r\n    onLoad() {\r\n        this.CheckReferences();\r\n        this.SelectedCardIndex = -1;\r\n        this.CardSelected = -1;\r\n        this.IsBotTurn = false;\r\n        this.isOwner = false;\r\n\r\n        //this.BigBusinessCardFunctionality(\"1\");\r\n        //for testing\r\n        // this.Counter=0;\r\n        // this.GenerateRandomBigBusinessCard(this.Counter);\r\n    },\r\n\r\n    onEnable: function () {\r\n        //events subscription to be called\r\n        cc.systemEvent.on(\"ShowCard\", this.ShowCardInfo, this);\r\n      },\r\n    \r\n      onDisable: function () {\r\n        cc.systemEvent.off(\"ShowCard\", this.ShowCardInfo, this);\r\n      },\r\n    CheckReferences() {\r\n        if (!GamePlayReferenceManager || GamePlayReferenceManager == null)\r\n            GamePlayReferenceManager = require('GamePlayReferenceManager');\r\n    },\r\n\r\n    getRandom: function (min, max) {\r\n        return Math.floor(Math.random() * (max - min)) + min; // min included and max excluded\r\n    },\r\n\r\n    ToggleButtons(_isOwner, _hasButton = false, _isBot = false,_hasTwoButton=false) {\r\n        if (_isOwner && _hasButton) {\r\n            this.MainUI.ButtonNode.active = false;\r\n            this.MainUI.InteractionButtonNode.active = true;\r\n\r\n            if (_hasTwoButton)\r\n                this.MainUI.InteractionTwoButtonsNode.active = true;\r\n            else\r\n                this.MainUI.InteractionTwoButtonsNode.active = false; \r\n        }\r\n        else if (_isOwner && !_hasButton) {\r\n            this.MainUI.ButtonNode.active = true;\r\n            this.MainUI.InteractionButtonNode.active = false;\r\n            this.MainUI.InteractionTwoButtonsNode.active = false;\r\n        }\r\n        else {\r\n            this.MainUI.InteractionButtonNode.active = false;\r\n            this.MainUI.ButtonNode.active = false;\r\n            this.MainUI.InteractionTwoButtonsNode.active = false;\r\n\r\n            if (_isBot == false) {\r\n                setTimeout(() => {\r\n                    this.ExitCardInfo();\r\n                }, 3200);\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n    GenerateRandomBigBusinessCard(_isOwner, _randomValue, _isBot = false) {\r\n        this.IsBotTurn = _isBot;\r\n        this.SpacesType = EnumSpaceType.BigBusiness;\r\n        this.isOwner = _isOwner;\r\n        this.SelectedCardIndex = _randomValue;\r\n        this.CardSelected = this.BigBusiness[this.SelectedCardIndex].ID;\r\n\r\n        if (this.BigBusiness[this.SelectedCardIndex].HasButton)\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = this.BigBusiness[this.SelectedCardIndex].ButtonName;\r\n\r\n        this.ShowCardInfo(this.BigBusiness[this.SelectedCardIndex].Description, true);\r\n        this.ToggleButtons(_isOwner, this.BigBusiness[this.SelectedCardIndex].HasButton, _isBot);\r\n\r\n        if (_isBot) {\r\n            this.CardFuntionalityButton();\r\n        }\r\n    },\r\n\r\n    GenerateRandomMarketingCard(_isOwner, _randomValue, _isBot = false) {\r\n        this.IsBotTurn = _isBot;\r\n        this.SpacesType = EnumSpaceType.Marketing;\r\n        this.isOwner = _isOwner;\r\n        this.SelectedCardIndex = _randomValue;\r\n        this.CardSelected = this.Marketing[this.SelectedCardIndex].ID;\r\n\r\n        if (this.Marketing[this.SelectedCardIndex].HasButton)\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = this.Marketing[this.SelectedCardIndex].ButtonName;\r\n    \r\n        this.ShowCardInfo(this.Marketing[this.SelectedCardIndex].Description, true);\r\n        this.ToggleButtons(_isOwner, this.Marketing[this.SelectedCardIndex].HasButton, _isBot);\r\n\r\n        if (_isBot) {\r\n            this.CardFuntionalityButton();\r\n        }\r\n    },\r\n\r\n    GenerateRandomLossesCard(_isOwner, _randomValue, _isBot = false) {\r\n        LossesData = null;\r\n        this.IsBotTurn = _isBot;\r\n        this.isOwner = _isOwner;\r\n        this.SpacesType = EnumSpaceType.Losses;\r\n        this.SelectedCardIndex = _randomValue;\r\n        this.CardSelected = this.Losses[this.SelectedCardIndex].ID;\r\n\r\n        this.ShowCardInfo(this.Losses[this.SelectedCardIndex].Description, true);\r\n\r\n        if (this.Losses[this.SelectedCardIndex].HasButton)\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = this.Losses[this.SelectedCardIndex].ButtonName;\r\n     \r\n        if (this.Losses[this.SelectedCardIndex].HasTwoButtons)\r\n            this.MainUI.InteractionTwoButtonsNode.children[0].children[0].getComponent(cc.Label).string = this.Losses[this.SelectedCardIndex].SecondButtonName;\r\n     \r\n        this.ToggleButtons(_isOwner, this.Losses[this.SelectedCardIndex].HasButton, _isBot,this.Losses[this.SelectedCardIndex].HasTwoButtons);\r\n\r\n        if (_isBot) {\r\n            this.CardFuntionalityButton();\r\n        }\r\n    },\r\n\r\n    GenerateRandomWildCard(_isOwner, _randomValue, _isBot = false) {\r\n        this.IsBotTurn = _isBot;\r\n        this.SpacesType = EnumSpaceType.WildCard;\r\n        this.SelectedCardIndex = _randomValue;\r\n        this.isOwner = _isOwner;\r\n        this.CardSelected = this.WildCards[this.SelectedCardIndex].ID;\r\n\r\n        if (this.WildCards[this.SelectedCardIndex].HasButton)\r\n            this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = this.WildCards[this.SelectedCardIndex].ButtonName;\r\n \r\n        this.ShowCardInfo(this.WildCards[this.SelectedCardIndex].Description, true);\r\n        this.ToggleButtons(_isOwner, this.WildCards[this.SelectedCardIndex].HasButton, _isBot);\r\n\r\n        if (_isBot) {\r\n            this.CardFuntionalityButton();\r\n        }\r\n    },\r\n\r\n    SpaceInvest(_isOwner, _index, _isBot = false) {\r\n        this.IsBotTurn = _isBot;\r\n        this.isOwner = _isOwner;\r\n        this.SpacesType = EnumSpaceType.Invest;\r\n        this.ShowCardInfo(\"You can invest one more time in Gold or stocks this turn.\", true);\r\n        this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n        this.ToggleButtons(_isOwner, true, _isBot);\r\n\r\n        if (_isBot) {\r\n            this.CompleteTurnWithToast(\"msg\", 2100);\r\n        }\r\n    },\r\n\r\n    SpacePayDay(_isOwner, _index) {\r\n        this.ShowCardInfo(\"You have landed on PayDay space.\", true);\r\n        this.PayDayFunctionality();\r\n\r\n        this.ToggleButtons(_isOwner, false);\r\n    },\r\n\r\n    SpaceDoublePayDay(_isOwner, _index) {\r\n        this.ShowCardInfo(\"You have landed on DoublePayDay space.\", true);\r\n        this.DoublePayDayFunctionality();\r\n\r\n        this.ToggleButtons(_isOwner, false);\r\n    },\r\n\r\n    SpaceOneQuestion(_isOwner, _index, _isBot = false) {\r\n        this.IsBotTurn = _isBot;\r\n        this.isOwner = _isOwner;\r\n        this.SpacesType = EnumSpaceType.OneQuestion;\r\n        this.ShowCardInfo(\"You can ask one question to any other player, if player is unable to answer they will pay you some cash amount.\", true);\r\n        this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n        this.ToggleButtons(_isOwner, true, _isBot);\r\n        if (_isBot) {\r\n            this.CompleteTurnWithToast(\"msg\", 2100);\r\n        }\r\n    },\r\n\r\n    SpaceSell(_isOwner, _index, _isBot = false) {\r\n        this.IsBotTurn = _isBot;\r\n        this.isOwner = _isOwner;\r\n        this.SpacesType = EnumSpaceType.Sell;\r\n        this.ShowCardInfo(\"You can sell any one of your business or can skip turn.\", true);\r\n        this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n        this.ToggleButtons(_isOwner, true, _isBot);\r\n        if (_isBot) {\r\n            this.CompleteTurnWithToast(\"msg\", 2100);\r\n        }\r\n    },\r\n\r\n    SpaceBuyOrSell(_isOwner, _index, _isBot = false) {\r\n        this.IsBotTurn = _isBot;\r\n        this.isOwner = _isOwner;\r\n        this.SpacesType = EnumSpaceType.BuyOrSell;\r\n        this.ShowCardInfo(\"You can Buy or sell Gold or stocks one more time in this turn.\", true);\r\n        this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n        this.ToggleButtons(_isOwner, true, _isBot);\r\n        if (_isBot) {\r\n            this.CompleteTurnWithToast(\"msg\", 2100);\r\n        }\r\n    },\r\n\r\n    SpaceGoBackSpaces(_isOwner, _index, _isBot = false) {\r\n        this.IsBotTurn = _isBot;\r\n        this.isOwner = _isOwner;\r\n        this.SpacesType = EnumSpaceType.GoBackSpaces;\r\n        this.ShowCardInfo(\"you will have to go back 3 spaces.\", true);\r\n        this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Execute\";\r\n        this.ToggleButtons(_isOwner, true, _isBot);\r\n        if (_isBot) {\r\n            setTimeout(() => {\r\n                this.CardFuntionalityButton();\r\n            }, 1000);\r\n            \r\n        }\r\n    },\r\n\r\n    ShowCardInfo: function (message, _state) {\r\n        if (_state) {\r\n            this.MainUI.ToastNode.active = true;\r\n            this.MainUI.ToastLabel.string = message;\r\n        } else {\r\n            this.MainUI.ToastLabel.string = \"\";\r\n            this.MainUI.ToastNode.active = false;\r\n        }\r\n    },\r\n\r\n    ExitCardInfo() {\r\n        this.ShowCardInfo(\"\", false);\r\n        GamePlayReferenceManager.Instance.Get_GameManager().ResetCardDisplay();\r\n        GamePlayReferenceManager.Instance.Get_GameManager().RaiseEventTurnComplete();\r\n\r\n        //for testing\r\n        // this.Counter++;\r\n        // this.GenerateRandomBigBusinessCard(this.Counter);\r\n    },\r\n\r\n    TwoButtonsFunctionality()\r\n    {\r\n        this.CardFuntionalityButton(null,1);\r\n    },\r\n\r\n    CardFuntionalityButton(event=null,_type=0) {\r\n        if (this.SpacesType == EnumSpaceType.BigBusiness) {\r\n            this.BigBusinessCardFunctionality(this.CardSelected);\r\n        } else if (this.SpacesType == EnumSpaceType.Losses && LossesData==null) {\r\n            this.LossesCardFunctionality(this.CardSelected,true,_type);\r\n        }\r\n        else if (this.SpacesType == EnumSpaceType.Losses && LossesData!=null) {\r\n            this.LossesCardFunctionality(this.CardSelected,false,_type);\r\n        }   \r\n        else if (this.SpacesType == EnumSpaceType.Marketing) {\r\n            this.MarketingCardFunctionality(this.CardSelected);\r\n        }\r\n        else if (this.SpacesType == EnumSpaceType.WildCard) {\r\n            this.WildCardFunctionality(this.CardSelected);\r\n        }\r\n        else if (this.SpacesType == EnumSpaceType.Sell) {\r\n            this.SellFunctionality();\r\n        }\r\n        else if (this.SpacesType == EnumSpaceType.Invest) {\r\n            this.InvestFunctionality();\r\n        }\r\n        else if (this.SpacesType == EnumSpaceType.BuyOrSell) {\r\n            this.BuyOrSellFunctionality();\r\n        }\r\n        else if (this.SpacesType == EnumSpaceType.OneQuestion) {\r\n            this.OneQuestionFunctionality();\r\n        }\r\n        else if (this.SpacesType == EnumSpaceType.GoBackSpaces) {\r\n            this.GoBackFunctionality();\r\n        }\r\n    },\r\n\r\n    CheckLoan() {\r\n        var _loanTaken = false;\r\n        var _businessIndex = 0;\r\n\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n        \r\n        for (let index = 0; index < _manager.PlayerGameInfo[_playerIndex].NoOfBusiness.length; index++) {\r\n\r\n            if (_manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].LoanTaken) {\r\n                _loanTaken = true;\r\n                _businessIndex = index;\r\n                break;\r\n            }\r\n        }\r\n\r\n        var val = -1;\r\n        val = _loanTaken == true ? 1 : 0;\r\n        var Result = cc.v2(val, _businessIndex)\r\n        return Result;\r\n    },\r\n\r\n    CompleteTurnWithToast(_msg, _time) {\r\n        var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n\r\n        if (this.IsBotTurn) {\r\n            console.log(_msg);\r\n            var _delay = this.getRandom(2500, 3500);\r\n            setTimeout(() => {\r\n                this.ShowCardInfo(\"\", false);\r\n                _manager.ResetCardDisplay();\r\n                _manager.RaiseEventTurnComplete();\r\n            }, (_delay));\r\n        }\r\n        else {\r\n            GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(_msg, _time);\r\n            this.ShowCardInfo(\"\", false);\r\n\r\n            setTimeout(() => {\r\n                this.ShowCardInfo(\"\", false);\r\n                _manager.ResetCardDisplay();\r\n                _manager.RaiseEventTurnComplete();\r\n            }, (_time + 1000));\r\n        }\r\n    },\r\n\r\n    BigBusinessCardFunctionality(_id) {\r\n        var Index = parseInt(_id);\r\n        Index = Index - 1;\r\n\r\n        switch (_id) {\r\n            case \"1\"://receive 20000$ gift to payoff loan\r\n                console.log(this.BigBusiness[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var _result = this.CheckLoan();\r\n                var IsLoanTaken = _result.x;\r\n                var _businessIndex = _result.y;\r\n\r\n                if (IsLoanTaken == 1) //means user has taken loan\r\n                {\r\n                    _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanAmount = _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanAmount - 20000;\r\n                    if (_manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanAmount <= 0) {\r\n                        _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanAmount = 0;\r\n                        _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[_businessIndex].LoanTaken = false;\r\n                    }\r\n\r\n                    this.CompleteTurnWithToast(\"Loan amount of $20000 has been payed off.\", 1800);\r\n                }\r\n                else {\r\n                    this.CompleteTurnWithToast(\"You have not taken any loan, turn will skip now.\", 1800);\r\n                }\r\n\r\n                break;\r\n            case \"2\": //hire lawyer\r\n                console.log(this.BigBusiness[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n\r\n                if (_manager.PlayerGameInfo[_playerIndex].LawyerStatus) {\r\n                    this.CompleteTurnWithToast(\"You have already hired laywer, turn will skip now.\", 1800);\r\n                }\r\n                else {\r\n                    _manager.PlayerGameInfo[_playerIndex].LawyerStatus = true;\r\n                    this.CompleteTurnWithToast(\"You have successfully hired a lawyer.\", 1800);\r\n                }\r\n\r\n                break;\r\n            case \"3\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            case \"4\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            case \"5\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            case \"6\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            case \"7\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            case \"8\"://double pay day on next pay day\r\n                console.log(this.BigBusiness[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n\r\n                _manager.ToggleDoublePayNextTurn(true);\r\n                this.CompleteTurnWithToast(\"You will receive double profits on next payday.\", 1800);\r\n\r\n                break;\r\n            case \"9\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            case \"10\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            case \"11\"://roll dice twice, if result is >19 then take all money inside marketing.\r\n                console.log(this.BigBusiness[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n             \r\n                var Dice1Result = _manager.RollTwoDices();\r\n                var Dice2Result = _manager.RollTwoDices();\r\n\r\n                //  var Dice1Result=12;\r\n                //  var Dice2Result=12;\r\n\r\n                var TotalResult = Dice1Result + Dice2Result;\r\n\r\n                if (TotalResult >= 19) {\r\n                    var _mode = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode();\r\n                    var _amount = 0;\r\n                    for (let index = 0; index < _manager.PlayerGameInfo.length; index++) {\r\n                        _amount = _amount + _manager.PlayerGameInfo[index].MarketingAmount;\r\n                    }\r\n\r\n                    _manager.PlayerGameInfo[_playerIndex].Cash += _amount;\r\n                    this.CompleteTurnWithToast(\"Dice 1 Result: \" + Dice1Result + \"\\n\" + \"\\n\" +\r\n                        \"Dice 2 Result: \" + Dice2Result + \"\\n\" + \"\\n\" +\r\n                        \"Total: \" + TotalResult + \"\\n\" + \"\\n\" + \"\\n\" +\r\n                        \"Amount $\" + _amount + \" has successfully added in your cash from marketing amount on table.\"\r\n                        , 4000);\r\n\r\n\r\n                    if (_mode == 2) {\r\n                        var _actorsArray = GamePlayReferenceManager.Instance.Get_MultiplayerController().getPhotonRef().myRoomActorsArray();\r\n\r\n                        for (let index = 0; index < _actorsArray.length; index++) {\r\n                            _actorsArray[index].customProperties.PlayerSessionData.MarketingAmount = 0;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.CompleteTurnWithToast(\"Dice 1 Result: \" + Dice1Result + \"\\n\" + \"\\n\" +\r\n                        \"Dice 2 Result: \" + Dice2Result + \"\\n\" + \"\\n\" +\r\n                        \"Total: \" + TotalResult + \"\\n\" + \"\\n\" + \"\\n\" +\r\n                        \"You ran out of luck, turn will skip now\"\r\n                        , 4000);\r\n                }\r\n\r\n                break;\r\n            case \"12\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            case \"13\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            case \"14\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            case \"15\":\r\n                console.log(this.BigBusiness[Index].Description);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    },\r\n\r\n    MarketingCardFunctionality(_id) {\r\n        var Index = parseInt(_id);\r\n        Index = Index - 1;\r\n\r\n        switch (_id) {\r\n            case \"1\"://lose all your money in marketing account\r\n                console.log(this.Marketing[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _loseAmount = _manager.LoseAllMarketingMoney();\r\n\r\n                if (_loseAmount > 0)\r\n                    this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2100);\r\n                else\r\n                    this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2100);\r\n                break;\r\n            case \"2\":\r\n                console.log(this.Marketing[Index].Description);\r\n                break;\r\n            case \"3\":\r\n                console.log(this.Marketing[Index].Description);\r\n                break;\r\n            case \"4\"://Your Marketing Account triples, but you must leave it in the account.\r\n                console.log(this.Marketing[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var _marketAmount = _manager.PlayerGameInfo[_playerIndex].MarketingAmount;\r\n                var _multiplier = 3;\r\n                var _increaseAmount = _manager.MultiplyMarketingMoney(_multiplier);\r\n\r\n                if (_increaseAmount > 0) {\r\n                    this.CompleteTurnWithToast(\"Marketing Amount: $\" + _marketAmount + \"\\n\" + \"\\n\" +\r\n                        \"Total: \" + _marketAmount + \" * \" + _multiplier + \" = \" + _increaseAmount + \"\\n\" + \"\\n\" + \"\\n\" +\r\n                        \"your marketing amount has been sucessfully increase to $\" + _increaseAmount\r\n                        , 3100);\r\n                }\r\n                else {\r\n                    this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2100);\r\n                }\r\n                break;\r\n            case \"5\":\r\n                console.log(this.Marketing[Index].Description);\r\n                break;\r\n            case \"6\":\r\n                console.log(this.Marketing[Index].Description);\r\n                break;\r\n            case \"7\":\r\n                console.log(this.Marketing[Index].Description);\r\n                break;\r\n            case \"8\"://lose all your money in marketing account\r\n                console.log(this.Marketing[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _loseAmount = _manager.LoseAllMarketingMoney();\r\n\r\n                if (_loseAmount > 0)\r\n                    this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2100);\r\n                else\r\n                    this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2100);\r\n                break;\r\n            case \"9\"://lose all your money in marketing account\r\n                console.log(this.Marketing[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _loseAmount = _manager.LoseAllMarketingMoney();\r\n\r\n                if (_loseAmount > 0)\r\n                    this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2100);\r\n                else\r\n                    this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2100);\r\n                break;\r\n            case \"10\"://Receive all of your Marketing Budget back, plus 700% profit.\r\n                console.log(this.Marketing[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n                var _marketAmount = _manager.PlayerGameInfo[_playerIndex].MarketingAmount;\r\n                var _profit = 700;\r\n                var _amount = _manager.GetMarketingMoney(_profit);\r\n\r\n                if (_amount > 0) {\r\n                    this.CompleteTurnWithToast(\"Marketing Amount: $\" + _marketAmount + \"\\n\" + \"\\n\" +\r\n                        \"Total: \" + _marketAmount + \" + (\" + _marketAmount + \"*\" + _profit + \" )/100\" + \" = \" + _amount + \"\\n\" + \"\\n\" + \"\\n\" +\r\n                        \"your cash amount has been sucessfully increase by $\" + _amount + \", total cash becomes $\" + _manager.PlayerGameInfo[_playerIndex].Cash\r\n                        , 4000);\r\n                }\r\n                else {\r\n                    this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2100);\r\n                }\r\n                break;\r\n            case \"11\":\r\n                console.log(this.Marketing[Index].Description);\r\n                break;\r\n            case \"12\":\r\n                console.log(this.Marketing[Index].Description);\r\n                break;\r\n            case \"13\":\r\n                console.log(this.Marketing[Index].Description);\r\n                break;\r\n            case \"14\"://lose all your money in marketing account\r\n                console.log(this.Marketing[Index].Description);\r\n                var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n                var _loseAmount = _manager.LoseAllMarketingMoney();\r\n\r\n                if (_loseAmount > 0)\r\n                    this.CompleteTurnWithToast(\"You have lost your marketing amount of $\" + _loseAmount, 2100);\r\n                else\r\n                    this.CompleteTurnWithToast(\"You don't have any marketing amount\", 2100);\r\n                break;\r\n            case \"15\":\r\n                console.log(this.Marketing[Index].Description);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    },\r\n\r\n    LossesCardFunctionality(_id, _hasTwoScreens = false,_type=0)\r\n    {\r\n      var Index=parseInt(_id);\r\n      Index=Index-1;\r\n\r\n       switch (_id) {\r\n         case \"1\"://lose next turn\r\n             console.log(this.Losses[Index].Description);\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n             var _playerIndex=GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               _manager.ToggleSkipNextTurn(true);\r\n               LossesData = null;\r\n             this.CompleteTurnWithToast(\"You will lose your next turn.\",2400);\r\n             break;\r\n         case \"2\": //Roll 2 dice, multiply by $5,000 and pay it to the Bank. If you have a lawyer you lose 50% of the total bill currently owed.\r\n               console.log(this.Losses[Index].Description);\r\n               var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               var DiceResult;\r\n               var CashMulitplier;\r\n               var TotalResult;\r\n               var _hiredLawyer;\r\n\r\n               if (_hasTwoScreens) {\r\n                   DiceResult = _manager.RollTwoDices();\r\n                   CashMulitplier = 5000;\r\n                   TotalResult = DiceResult * CashMulitplier;\r\n                   _hiredLawyer = _manager.PlayerGameInfo[_playerIndex].LawyerStatus;\r\n\r\n                   LossesData = { Data: { result: TotalResult, lawyer: _hiredLawyer } };\r\n\r\n                   if (!this.IsBotTurn) {\r\n                       this.ShowCardInfo(\"\\n\" + \"\\n\" + \"Dice Roll Result : \" + DiceResult + \"\\n\" + \"\\n\" +\r\n                           \"Total Bill Calculated : \" + DiceResult + \" * \" + CashMulitplier + \" = $\" + TotalResult, true);\r\n\r\n                       this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                       this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                   } else\r\n                   {\r\n                       this.CardFuntionalityButton();\r\n                   }\r\n               }\r\n               else {\r\n                   console.log(LossesData);\r\n                   TotalResult = LossesData.Data.result;\r\n                   _hiredLawyer = LossesData.Data.lawyer;\r\n\r\n                   if (_hiredLawyer)\r\n                        TotalResult = TotalResult / 2;\r\n\r\n                   if (_manager.PlayerGameInfo[_playerIndex].Cash >= TotalResult) {\r\n                       if (_hiredLawyer) {\r\n                           _manager.PlayerGameInfo[_playerIndex].Cash -= TotalResult;\r\n                           _manager.PlayerGameInfo[_playerIndex].LawyerStatus = false;\r\n                           this.CompleteTurnWithToast(\"you had hired lawyer, half bill $\" + TotalResult + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                           LossesData = null;\r\n                       } else {\r\n                            _manager.PlayerGameInfo[_playerIndex].Cash -= TotalResult;\r\n                           this.CompleteTurnWithToast(\"you have not hired any lawyer, bill $\" + TotalResult + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                           LossesData = null;\r\n                       }\r\n                   } else {\r\n                       console.log(\"not enough cash\");\r\n                       if (!this.IsBotTurn) {\r\n                           GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                       } else\r\n                       {\r\n                           console.log(\"its bot and has no cash,skipping\");\r\n                           LossesData = null;\r\n                           this.CompleteTurnWithToast(\"\", 1200);\r\n                       }\r\n                   }\r\n               }\r\n             break;\r\n         case \"3\"://lose all your business profits on next Pay Day.\r\n             console.log(this.Losses[Index].Description);\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n             var _playerIndex=GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n              LossesData = null;\r\n             _manager.ToggleSkipPayDay_Whole(true);\r\n             this.CompleteTurnWithToast(\"you will lose all your business profits on next Pay Day.\",2400);\r\n             break;\r\n         case \"4\"://Yearly business insurance premium is due. Pay $2,000 to the Bank for each Home-Based business, $5,000 for each Brick & Mortar business.\r\n               console.log(this.Losses[Index].Description);\r\n               var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               var homeBasedBusiness = _manager.PlayerGameInfo[_playerIndex].HomeBasedAmount;\r\n               var brickAndMortarBusiness = _manager.PlayerGameInfo[_playerIndex].BrickAndMortarAmount;\r\n               var homeMultiplier = 2000;\r\n               var brickMuliplier = 5000;\r\n               var totalAmount = (homeBasedBusiness * homeMultiplier) + (brickAndMortarBusiness * brickMuliplier);\r\n               if (_hasTwoScreens) {\r\n                LossesData = { Data: { result: totalAmount } };\r\n                if (!this.IsBotTurn) {\r\n                    this.ShowCardInfo(\"\\n\" + \"Home Based Amount : \" + homeBasedBusiness+\" * $\"+homeMultiplier+\" = $\"+ (homeBasedBusiness*homeMultiplier)+ \"\\n\" + \"\\n\" +\r\n                        \"Brick & Mortar Amount : \" + brickAndMortarBusiness + \" * $\" + brickMuliplier + \" = $\" + (brickAndMortarBusiness * brickMuliplier) + \"\\n\" + \"\\n\" +\r\n                        \"Total Amount : \"+(homeBasedBusiness*homeMultiplier)+\" + \"+(brickAndMortarBusiness * brickMuliplier)+\" = $\"+totalAmount, true);\r\n\r\n                    this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                    this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                } else\r\n                {\r\n                    this.CardFuntionalityButton();\r\n                }\r\n               }\r\n               else\r\n               {\r\n                   totalAmount = LossesData.Data.result;\r\n                   if (_manager.PlayerGameInfo[_playerIndex].Cash >= totalAmount) {\r\n                    _manager.PlayerGameInfo[_playerIndex].Cash -= totalAmount;\r\n                    this.CompleteTurnWithToast(\"Total amount $\" + totalAmount + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                    LossesData = null;\r\n                } else {\r\n                    console.log(\"not enough cash\");\r\n                    if (!this.IsBotTurn) {\r\n                        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                    } else\r\n                    {\r\n                        LossesData = null;\r\n                        console.log(\"its bot and has no money, skipping\");\r\n                        this.CompleteTurnWithToast(\"\", 1200);\r\n                    }\r\n                }\r\n               }\r\n             break;\r\n         case \"5\"://Your employee claims you sexually harassed them, but you did not. You can either;  1 - Settle out of court and pay them $50,000. 2 - Take your chances in court. Roll 2 dice and pay $10,000 times the number rolled.\r\n               console.log(this.Losses[Index].Description);\r\n               var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               var _courtSettlementFees = 50000;\r\n               var DiceResult;\r\n               var CashMulitplier = 10000;\r\n               var totalAmount;\r\n\r\n               if (_hasTwoScreens) {\r\n                   if (_type == 0) { //first button\r\n                     \r\n                       LossesData = { Data: { result: _courtSettlementFees, Type: _type } };\r\n                       if (!this.IsBotTurn) {\r\n                           this.ShowCardInfo(\"\\n\" + \"Payable amount : $\" + _courtSettlementFees, true);\r\n\r\n                           this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                           this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                       } else {\r\n                           this.CardFuntionalityButton();\r\n                       }\r\n                   } else if (_type == 1) { //2nd button\r\n                     \r\n                       DiceResult = _manager.RollTwoDices();\r\n                       totalAmount = DiceResult * CashMulitplier;\r\n                       LossesData = { Data: { result: DiceResult, TotalAmount: totalAmount, Type: _type } };\r\n                       if (!this.IsBotTurn) {\r\n                           this.ShowCardInfo(\"\\n\" + \"Dice Result : \" + DiceResult + \"\\n\" + \"\\n\" +\r\n                               \"Total Amount : \" + DiceResult + \" * \" + CashMulitplier + \" = $\" + totalAmount, true);\r\n\r\n                           this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                           this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                       } else {\r\n                           this.CardFuntionalityButton();\r\n                       }\r\n                   }\r\n               } else { \r\n                   var tempType = LossesData.Data.Type;\r\n                   if (tempType == 0)\r\n                   {\r\n                       _courtSettlementFees = LossesData.Data.result;\r\n                            if (_manager.PlayerGameInfo[_playerIndex].Cash >= _courtSettlementFees) {\r\n                                _manager.PlayerGameInfo[_playerIndex].Cash -= _courtSettlementFees;\r\n                                this.CompleteTurnWithToast(\"Total amount $\" + _courtSettlementFees + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                                LossesData = null;\r\n                            } else {\r\n                                console.log(\"not enough cash\");\r\n                                if (!this.IsBotTurn) {\r\n                                    GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                                } else\r\n                                {\r\n                                    LossesData = null;\r\n                                    console.log(\"it was bot and had not enough money\");\r\n                                    this.CompleteTurnWithToast(\"\", 1200);\r\n                                }\r\n                            }\r\n                   } else if (tempType == 1)\r\n                   {\r\n                       DiceResult = LossesData.Data.result;\r\n                       totalAmount = LossesData.Data.TotalAmount;\r\n                       if (_manager.PlayerGameInfo[_playerIndex].Cash >= totalAmount) {\r\n                        _manager.PlayerGameInfo[_playerIndex].Cash -= totalAmount;\r\n                        this.CompleteTurnWithToast(\"Total amount $\" + totalAmount + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                        LossesData = null;\r\n                    } else {\r\n                        console.log(\"not enough cash\");\r\n                        if (!this.IsBotTurn) {\r\n                            GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                        } else\r\n                        {\r\n                            console.log(\"it was bot and had not enough money\");\r\n                            LossesData = null;\r\n                            this.CompleteTurnWithToast(\"\", 1200);\r\n                        }\r\n                    }\r\n                   }\r\n               }\r\n             break;\r\n         case \"6\":// If Business #1 is Home Based, pay a $5,000 Insurance Deductible; if Brick & Mortar $10,000 deductible.\r\n             console.log(this.Losses[Index].Description);\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n             var _playerIndex=GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n\r\n             var _businessType=parseInt(_manager.PlayerGameInfo[_playerIndex].NoOfBusiness[0].BusinessType);\r\n             if(_businessType==1) // first business was home based\r\n             {\r\n                 if (_manager.PlayerGameInfo[_playerIndex].Cash >= 5000) {\r\n                     _manager.PlayerGameInfo[_playerIndex].Cash -= 5000;\r\n                     this.CompleteTurnWithToast(\"You payed $5000 insurance on your first home based business, remaining cash is $\" + _manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                 }\r\n                 else {\r\n                     if (!this.IsBotTurn) {\r\n                         GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                     } else {\r\n                         LossesData = null;\r\n                         console.log(\"it was bot and had not enough money\");\r\n                         this.CompleteTurnWithToast(\"\", 1200);\r\n                     }\r\n                 }\r\n             }\r\n             else if (_businessType==2) //first busioness was brick & mortar\r\n             {\r\n                if(_manager.PlayerGameInfo[_playerIndex].Cash>=10000)\r\n                {\r\n                   _manager.PlayerGameInfo[_playerIndex].Cash-=10000;\r\n                   this.CompleteTurnWithToast(\"You payed $10000 insurance on your first brick & mortar business, remaining cash is $\"+_manager.PlayerGameInfo[_playerIndex].Cash,4200);\r\n                }\r\n                else\r\n                {\r\n                    if (!this.IsBotTurn) {\r\n                        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                    } else\r\n                    {\r\n                        LossesData = null;\r\n                        console.log(\"it was bot and had not enough money\");\r\n                        this.CompleteTurnWithToast(\"\", 1200);\r\n                    }\r\n                }\r\n             }\r\n             break;\r\n         case \"7\"://lose your next Pay Day for all of your home-based businesses.\r\n             console.log(this.Losses[Index].Description);\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n             var _playerIndex=GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               LossesData = null;\r\n             _manager.ToggleSkipPayDay_HomeBased(true);\r\n             this.CompleteTurnWithToast(\"you will lose your next Pay Day for all of your home-based businesses.\",2400);\r\n             \r\n             break;\r\n         case \"8\"://You are fined 50% of your current liquid cash. If you have a lawyer, your fine is reduced to 20% of your current liquid cash.\r\n               console.log(this.Losses[Index].Description);\r\n               var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               var TotalResult;\r\n               var _hiredLawyer;\r\n\r\n               if (_hasTwoScreens) {\r\n                    TotalResult = _manager.PlayerGameInfo[_playerIndex].Cash;\r\n                   _hiredLawyer = _manager.PlayerGameInfo[_playerIndex].LawyerStatus;\r\n\r\n                   LossesData = { Data: { result: TotalResult, lawyer: _hiredLawyer } };\r\n\r\n                   if (!this.IsBotTurn) {\r\n                       this.ShowCardInfo(\"\\n\" + \"\\n\" + \"Total Cash : $\" + TotalResult + \"\\n\" + \"\\n\" +\r\n                           \"50% of Total Cash : $\" + (TotalResult / 2), true);\r\n\r\n                       this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                       this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                   } else\r\n                   {\r\n                       this.CardFuntionalityButton();\r\n                   }\r\n               }\r\n\r\n               else {\r\n                   console.log(LossesData);\r\n                   TotalResult = LossesData.Data.result;\r\n                   _hiredLawyer = LossesData.Data.lawyer;\r\n\r\n                   if (_hiredLawyer) \r\n                       TotalResult = (TotalResult * 20) / 100;\r\n                    else\r\n                       TotalResult = (TotalResult * 50) / 100;\r\n                       \r\n                   if (_manager.PlayerGameInfo[_playerIndex].Cash >= TotalResult) {\r\n                       if (_hiredLawyer) {\r\n                           _manager.PlayerGameInfo[_playerIndex].Cash -= TotalResult;\r\n                           _manager.PlayerGameInfo[_playerIndex].LawyerStatus = false;\r\n                           this.CompleteTurnWithToast(\"you had hired lawyer, reduced fine $\" + TotalResult + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                           LossesData = null;\r\n                       } else {\r\n                            _manager.PlayerGameInfo[_playerIndex].Cash -= TotalResult;\r\n                           this.CompleteTurnWithToast(\"you have not hired any lawyer, fine $\" + TotalResult + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                           LossesData = null;\r\n                       }\r\n                   } else {\r\n                       console.log(\"not enough cash\");\r\n                       if (!this.IsBotTurn) {\r\n                           GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                       } else\r\n                       {\r\n                           console.log(\"it was bot and had no money, skipping\");\r\n                            this.CompleteTurnWithToast(\"\", 800);\r\n                            LossesData = null;\r\n                       }\r\n                   }\r\n               }\r\n             break;\r\n         case \"9\"://A customer is injured at one of your business locations. You can either; 1 - Settle out of court and pay them $25,000 , 2 - Take your chances in court. Roll 2 dice and pay $5,000 times the number rolled.\r\n             console.log(this.Losses[Index].Description);\r\n               var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               var _courtSettlementFees = 25000;\r\n               var DiceResult;\r\n               var CashMulitplier = 5000;\r\n               var totalAmount;\r\n\r\n               if (_hasTwoScreens) {\r\n                   if (_type == 0) { //first button\r\n                     \r\n                       LossesData = { Data: { result: _courtSettlementFees, Type: _type } };\r\n                       if (!this.IsBotTurn) {\r\n                           this.ShowCardInfo(\"\\n\" + \"Payable amount : $\" + _courtSettlementFees, true);\r\n\r\n                           this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                           this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                       } else {\r\n                           this.CardFuntionalityButton();\r\n                       }\r\n                   } else if (_type == 1) { //2nd button\r\n                     \r\n                       DiceResult = _manager.RollTwoDices();\r\n                       totalAmount = DiceResult * CashMulitplier;\r\n                       LossesData = { Data: { result: DiceResult, TotalAmount: totalAmount, Type: _type } };\r\n                       if (!this.IsBotTurn) {\r\n                           this.ShowCardInfo(\"\\n\" + \"Dice Result : \" + DiceResult + \"\\n\" + \"\\n\" +\r\n                               \"Total Amount : \" + DiceResult + \" * \" + CashMulitplier + \" = $\" + totalAmount, true);\r\n\r\n                           this.MainUI.InteractionButtonNode.children[0].children[0].getComponent(cc.Label).string = \"Pay Amount\";\r\n                           this.ToggleButtons(this.isOwner, true, this.IsBotTurn);\r\n                       } else {\r\n                           this.CardFuntionalityButton();\r\n                       }\r\n                   }\r\n               } else { \r\n                   var tempType = LossesData.Data.Type;\r\n                   if (tempType == 0)\r\n                   {\r\n                       _courtSettlementFees = LossesData.Data.result;\r\n                            if (_manager.PlayerGameInfo[_playerIndex].Cash >= _courtSettlementFees) {\r\n                                _manager.PlayerGameInfo[_playerIndex].Cash -= _courtSettlementFees;\r\n                                this.CompleteTurnWithToast(\"Total amount $\" + _courtSettlementFees + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                                LossesData = null;\r\n                            } else {\r\n                                console.log(\"not enough cash\");\r\n                                if (!this.IsBotTurn) {\r\n                                    GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                                } else\r\n                                {\r\n                                    LossesData = null;\r\n                                    console.log(\"it was bot and had not enough money\");\r\n                                    this.CompleteTurnWithToast(\"\", 1200);\r\n                                }\r\n                            }\r\n                   } else if (tempType == 1)\r\n                   {\r\n                       DiceResult = LossesData.Data.result;\r\n                       totalAmount = LossesData.Data.TotalAmount;\r\n                       if (_manager.PlayerGameInfo[_playerIndex].Cash >= totalAmount) {\r\n                        _manager.PlayerGameInfo[_playerIndex].Cash -= totalAmount;\r\n                        this.CompleteTurnWithToast(\"Total amount $\" + totalAmount + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                        LossesData = null;\r\n                    } else {\r\n                        console.log(\"not enough cash\");\r\n                        if (!this.IsBotTurn) {\r\n                            GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                        } else\r\n                        {\r\n                            console.log(\"it was bot and had not enough money\");\r\n                            LossesData = null;\r\n                            this.CompleteTurnWithToast(\"\", 1200);\r\n                        }\r\n                    }\r\n                   }\r\n               }\r\n               break;\r\n         case \"10\"://Your computer has been hacked! You catch it in time, but you must buy more security for your business records. Pay $20,000 to the Bank.\r\n               console.log(this.Losses[Index].Description);\r\n               var _manager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n               var _playerIndex = GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n               var bill = 20000;\r\n               if (_manager.PlayerGameInfo[_playerIndex].Cash >= bill) {\r\n                _manager.PlayerGameInfo[_playerIndex].Cash -= bill;\r\n                this.CompleteTurnWithToast(\"Total amount $\" + bill + \" was successfully paid, remaining cash $\"+_manager.PlayerGameInfo[_playerIndex].Cash, 4200);\r\n                LossesData = null;\r\n            } else {\r\n                console.log(\"not enough cash\");\r\n                if (!this.IsBotTurn) {\r\n                    GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleScreen_InsufficientBalance(true);\r\n                } else\r\n                {\r\n                    console.log(\"it was bot and had not enough money\");\r\n                    LossesData = null;\r\n                    this.CompleteTurnWithToast(\"\", 1200);\r\n                }\r\n            }\r\n             break;\r\n         case \"11\":\r\n             console.log(this.Losses[Index].Description);\r\n             break;\r\n         case \"12\":\r\n             console.log(this.Losses[Index].Description);\r\n             break;\r\n         case \"13\":\r\n             console.log(this.Losses[Index].Description);\r\n             break;\r\n         case \"14\":\r\n             console.log(this.Losses[Index].Description);\r\n             break;\r\n         case \"15\":\r\n             console.log(this.Losses[Index].Description);\r\n             break;\r\n          default:\r\n             break;\r\n       }\r\n\r\n    },\r\n\r\n    WildCardFunctionality(_id)\r\n    {\r\n      var Index=parseInt(_id);\r\n      Index=Index-1;\r\n\r\n       switch (_id) {\r\n         case \"1\"://doubles your income on the next Pay Day.\r\n             console.log(this.WildCards[Index].Description);\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n\r\n             _manager.ToggleDoublePayNextTurn(true);\r\n             this.CompleteTurnWithToast(\"You will receive double profits on next payday.\",1800);\r\n             break;\r\n         case \"2\"://Roll 1 die, multiply result by $5,000 and receive your advance from the Bank.\r\n             console.log(this.WildCards[Index].Description);\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n             var _playerIndex=GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n             \r\n             var DiceResult=_manager.RollOneDice();\r\n             var CashMulitplier=5000;\r\n             var TotalResult=DiceResult*CashMulitplier;\r\n\r\n             _manager.PlayerGameInfo[_playerIndex].Cash+=TotalResult;\r\n             this.CompleteTurnWithToast(\"Dice Result: \"+DiceResult+\"\\n\"+\"\\n\"+\r\n                \"Total: \"+DiceResult+\" * \"+CashMulitplier+\" = \"+TotalResult+\"\\n\"+\"\\n\"+\"\\n\"+\r\n                \"Amount $\"+TotalResult+\" has been added into your cash.\"\r\n                ,4000);\r\n\r\n             break;\r\n         case \"3\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"4\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"5\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"6\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"7\"://pay off your loan for your Brick & Mortar Business. If you have no loan outstanding, receive $50,000.\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n             var _playerIndex=GamePlayReferenceManager.Instance.Get_GameManager().GetTurnNumber();\r\n             \r\n             var _loanReset=false;\r\n             for (let index = 0; index < _manager.PlayerGameInfo[_playerIndex].NoOfBusiness.length; index++) {\r\n                var _type=parseInt(_manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].BusinessType);\r\n                if(_type==2 && _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].LoanTaken)\r\n                {\r\n                    _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].LoanTaken=false;\r\n                    _manager.PlayerGameInfo[_playerIndex].NoOfBusiness[index].LoanAmount=0;\r\n                    _loanReset=true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if(_loanReset)\r\n            {\r\n                this.CompleteTurnWithToast(\"your outstanding loan has been payed off.\",2800);\r\n            }else\r\n            {\r\n                _manager.PlayerGameInfo[_playerIndex].Cash+=50000;\r\n                this.CompleteTurnWithToast(\"you had no loan, amount $50000 has been added to your cash\",2800);\r\n            }\r\n\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"8\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"9\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"10\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"11\":// receive double your business profits on all of your businesses.\r\n             console.log(this.WildCards[Index].Description);\r\n             var _manager=GamePlayReferenceManager.Instance.Get_GameManager();\r\n\r\n             _manager.ToggleDoublePayNextTurn(true);\r\n             this.CompleteTurnWithToast(\"You will receive double profits on next payday.\",1800);\r\n             break;\r\n         case \"12\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"13\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"14\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n         case \"15\":\r\n             console.log(this.WildCards[Index].Description);\r\n             break;\r\n          default:\r\n             break;\r\n       }\r\n\r\n    },\r\n\r\n    InvestFunctionality()\r\n    {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableInvest_InvestSetupUI(true);\r\n        this.ShowCardInfo(\"\",false);\r\n    },\r\n    PayDayFunctionality()\r\n    {\r\n\r\n    },\r\n    DoublePayDayFunctionality()\r\n    {\r\n\r\n    },\r\n    OneQuestionFunctionality()\r\n    {\r\n        GamePlayReferenceManager.Instance.Get_GameManager().OneQuestionScreen_Space_OneQuestion(true);\r\n        this.ShowCardInfo(\"\",false);\r\n    },\r\n    SellFunctionality()\r\n    {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableSellScreen__SellBusinessUISetup(true);\r\n        this.ShowCardInfo(\"\",false);\r\n    },\r\n    BuyOrSellFunctionality()\r\n    {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableBuyOrSell_BuyOrSellSetupUI(true);\r\n        this.ShowCardInfo(\"\",false);\r\n    },\r\n    GoBackFunctionality()\r\n    {\r\n        GamePlayReferenceManager.Instance.Get_GameManager().GoBackSpaces_spaceFunctionality();\r\n        this.ShowCardInfo(\"\",false);\r\n    },\r\n});\r\nmodule.exports= DecksData;\r\n"]}