{"version":3,"sources":["assets\\Script\\PlayerDetails.js"],"names":["GamePlayReferenceManager","QuestionsData","_gameManager","PlayerDetails","cc","Class","name","Component","properties","PlayerNameLabel","type","Label","serializable","IsOneQuestion","Boolean","IsPlayerSelectProfit","IsPlayerBusinessTakeOver","IsPlayerDamaging","SelectedPlayerIndex","Integer","SelectedPlayerUserID","Text","QuestionID","QuestionNode","Node","BuyHalfBusiness","onEnable","CheckReferences","QuestionAsked","VocQuestion","EstQuestion","ToastMessage","QuestionRef","require","setPlayerIndex","_index","setPlayerName","_name","string","setPlayerUID","_uID","setBuyHalf","_state","RaiseEventOneQuestion","Instance","Get_QuestionsData","_Qdata","console","log","VocabularyQuestions","EstablishmentQuestions","Get_MultiplayerController","GetSelectedMode","isActive","GetActiveStatus","Question","Option1","Option2","Option3","Option4","Get_GameplayUIManager","ShowQuestionToast","_data","UserID","UserIndex","IsVoc","Get_MultiplayerSyncManager","RaiseEvent","ToggleWaitingScreen_OneQuestionSetupUI","Get_GameManager","ShowToast","RaiseEventSelectPlayerForProfit","_gameplayManager","_playerIndex","GetTurnNumber","_iD","PlayerGameInfo","PlayerUID","PlayerName","OwnPlayerID","UserName","ExitAlongTurnOver_SelectPlayerForProfit","SelectPlayerBusinessTakeOver","Exit_SelectPlayerGeneric","EnableScreen__BusinessTakeOver","_businessLength","NoOfBusiness","length","_businessCounter","index","IsPartnership","SelectPlayerBusinessDamaging","IsBankRupted","GetBankruptedStatus","_sentdata","Player","PlayerIndex","MyUserID","WaitingForReply","ToggleWaitingScreen_PartnerShipSetup","AskVocabularyQuestion","GetVocabularyQuestionsIndex","SelectPlayerForProfit","SelectPlayerTakeOver","SelectPlayerDamaging","AskEstablishmentQuestion","GetEstablishmentQuestionsIndex","getRandom","min","max","Math","floor","random","update","dt","IsActive","ExitAlongTurnOver_OneQuestionSetupUI","ExitAlongTurnOver_SelectPlayerGeneric"],"mappings":"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","sourceRoot":"/","sourcesContent":["var GamePlayReferenceManager = null;\r\nvar QuestionsData = null;\r\nvar _gameManager = null;\r\nvar PlayerDetails = cc.Class({\r\n  name: \"PlayerDetails\",\r\n  extends: cc.Component,\r\n\r\n  properties: {\r\n    PlayerNameLabel: {\r\n      default: null,\r\n      type: cc.Label,\r\n      serializable: true,\r\n    },\r\n    IsOneQuestion: {\r\n      default: false,\r\n      type: cc.Boolean,\r\n      serializable: true,\r\n    },\r\n    IsPlayerSelectProfit: {\r\n      default: false,\r\n      type: cc.Boolean,\r\n      serializable: true,\r\n    },\r\n    IsPlayerBusinessTakeOver: {\r\n      default: false,\r\n      type: cc.Boolean,\r\n      serializable: true,\r\n    },\r\n    IsPlayerDamaging: {\r\n      default: false,\r\n      type: cc.Boolean,\r\n      serializable: true,\r\n    },\r\n    SelectedPlayerIndex: {\r\n      default: 0,\r\n      type: cc.Integer,\r\n      serializable: true,\r\n    },\r\n    SelectedPlayerUserID: {\r\n      default: \"\",\r\n      type: cc.Text,\r\n      serializable: true,\r\n    },\r\n    QuestionID: {\r\n      default: 0,\r\n      type: cc.Integer,\r\n      serializable: true,\r\n    },\r\n    QuestionNode: {\r\n      default: null,\r\n      type: cc.Node,\r\n      serializable: true,\r\n    },\r\n\r\n    BuyHalfBusiness: {\r\n      default: false,\r\n      type: cc.Boolean,\r\n      serializable: true,\r\n    },\r\n  },\r\n\r\n  onEnable() {\r\n    this.CheckReferences();\r\n\r\n    if (this.IsOneQuestion) {\r\n      this.QuestionAsked = false;\r\n      this.VocQuestion = false;\r\n      this.EstQuestion = false;\r\n      this.ToastMessage = \"\";\r\n      if (this.QuestionNode) {\r\n        this.QuestionRef = null;\r\n        // console.log(this.QuestionRef);\r\n      }\r\n    }\r\n  },\r\n\r\n  CheckReferences() {\r\n    if (!GamePlayReferenceManager || GamePlayReferenceManager == null) GamePlayReferenceManager = require(\"GamePlayReferenceManager\");\r\n    // if (!QuestionsData || QuestionsData == null) QuestionsData = require(\"QuestionsData\");\r\n  },\r\n\r\n  //#region One Question space funtionality\r\n  setPlayerIndex(_index) {\r\n    this.SelectedPlayerIndex = _index;\r\n  },\r\n\r\n  setPlayerName(_name) {\r\n    this.PlayerNameLabel.string = _name;\r\n  },\r\n\r\n  setPlayerUID(_uID) {\r\n    this.SelectedPlayerUserID = _uID;\r\n  },\r\n\r\n  setBuyHalf(_state) {\r\n    this.BuyHalfBusiness = _state;\r\n  },\r\n\r\n  RaiseEventOneQuestion() {\r\n    this.QuestionRef = GamePlayReferenceManager.Instance.Get_QuestionsData();\r\n    var _Qdata;\r\n    if (this.VocQuestion) {\r\n      console.log(\"voc\");\r\n      _Qdata = this.QuestionRef.VocabularyQuestions[this.QuestionID];\r\n    } else if (this.EstQuestion) {\r\n      console.log(\"est\");\r\n      _Qdata = this.QuestionRef.EstablishmentQuestions[this.QuestionID];\r\n    }\r\n\r\n    console.log(_Qdata);\r\n\r\n    if (GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode() == 2) {\r\n      var isActive = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetActiveStatus(this.SelectedPlayerUserID);\r\n\r\n      if (isActive) {\r\n        this.ToastMessage = \"You have asked following question:\" + \"\\n\" + _Qdata.Question + \"\\n\" + \"A. \" + _Qdata.Option1 + \"\\n\" + \"B. \" + _Qdata.Option2 + \"\\n\" + \"C. \" + _Qdata.Option3 + \"\\n\" + \"D. \" + _Qdata.Option4 + \"\\n\" + \"\\n\" + \"waiting for player to answer....\";\r\n        //GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_OneQuestionSetupUI(true);\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowQuestionToast(this.ToastMessage);\r\n\r\n        var _data = { Question: this.QuestionID, UserID: this.SelectedPlayerUserID, UserIndex: this.SelectedPlayerIndex, IsVoc: this.VocQuestion };\r\n        GamePlayReferenceManager.Instance.Get_MultiplayerSyncManager().RaiseEvent(7, _data);\r\n\r\n        //wait for other player\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_OneQuestionSetupUI(true);\r\n        _gameManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n        this.QuestionAsked = true;\r\n      } else {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is not active anymore.\");\r\n      }\r\n    } else {\r\n      console.log(\"no sending question to bot\");\r\n    }\r\n  },\r\n\r\n  RaiseEventSelectPlayerForProfit() {\r\n    if (GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode() == 2) {\r\n      this.ToastMessage = \"You will receive next all payday profits of player \" + this.PlayerNameLabel.string;\r\n      GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(this.ToastMessage, 3200);\r\n\r\n      var _gameplayManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n      var _playerIndex = _gameplayManager.GetTurnNumber();\r\n      var _iD = _gameplayManager.PlayerGameInfo[_playerIndex].PlayerUID;\r\n      var _name = _gameplayManager.PlayerGameInfo[_playerIndex].PlayerName;\r\n\r\n      var _data = { OwnPlayerID: _iD, UserID: this.SelectedPlayerUserID, UserIndex: this.SelectedPlayerIndex, UserName: _name };\r\n      GamePlayReferenceManager.Instance.Get_MultiplayerSyncManager().RaiseEvent(17, _data);\r\n      GamePlayReferenceManager.Instance.Get_GameplayUIManager().ExitAlongTurnOver_SelectPlayerForProfit();\r\n    } else {\r\n      console.log(\"no selecting player for profit with bot\");\r\n    }\r\n  },\r\n\r\n  SelectPlayerBusinessTakeOver() {\r\n    if (GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode() == 2) {\r\n      var isActive = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetActiveStatus(this.SelectedPlayerUserID);\r\n\r\n      if (isActive) {\r\n        if (this.BuyHalfBusiness == false) {\r\n          var _gameplayManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n          var _data = _gameplayManager.PlayerGameInfo[this.SelectedPlayerIndex];\r\n          console.log(_data);\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().Exit_SelectPlayerGeneric();\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableScreen__BusinessTakeOver(true, _data, this.SelectedPlayerIndex);\r\n        } //condition for card : Choose a player and buy half of one of their businesses. Roll two die, multiply by $3,000 and pay the player that amount for 50% interest in their business. You can choose not to, but you must make that choice before you roll.\r\n        else {\r\n          var _gameplayManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n          var _data = _gameplayManager.PlayerGameInfo[this.SelectedPlayerIndex];\r\n\r\n          var _businessLength = _data.NoOfBusiness.length;\r\n          var _businessCounter = 0;\r\n\r\n          for (let index = 0; index < _data.NoOfBusiness.length; index++) {\r\n            if (_data.NoOfBusiness[index].IsPartnership) {\r\n              _businessCounter++;\r\n            }\r\n          }\r\n\r\n          if (_businessCounter >= _businessLength) {\r\n            GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"All existing businesses of player are with partnership with someone.\");\r\n          } else {\r\n            console.log(_data);\r\n            GamePlayReferenceManager.Instance.Get_GameplayUIManager().Exit_SelectPlayerGeneric();\r\n            GamePlayReferenceManager.Instance.Get_GameplayUIManager().EnableScreen__BusinessTakeOver(true, _data, this.SelectedPlayerIndex, true);\r\n          }\r\n        }\r\n      } else {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is not active anymore.\");\r\n      }\r\n    } else {\r\n      console.log(\"no selecting player with bot\");\r\n    }\r\n  },\r\n\r\n  SelectPlayerBusinessDamaging() {\r\n    if (GamePlayReferenceManager.Instance.Get_MultiplayerController().GetSelectedMode() == 2) {\r\n      var isActive = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetActiveStatus(this.SelectedPlayerUserID);\r\n      var IsBankRupted = GamePlayReferenceManager.Instance.Get_MultiplayerController().GetBankruptedStatus(this.SelectedPlayerUserID);\r\n\r\n      if (isActive) {\r\n        //GamePlayReferenceManager.Instance.Get_GameplayUIManager().Exit_SelectPlayerGeneric();\r\n\r\n        if (IsBankRupted) {\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is already bankrupted this turn.\");\r\n        } else {\r\n          var _gameplayManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n          var _data = _gameplayManager.PlayerGameInfo[this.SelectedPlayerIndex];\r\n\r\n          var _sentdata = { Player: _data, PlayerIndex: this.SelectedPlayerIndex, MyUserID: _gameplayManager.PlayerGameInfo[_gameplayManager.GetTurnNumber()].PlayerUID };\r\n          GamePlayReferenceManager.Instance.Get_MultiplayerSyncManager().RaiseEvent(24, _sentdata);\r\n          _gameManager = GamePlayReferenceManager.Instance.Get_GameManager();\r\n          if (this.IsPlayerDamaging) {\r\n            this.WaitingForReply = true;\r\n          }\r\n          //wait for other player\r\n          GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_PartnerShipSetup(true);\r\n\r\n          console.log(_sentdata);\r\n        }\r\n      } else {\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is not active anymore.\");\r\n      }\r\n    } else {\r\n      console.log(\"no selecting player with bot\");\r\n    }\r\n  },\r\n\r\n  AskVocabularyQuestion() {\r\n    if (this.IsOneQuestion) {\r\n      var _index = GamePlayReferenceManager.Instance.Get_GameManager().GetVocabularyQuestionsIndex();\r\n      if (_index == -1) {\r\n        console.log(\"index -1 received\");\r\n        this.AskVocabularyQuestion();\r\n      } else {\r\n        this.QuestionID = _index;\r\n        //this.QuestionID = this.getRandom(0, 12);\r\n        this.VocQuestion = true;\r\n        this.EstQuestion = false;\r\n        this.RaiseEventOneQuestion();\r\n      }\r\n    }\r\n  },\r\n\r\n  SelectPlayerForProfit() {\r\n    if (this.IsPlayerSelectProfit) {\r\n      this.RaiseEventSelectPlayerForProfit();\r\n    }\r\n  },\r\n\r\n  SelectPlayerTakeOver() {\r\n    if (this.IsPlayerBusinessTakeOver) {\r\n      this.SelectPlayerBusinessTakeOver();\r\n    }\r\n  },\r\n\r\n  SelectPlayerDamaging() {\r\n    if (this.IsPlayerDamaging) {\r\n      this.SelectPlayerBusinessDamaging();\r\n    }\r\n  },\r\n\r\n  AskEstablishmentQuestion() {\r\n    if (this.IsOneQuestion) {\r\n      var _index = GamePlayReferenceManager.Instance.Get_GameManager().GetEstablishmentQuestionsIndex();\r\n      if (_index == -1) {\r\n        console.log(\"index -1 received\");\r\n        this.AskEstablishmentQuestion();\r\n      } else {\r\n        this.QuestionID = _index;\r\n        //this.QuestionID = this.getRandom(0, 12);\r\n        this.VocQuestion = false;\r\n        this.EstQuestion = true;\r\n        this.RaiseEventOneQuestion();\r\n      }\r\n    }\r\n  },\r\n\r\n  getRandom: function (min, max) {\r\n    return Math.floor(Math.random() * (max - min)) + min; // min included and max excluded\r\n  },\r\n\r\n  update(dt) {\r\n    if (this.QuestionAsked) {\r\n      if (_gameManager.PlayerGameInfo[this.SelectedPlayerIndex].PlayerUID == this.SelectedPlayerUserID && _gameManager.PlayerGameInfo[this.SelectedPlayerIndex].IsActive == false) {\r\n        this.QuestionAsked = false;\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is not active anymore, skipping turn.\");\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_OneQuestionSetupUI(false);\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ExitAlongTurnOver_OneQuestionSetupUI();\r\n      }\r\n    }\r\n\r\n    if (this.IsPlayerDamaging && this.WaitingForReply) {\r\n      if (_gameManager.PlayerGameInfo[this.SelectedPlayerIndex].PlayerUID == this.SelectedPlayerUserID && _gameManager.PlayerGameInfo[this.SelectedPlayerIndex].IsActive == false) {\r\n        this.WaitingForReply = false;\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ShowToast(\"current selected player is not active anymore, skipping turn.\");\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_PartnerShipSetup(false);\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ExitAlongTurnOver_SelectPlayerGeneric();\r\n      }\r\n    }\r\n  },\r\n\r\n  //   SkippedLoan() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 1;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n\r\n  //   TakenLoan() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 2;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n\r\n  //   IsBankrupt() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 3;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n\r\n  //   IsTurnSkip() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 4;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n\r\n  //   IsDoublePayDay() {\r\n  //     if (this.IsOneQuestion) {\r\n  //       this.QuestionID = 5;\r\n  //       this.RaiseEventOneQuestion();\r\n  //     }\r\n  //   },\r\n  // LIFE-CYCLE CALLBACKS:\r\n\r\n  // start () {\r\n\r\n  // },\r\n\r\n  // update (dt) {},\r\n});\r\n"]}