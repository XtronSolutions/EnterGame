{"version":3,"sources":["assets\\Script\\PlayerDetails.js"],"names":["GamePlayReferenceManager","PlayerDetails","cc","Class","name","Component","properties","PlayerNameLabel","type","Label","serializable","IsOneQuestion","Boolean","toolTip","SelectedPlayerIndex","Integer","SelectedPlayerUserID","Text","QuestionID","onEnable","CheckReferences","require","setPlayerIndex","_index","setPlayerName","_name","string","setPlayerUID","_uID","RaiseEventOneQuestion","_data","Question","UserID","UserIndex","Instance","Get_MultiplayerSyncManager","RaiseEvent","Get_GameplayUIManager","ToggleWaitingScreen_OneQuestionSetupUI","SkippedLoan","TakenLoan","IsBankrupt","IsTurnSkip","IsDoublePayDay"],"mappings":";;;;;;AAAA,IAAIA,wBAAwB,GAAC,IAA7B;AACA,IAAIC,aAAa,GAACC,EAAE,CAACC,KAAH,CAAS;AACvBC,EAAAA,IAAI,EAAC,eADkB;AAEvB,aAASF,EAAE,CAACG,SAFW;AAIvBC,EAAAA,UAAU,EAAE;AACRC,IAAAA,eAAe,EAAE;AACb,iBAAS,IADI;AAEbC,MAAAA,IAAI,EAAEN,EAAE,CAACO,KAFI;AAGbC,MAAAA,YAAY,EAAE;AAHD,KADT;AAKRC,IAAAA,aAAa,EAAE;AACX,iBAAS,KADE;AAEXH,MAAAA,IAAI,EAAEN,EAAE,CAACU,OAFE;AAGXF,MAAAA,YAAY,EAAE,IAHH;AAIXG,MAAAA,OAAO,EAAC;AAJG,KALP;AAURC,IAAAA,mBAAmB,EAAE;AACjB,iBAAS,CADQ;AAEjBN,MAAAA,IAAI,EAAEN,EAAE,CAACa,OAFQ;AAGjBL,MAAAA,YAAY,EAAE;AAHG,KAVb;AAcRM,IAAAA,oBAAoB,EAAE;AAClB,iBAAS,EADS;AAElBR,MAAAA,IAAI,EAAEN,EAAE,CAACe,IAFS;AAGlBP,MAAAA,YAAY,EAAE;AAHI,KAdd;AAkBRQ,IAAAA,UAAU,EAAE;AACR,iBAAS,CADD;AAERV,MAAAA,IAAI,EAAEN,EAAE,CAACa,OAFD;AAGRL,MAAAA,YAAY,EAAE;AAHN;AAlBJ,GAJW;AA6BvBS,EAAAA,QA7BuB,sBA8BvB;AACI,SAAKC,eAAL;AACH,GAhCsB;AAkCvBA,EAAAA,eAlCuB,6BAmCtB;AACG,QAAG,CAACpB,wBAAD,IAA6BA,wBAAwB,IAAE,IAA1D,EACAA,wBAAwB,GAACqB,OAAO,CAAC,0BAAD,CAAhC;AACF,GAtCqB;AAwCvB;AAEA;AACA;AACA;AACA;AACA;AACAC,EAAAA,cA/CuB,0BA+CRC,MA/CQ,EAgDvB;AACI,SAAKT,mBAAL,GAAyBS,MAAzB;AACH,GAlDsB;AAoDvBC,EAAAA,aApDuB,yBAoDTC,KApDS,EAqDvB;AACI,SAAKlB,eAAL,CAAqBmB,MAArB,GAA4BD,KAA5B;AACH,GAvDsB;AAyDvBE,EAAAA,YAzDuB,wBAyDVC,IAzDU,EA0DvB;AACI,SAAKZ,oBAAL,GAA0BY,IAA1B;AACH,GA5DsB;AA8DvBC,EAAAA,qBA9DuB,mCA+DvB;AACI,QAAIC,KAAK,GAAC;AAACC,MAAAA,QAAQ,EAAC,KAAKb,UAAf;AAA0Bc,MAAAA,MAAM,EAAC,KAAKhB,oBAAtC;AAA2DiB,MAAAA,SAAS,EAAC,KAAKnB;AAA1E,KAAV;AACAd,IAAAA,wBAAwB,CAACkC,QAAzB,CAAkCC,0BAAlC,GAA+DC,UAA/D,CAA0E,CAA1E,EAA4EN,KAA5E,EAFJ,CAII;;AACA9B,IAAAA,wBAAwB,CAACkC,QAAzB,CAAkCG,qBAAlC,GAA0DC,sCAA1D,CAAiG,IAAjG;AACH,GArEsB;AAuEvBC,EAAAA,WAvEuB,yBAwEvB;AACI,QAAG,KAAK5B,aAAR,EACA;AACI,WAAKO,UAAL,GAAgB,CAAhB;AACA,WAAKW,qBAAL;AACH;AACJ,GA9EsB;AAgFvBW,EAAAA,SAhFuB,uBAiFvB;AACI,QAAG,KAAK7B,aAAR,EACA;AACI,WAAKO,UAAL,GAAgB,CAAhB;AACA,WAAKW,qBAAL;AACH;AACJ,GAvFsB;AAyFvBY,EAAAA,UAzFuB,wBA0FvB;AACI,QAAG,KAAK9B,aAAR,EACA;AACI,WAAKO,UAAL,GAAgB,CAAhB;AACA,WAAKW,qBAAL;AACH;AACJ,GAhGsB;AAkGvBa,EAAAA,UAlGuB,wBAmGvB;AACI,QAAG,KAAK/B,aAAR,EACA;AACI,WAAKO,UAAL,GAAgB,CAAhB;AACA,WAAKW,qBAAL;AACH;AACJ,GAzGsB;AA2GvBc,EAAAA,cA3GuB,4BA4GvB;AACI,QAAG,KAAKhC,aAAR,EACA;AACI,WAAKO,UAAL,GAAgB,CAAhB;AACA,WAAKW,qBAAL;AACH;AACJ,GAlHsB,CAmHvB;AAIA;AAEA;AAEA;;AA3HuB,CAAT,CAAlB","sourceRoot":"/","sourcesContent":["var GamePlayReferenceManager=null;\r\nvar PlayerDetails=cc.Class({\r\n    name:\"PlayerDetails\",\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        PlayerNameLabel: {\r\n            default: null,\r\n            type: cc.Label,\r\n            serializable: true},\r\n        IsOneQuestion: {\r\n            default: false,\r\n            type: cc.Boolean,\r\n            serializable: true,\r\n            toolTip:\"Is current node can be selected as one question functionality\"},\r\n        SelectedPlayerIndex: {\r\n            default: 0,\r\n            type: cc.Integer,\r\n            serializable: true},\r\n        SelectedPlayerUserID: {\r\n            default: \"\",\r\n            type: cc.Text,\r\n            serializable: true},\r\n        QuestionID: {\r\n            default: 0,\r\n            type: cc.Integer,\r\n            serializable: true},\r\n        \r\n    },\r\n\r\n    onEnable()\r\n    {\r\n        this.CheckReferences();\r\n    },\r\n\r\n    CheckReferences()\r\n     {\r\n        if(!GamePlayReferenceManager || GamePlayReferenceManager==null)\r\n        GamePlayReferenceManager=require('GamePlayReferenceManager');\r\n     },\r\n\r\n    //#region One Question space funtionality\r\n\r\n    //Question 1: have you skipped loan previous payday?\r\n    //Question 2: Have you taken any loan?\r\n    //Question 3: Are you bankrupted? if more than once, tell me the amount?\r\n    //Question 4: Is your turn going to be skipped next time?\r\n    //Question 5: Is it going to be double pay day your next payday?\r\n    setPlayerIndex(_index)\r\n    {\r\n        this.SelectedPlayerIndex=_index;\r\n    },\r\n\r\n    setPlayerName(_name)\r\n    {\r\n        this.PlayerNameLabel.string=_name;\r\n    },\r\n\r\n    setPlayerUID(_uID)\r\n    {\r\n        this.SelectedPlayerUserID=_uID;\r\n    },\r\n\r\n    RaiseEventOneQuestion()\r\n    {\r\n        var _data={Question:this.QuestionID,UserID:this.SelectedPlayerUserID,UserIndex:this.SelectedPlayerIndex};\r\n        GamePlayReferenceManager.Instance.Get_MultiplayerSyncManager().RaiseEvent(7,_data);\r\n\r\n        //wait for other player\r\n        GamePlayReferenceManager.Instance.Get_GameplayUIManager().ToggleWaitingScreen_OneQuestionSetupUI(true);\r\n    },\r\n\r\n    SkippedLoan()\r\n    {\r\n        if(this.IsOneQuestion)\r\n        {\r\n            this.QuestionID=1;\r\n            this.RaiseEventOneQuestion();\r\n        }\r\n    },\r\n\r\n    TakenLoan()\r\n    {\r\n        if(this.IsOneQuestion)\r\n        {\r\n            this.QuestionID=2;\r\n            this.RaiseEventOneQuestion();\r\n        }\r\n    },\r\n\r\n    IsBankrupt()\r\n    {\r\n        if(this.IsOneQuestion)\r\n        {\r\n            this.QuestionID=3;\r\n            this.RaiseEventOneQuestion();\r\n        }\r\n    },\r\n\r\n    IsTurnSkip()\r\n    {\r\n        if(this.IsOneQuestion)\r\n        {\r\n            this.QuestionID=4;\r\n            this.RaiseEventOneQuestion();\r\n        }\r\n    },\r\n\r\n    IsDoublePayDay()\r\n    {\r\n        if(this.IsOneQuestion)\r\n        {\r\n            this.QuestionID=5;\r\n            this.RaiseEventOneQuestion();\r\n        }\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n \r\n\r\n    // start () {\r\n\r\n    // },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}